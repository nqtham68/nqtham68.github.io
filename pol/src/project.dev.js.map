{"version":3,"sources":["assets/scripts/libs/msgpack/Decoder.ts","assets/scripts/libs/msgpack/Encoder.ts","assets/scripts/libs/multiplayer/ErrorCode.ts","assets/scripts/libs/msgpack/ExtData.ts","assets/scripts/libs/msgpack/ExtensionCodec.ts","packages/i18n/runtime-scripts/LabelLocalized.ts","assets/scripts/libs/multiplayer/MpController.ts","assets/scripts/libs/multiplayer/MpMacher.ts","assets/scripts/libs/multiplayer/components/NetComponent.ts","assets/scripts/libs/multiplayer/components/NetConnection.ts","assets/scripts/libs/multiplayer/components/NetManager.ts","assets/scripts/libs/multiplayer/components/NetMessageQueue.ts","assets/scripts/libs/multiplayer/components/NetModules.ts","assets/scripts/libs/multiplayer/components/NetPlayer.ts","assets/scripts/libs/multiplayer/components/NetUtils.ts","packages/i18n/runtime-scripts/RichTextLocalized.ts","assets/scripts/game/bomb.ts","assets/scripts/config.ts","assets/scripts/libs/msgpack/decodeAsync.ts","assets/scripts/libs/msgpack/decode.ts","assets/scripts/libs/msgpack/encode.ts","assets/scripts/core/event-manager.ts","assets/scripts/game/fire-spawner.ts","assets/scripts/game/game-net.ts","assets/scripts/game/game.ts","assets/scripts/core/global-var.ts","packages/i18n/runtime-scripts/i18n.js","assets/scripts/libs/msgpack/index.ts","assets/scripts/game/input/input-keyboard.ts","assets/scripts/game/input/input-touch.ts","assets/scripts/game/input/input.ts","assets/scripts/libs/msgpack/utils/int.ts","assets/scripts/game/menu/lobby/join-team.ts","assets/scripts/game/menu/lobby/live-team-item.ts","assets/scripts/game/menu/lobby/live-team.ts","assets/scripts/core/loader.ts","assets/scripts/game/menu/lobby/lobby.ts","assets/scripts/core/localization.ts","assets/scripts/core/localstorage.ts","assets/scripts/game/menu/main-menu.ts","assets/scripts/game/map-scale.ts","assets/scripts/game/multiplayer/matchmaker-control.ts","assets/scripts/game/move-around-control.ts","assets/scripts/game/menu/lobby/new-team-item.ts","assets/scripts/game/menu/lobby/new-team.ts","assets/scripts/game/path-visual.ts","assets/scripts/player-ref.ts","assets/scripts/game/player.ts","packages/i18n/runtime-scripts/polyglot.js","assets/scripts/core/popup.ts","assets/scripts/libs/msgpack/utils/prettyByte.ts","assets/scripts/core/sound-manager.ts","assets/scripts/libs/msgpack/utils/stream.ts","assets/scripts/game/strength-control.ts","assets/scripts/libs/msgpack/timestamp.ts","assets/scripts/libs/msgpack/utils/typedArrays.ts","assets/scripts/libs/msgpack/utils/utf8.ts","assets/scripts/utils.ts"],"names":["prettyByte_1","require","ExtensionCodec_1","int_1","utf8_1","typedArrays_1","State","HEAD_BYTE_REQUIRED","EMPTY_VIEW","DataView","ArrayBuffer","EMPTY_BYTES","Uint8Array","buffer","exports","DataViewIndexOutOfBoundsError","getInt8","e","constructor","Error","MORE_DATA","DEFAULT_MAX_LENGTH","Decoder","extensionCodec","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","mapKeys","ExtensionCodec","defaultCodec","this","totalPos","pos","view","bytes","headByte","stack","prototype","setBuffer","ensureUint8Array","createDataView","appendBuffer","hasRemaining","remainingData","subarray","newData","concated","length","set","size","byteLength","createNoExtraBytesError","posToShow","_a","RangeError","decodeOneSync","object","decodeSync","decodeOneAsync","stream","__awaiter","Promise","decoded","stream_1","__asyncValues","stream_1_1","value","_b","prettyByte","decodeStream","stream_2","stream_2_1","result","__await","sent","e_3","decodeArrayStream","headerParsed","itemsLeft","stream_3","stream_3_1","readArraySize","complete","e_5","DECODE","readHeadByte","pushMapState","pushArrayState","decodeUtf8String","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","state","type","ARRAY","array","position","pop","MAP_KEY","key","MAP_VALUE","map","readCount","push","Array","headerOffset","offset","utf8DecodeJs","headOffset","extType","data","decode","getUint8","getUint16","getUint32","getInt16","getInt32","getUint64","getInt64","getFloat32","getFloat64","DEFAULT_MAX_DEPTH","DEFAULT_INITIAL_BUFFER_SIZE","Encoder","maxDepth","initialBufferSize","sortKeys","i","encode","depth","Object","keys","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","getUint8Array","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF64","writeStringHeader","maxHeaderSize","strLength","utf8Count","utf8EncodeJs","ext","tryToEncode","encodeExtension","isArray","encodeArray","isView","encodeBinary","toString","apply","encodeMap","writeU8a","_i","object_1","item","sort","keyIdx","console","warn","setUint8","values","setInt8","setUint16","setInt16","setUint32","setInt32","setFloat64","setUint64","setInt64","MpCode","CONNECT_ERROR","MAKER_NOT_INIT","INVALID_ROOM","ROOM_NOT_EXIST","ROOM_FULL","SOCKET_JOIN_FAILED","QUICK_JOIN_FAILED","KICK_PLAYER_FALIED","INVALID_PARAMS","HAS_NOT_PERMIT","START_GAME_FAILED","JOIN_ROOM_FAILED","MpEvent","S_ERROR","S_CONNECTED","S_ROOM_CREATED","S_ROOM_JOINED","S_QUICK_ROOM_JOINED","S_QUICK_ROOM_LEFT","S_ROOM_PLAYER_JOINED","S_ROOM_PLAYER_LEFT","S_ROOM_MASTER_CHANGE","S_PLAYER_STATUS_CHANGE","S_IDLE_PLAYER_CHANGE","S_QROOM_RESULT","S_QPLAYER_RESULT","S_GAME_STARTED","S_GAME_CANCEL","S_GAME_STARTING","S_ROOM_INFO_RESULT","S_PLAYER_KICKED","S_PLAYER_INVITED","S_ROOM_MESSAGE","S_DEBUG_RESULT","C_QUERY_ROOM","C_QUERY_PLAYER","C_ROOM_INFO","C_CREATE_ROOM","C_JOIN_ROOM","C_LEAVE_ROOM","C_PLAYER_READY","C_KICK_PLAYER","C_QUICK_PLAY","C_QUICK_JOIN","C_CANCEL_PLAY","C_INVITE","C_START_GAME","C_ROOM_MESSAGE","C_DEBUG","ExtData","ExtData_1","timestamp_1","builtInEncoders","builtInDecoders","encoders","decoders","register","timestampExtension","index","encoder","decoder","cc","_decorator","ccclass","property","requireComponent","executeInEditMode","menu","i18n","LabelLocalized","_super","__extends","_this","arguments","_textKey","label","textProp","defineProperty","get","updateLabel","onLoad","getComponent","Label","textKey","trim","split","text","t","string","updateTextProp","props","__decorate","multiline","tooltip","Component","default","MpMacher_1","Connection","ready","MpController","onDisconnect","dataCache","onData","from","serverPlayer","localPlayer","connections","rtcConfig","iceServers","urls","username","credential","sdpConstraints","offerToReceiveAudio","offerToReceiveVideo","dataChannelConfig","ordered","maxRetransmits","connectionCount","setDataReceiver","receiver","forEach","send","id","channel","disconnect","sendServer","broadcast","close","startGame","room","players","player","idx","init","signalChannel","signal","on","Room","server","window","GAME_SERVER","connection_1","peer","RTCPeerConnection","createDataChannel","onclose","playerId","log","onopen","checkReady","onerror","onmessage","onicecandidate","event","candidate","emit","to","createOffer","then","sdp","setLocalDescription","connection_2","ondatachannel","setRemoteDescription","createAnswer","addIceCandidate","readyCount","ErrorCode_1","MpController_1","Player","master","max","getPlayer","removePlayer","splice","PlayType","MatchMaker","_listenIdleChange","connect","gameId","playerName","playerData","cdata","name","JSON","stringify","socket","io","query","reconnection","setServerListener","controller","createRoom","joinRoom","roomId","leaveRoom","sendRoomMessage","message","setReady","kickPlayer","invitePlayer","getRooms","getIdlePlayers","listenChange","setListenIdlePlayersChange","listen","listener","onIdlePlayersChange","removeAllListeners","quickJoinRoom","quickPlay","cancelPlay","error","onError","onConnected","onRoomCreated","onRoomJoined","onRoomPlayerJoined","onRoomPlayerLeft","onPlayerKicked","onRoomMessage","onPlayerStatusChange","onRoomMasterChange","onRoomsResult","onPlayersResult","onQuickRoomJoined","onPlayerInvite","onGameStarted","onGameCancel","onGameStarting","NetModules_1","disallowMultiple","SyncMode","NetComponent","syncRate","interpolate","syncMode","Position","syncVars","_posBuffer","lastCaptureData","lastTimeSync","Date","now","collectSyncVars","CC_SERVER","start","schedule","syncToClient","bind","onEnable","NetManager","instance","registerNetObject","onDisable","unregisterNetObject","update","dt","factor","game","getFrameRate","time","shift","delta","r","target","lerp","node","setPosition","isSync","deSync","applyServerData","v2","_lastStatePos","vars","syncvar","_syncVars","enabled","captureData","vec2Round","x","y","compareObj","mergeDeep","captureDataFull","creator","messageQueue","sync","comps","_components","comp","_syncVarsPool","Enum","ClientOnly","ServerOnly","SyncVar","notify","propertyKey","scheduleOnce","enumerable","configurable","descriptor","method","args","msgpack_1","USE_MSGPACK","NetConnection","systemKeys","onDataReceived","onChannelData","addMapKeys","concat","parse","handle","NetEvent","spawnObjects","messageRate","_spawnPrefabs","_netObjects","_objectsInfo","NetManager_1","setNetObjectChangedListener","onNetObjectChanged","setEventListener","onEvent","obj","_netConnection","NetMessageQueue","onNetData","onDisConnected","pingTask","sys","disPlayers_1","lastRep","DISCONNECT","getNetObject","objectId","getLocalPlayer","ping","spawnObject","spawnFromPrefab","prefab","instantiate","netcomp","NetPlayer","isLocalPlayer","ShortId","generate","spawn","netdatas","sysData","allready","READY","pong","info","move","applyPlayerMove","act","applyAction","Prefab","connectionChannel","queue","pqueue","connection","assign","__export","lasMoveSeq","_pendingMoves","_moves","call","playerMove","syncMove","applyMove","playerAction","action","syncAction","seq","current","_statePos","a","b","pos_1","__assign","ALPHABET","charAt","Math","floor","random","objects","isObject","reduce","prev","pVal","oVal","p","hasOwnProperty","round","LabelLocalized_1","RichTextLocalized","RichText","path_visual_1","global_var_1","player_1","BombState","Bomb","speed","dropSpeed","exploreTime","mask","exploreRange","NONE","movePath","BezierPath","throwTime","throwTimeCount","maskHeight","exploreTimeCount","cprogress","explored","Bomb_1","active","scale","height","maxRange","colliders","getComponents","Collider","DROP","col","tag","onStateChange","THROW","getBezierPath","throwVector","s","endPos","sub","startPos","mag","onBindToPlayer","bindId","binPlayer","setDropTarget","dropPos","dropTarget","startThrow","val","setBindPlayer","BIND","IDLE","setThrowDirection","control","canCapture","dy","progress","abs","runAction","sequence","scaleTo","callFunc","collid","onBindFireExplore","delayTime","removeFromParent","getPoint","Node","Config","PROJECT_ID","PROJECT_VERSION","Decoder_1","decode_1","defaultDecodeAsyncOptions","defaultDecodeOptions","decodeAsync","streamLike","options","ensureAsyncIterabe","Encoder_1","defaultEncodeOptions","Listenner","callback","priority","excuteOnce","EventManager","eventListenners","_instance","listenner","registerOnce","unregister","toRemove_1","filter","indexOf","unregisterTarget","_loop_1","toRemove","this_1","remove","dispatch","params","excuteOnce_1","bomb_1","event_manager_1","game_net_1","BombSpawner","delayActive","spawnRate","firePrefab","activeSpawn","EVT_GAME_OVER","onGameOver","targetY","bomb","unschedule","onDestroy","GameNet","gameTime","gameOver","GameNet_1","stime","ltime","score1","score2","loader_1","popup_1","utils_1","customMapKeys","Game","root","playerPrefab","gameSyncPrefab","deathTime","gameOverMsg","team1Pos","team2Pos","gameSync","Game_1","loaded","director","getCollisionManager","parent","loadScene","EVT_DEATH_TIME","onPlayerDeathTimeUpdate","EVT_REVIVE","onPlayerRevive","EVT_DEATH","onPlayerDeath","onNetEvent","createPlayer","Utils","time2String","showInfoPopup","showNotify","addChild","team","half_1","team1Idx_1","team2Idx_1","playerInfo","playerNode","showDeathMessage","hideDeathMessage","netPlayer","teamWin","color","onButtonHome","GlobalVar","_vars","varName","deleteAfterRead","languages","Polyglot","supported_languages","saveLanguage","localStorage","getItem","lang","language","setItem","polyglot","phrases","allowMissing","module","replace","getSaveLang","opt","encode_1","decodeAsync_1","ExtensionCodecType","ExtensionDecoderType","ExtensionEncoderType","EXT_TIMESTAMP","encodeDateToTimeSpec","encodeTimeSpecToTimestamp","decodeTimestampToTimeSpec","encodeTimestampExtension","decodeTimestampExtension","input_1","InputKeyboard","preAngle","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","updateMove","code","keyCode","macro","KEY","up","w","down","left","right","d","space","fireAction","angle","getMoveDirection","setMoveDirection","moveDirection","move_around_control_1","InputTouch","moveControl","fireControl","onMoveEnd","fireControlRelease","getMoveDelta","misc","radiansToDegrees","atan2","fire","setFireTarget","cancel","Input","_moveDir","moveSeq","fastSpeedMode","angleDeg","getMoveData","lastMoveTime","dir","EVT_THROW_FIRE","fireTarget","getFireTarget","setFastSpeedMode","fast","EVT_FAST_SPEED","high","low","matchmaker_control_1","JoinTeam","teamId","joinButton","JoinTeam_1","matcherCtrl","MatchMakerControl","MAKER_ROOM_JOINED","EVT_TEAM_JOINED","MAKER_ERROR","errorCode","onButtonJoin","matchmaker","EditBox","Button","LiveTeamItem","roomName","playerCount","LiveTeamItem_1","EVT_JOIN_ROOM","setData","live_team_item_1","LiveTeam","content","templateItem","getComponentInChildren","removeAllChildren","MAKER_ROOM_RESULT","rooms","matcher","onButtonRefresh","setMatcher","reset","player_ref_1","sound_manager_1","localization_1","Loader","nextScene","targetLoad","_loadInstances","PlayerRef","Sound","_loadGame","Loader_1","getCurrentSceneName","next","initLoader","getCurrentLanguage","setLanguage","initialized","allLoaded","inst","scene","_sceneInfos","element","uuid","_scene","_id","url","substring","lastIndexOf","match","new_team_1","join_team_1","live_team_1","Lobby","mainNode","joinButtonNode","newTeamNode","joinTeamNode","liveTeamNode","backNode","pageStack","currentPage","setLobby","pushPage","setRoomInfo","onButtonNewTeam","play","PAIR","onButtonJoinTeam","setFocus","onButtonLiveTeam","onButtonBackPage","popPage","page","replacer","in","out","runInOutAction","moveTo","easing","easeBackInOut","onButtonBackMM","Localization","rootNodes","getScene","children","allLocalizedLabels","labels","getComponentsInChildren","config_1","LocalStorage","_key","_default","removeItem","MainMenu","editNameButton","playerDisplay","playerPols","playerPolsMask","playerCols","playerColor","playType","currentPol","displayIdx","currentCol","displayColor","matchmakerCtrl","updatePlayerDisplay","hideWaitingPopup","MAKER_CONNECTED","showWaitingPopup","MAKER_GAME_STARTED","onButtonQuickPlay","c","onButtonTeamPlay","onEditPlayerName","moveBy","onButtonEditPlayerName","onButtonSelectPol","step","onButtonSelectCol","spriteFrame","Sprite","SpriteFrame","MapScale","widget","Widget","SIZE_CHANGED","onTargetSizeChange","updateAlignment","rx","width","ry","min","setScale","serverUrl","matchmakerListen","MAKER_ROOM_CREATED","MAKER_ROOM_PLAYER_JOINED","MAKER_ROOM_PLAYER_LEFT","MAKER_PLAYER_KICKED","MAKER_PLAYER_INVITED","MAKER_ROOM_MESSAGE","status","MAKER_PLAYER_STATUS_CHANGE","newMasterId","MAKER_ROOM_MASTER_CHANGE","MAKER_PLAYER_RESULT","MAKER_QUICK_ROOM_JOINED","MAKER_GAME_STARTING","MAKER_GAME_CANCEL","MAKER_IDLE_PLAYER_CHANGE","MoveControl","moveSprite","aroundSprite","maxDistance","moveData","Vec2","ZERO","basePos","basePosWorld","convertToWorldSpaceAR","opacity","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","getLocation","angel","tx","cos","ty","sin","endMove","magSqr","NewTeamItem","coverBackground","readyStatus","kickoutButton","readyFrame","waitFrame","hasPlayer","NewTeamItem_1","onButonKick","EVT_KICK_PLAYER","playerJoin","playerLeft","setMasterView","setNormalView","new_team_item_1","NewTeam","title","readyButton","startButton","teamSlots","playerSlots","isMaster","myPlayerId","slot","updateMasterView","checkStartReady","lobby","masterId","masterPlayerId","initPlayers","onButtonReady","onButtonStart","allReady","interactable","PathVisual","pathSeg","pathEnd","segNodes","maxSeg","PathVisual_1","node_1","addComponent","bezier","generatePath","directionVector","l","segUsed","ceil","setDirectionVector","vector","path","end","add","pa","controlPointAngle","v","rotate","degreesToRadians","c1","c2","addSelf","control1","control2","c1y","c2y","localstorage_1","_name","_displayIdx","_displayColor","_current","setId","PlayerAction","normalSpeed","display","healthNode","maxHeath","maxFireRange","pathVisual","face","death","Player_1","onThrowFire","onFastSpeed","strength","health","setupDisplay","setRotation","bindFireId","dis","rot","hp","healthNodeMaxHeight","calcSpeed","colorIdx","pols","polsMask","cols","healthSprite","base","dx","playerHW","top","bottom","FIRE_THROW","FAST_SPEED","onCollisionEnter","other","self","displayName","factory","define","amd","_typeof","global","undefined","String","extend","currentLocale","locale","VERSION","newLocale","morePhrases","prefix","phrase","unset","clear","newPhrases","smart_count","_","clone","choosePluralForm","has","delimeter","pluralTypes","chinese","n","german","french","russian","czech","polish","icelandic","pluralTypeToLanguages","langToTypeMap","mapping","langs","ret","trimRe","str","count","texts","chosenText","pluralTypeIndex","pluralTypeName","langToPluralType","en","dollarRegex","dollarBillsYall","arg","replacement","RegExp","source","prop","Popup","dialogPopup","waitingPopup","notifyPopup","waitingPopupNode","Popup_1","addPersistRootNode","zIndex","closeCallback","canvas","find","blockInput","getChildByName","contentNode","button","playAppearAnim","showConfirmPopup","positiveButLabel","negativeButLabel","positiveCallback","negativeCallback","button1","button2","cacelable","closeButton","duration","container","h","ch","easeSineOut","byte","padStart","SoundManager","sounds","playingSounds","enable","effectEnable","musicEnable","DEBUG_LOG","SoundManager_1","setEnable","setEffectEnable","setMusicEnable","loader","loadResDir","AudioClip","assets","sound","parseInt","playMusic","clipName","loop","toLowerCase","audioEngine","playEffect","playRandom","clipsName","effect","pause","getState","AudioState","PLAYING","resume","PAUSED","stop","isPlaying","pauseAll","resumeAll","stopAll","setMusicVolume","volume","setEffectVolume","setEffectsVolume","getSoundId","isAsyncIterable","Symbol","asyncIterator","asyncIterableFromStream","reader","getReader","read","done","releaseLock","StrengthControl","strengthProgress","ProgressBar","barSprite","Color","RED","TIMESTAMP32_MAX_SEC","TIMESTAMP64_MAX_SEC","sec","nsec","rv","secHigh","secLow","date","msec","getTime","nsecInSec","timeSpec","byteOffset","nsec30AndSecHigh2","secLow32","bufferView","charCodeAt","extra","output","outputOffset","CHUNK_SIZE","inputOffset","units","byte1","byte2","byte3","byte4","unit","fromCharCode","RandomUnique","recycle","unique","initLength","Constant","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","ratio","genUId","substr","src","randomRange","zeropad","zeroes"],"mappings":"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","sourcesContent":["import { prettyByte } from \"./utils/prettyByte\";\r\nimport { ExtensionCodec } from \"./ExtensionCodec\";\r\nimport { getInt64, getUint64 } from \"./utils/int\";\r\nimport { utf8DecodeJs } from \"./utils/utf8\";\r\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\r\n\r\nenum State {\r\n  ARRAY,\r\n  MAP_KEY,\r\n  MAP_VALUE,\r\n}\r\n\r\ntype StackMapState = {\r\n  type: State.MAP_KEY | State.MAP_VALUE;\r\n  size: number;\r\n  key: string | null;\r\n  readCount: number;\r\n  map: Record<string, unknown>;\r\n};\r\n\r\ntype StackArrayState = {\r\n  type: State.ARRAY;\r\n  size: number;\r\n  array: Array<unknown>;\r\n  position: number;\r\n};\r\n\r\ntype StackState = StackArrayState | StackMapState;\r\n\r\nconst HEAD_BYTE_REQUIRED = -1;\r\n\r\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\r\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\r\n\r\n// IE11: Hack to support IE11.\r\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\r\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\r\n  try {\r\n    // IE11: The spec says it should throw RangeError,\r\n    // IE11: but in IE11 it throws TypeError.\r\n    EMPTY_VIEW.getInt8(0);\r\n  } catch (e) {\r\n    return e.constructor;\r\n  }\r\n  throw new Error(\"never reached\");\r\n})();\r\n\r\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\r\n\r\nconst DEFAULT_MAX_LENGTH = 0xffff_ffff; // uint32_max\r\n\r\nexport class Decoder {\r\n  totalPos = 0;\r\n  pos = 0;\r\n\r\n  view = EMPTY_VIEW;\r\n  bytes = EMPTY_BYTES;\r\n  headByte = HEAD_BYTE_REQUIRED;\r\n  readonly stack: Array<StackState> = [];\r\n\r\n  constructor(\r\n    readonly extensionCodec = ExtensionCodec.defaultCodec,\r\n    readonly maxStrLength = DEFAULT_MAX_LENGTH,\r\n    readonly maxBinLength = DEFAULT_MAX_LENGTH,\r\n    readonly maxArrayLength = DEFAULT_MAX_LENGTH,\r\n    readonly maxMapLength = DEFAULT_MAX_LENGTH,\r\n    readonly maxExtLength = DEFAULT_MAX_LENGTH,\r\n    readonly mapKeys: string[] | null = null,\r\n  ) {}\r\n\r\n  setBuffer(buffer: ArrayLike<number>): void {\r\n    this.bytes = ensureUint8Array(buffer);\r\n    this.view = createDataView(this.bytes);\r\n    this.pos = 0;\r\n  }\r\n\r\n  appendBuffer(buffer: ArrayLike<number>) {\r\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining()) {\r\n      this.setBuffer(buffer);\r\n    } else {\r\n      // retried because data is insufficient\r\n      const remainingData = this.bytes.subarray(this.pos);\r\n      const newData = ensureUint8Array(buffer);\r\n      const concated = new Uint8Array(remainingData.length + newData.length);\r\n      concated.set(remainingData);\r\n      concated.set(newData, remainingData.length);\r\n      this.setBuffer(concated);\r\n    }\r\n  }\r\n\r\n  hasRemaining(size = 1) {\r\n    return this.view.byteLength - this.pos >= size;\r\n  }\r\n\r\n  createNoExtraBytesError(posToShow: number) {\r\n    const { view, pos } = this;\r\n    return new RangeError(`Extra ${view.byteLength - pos} byte(s) found at buffer[${posToShow}]`);\r\n  }\r\n\r\n  decodeOneSync(): unknown {\r\n    const object = this.decodeSync();\r\n    if (this.hasRemaining()) {\r\n      throw this.createNoExtraBytesError(this.pos);\r\n    }\r\n    return object;\r\n  }\r\n\r\n  async decodeOneAsync(stream: AsyncIterable<ArrayLike<number>>): Promise<unknown> {\r\n    let decoded = false;\r\n    let object: unknown;\r\n    for await (const buffer of stream) {\r\n      if (decoded) {\r\n        throw this.createNoExtraBytesError(this.totalPos);\r\n      }\r\n\r\n      this.appendBuffer(buffer);\r\n\r\n      try {\r\n        object = this.decodeSync();\r\n        decoded = true;\r\n      } catch (e) {\r\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\r\n          throw e; // rethrow\r\n        }\r\n        // fallthrough\r\n      }\r\n      this.totalPos += this.pos;\r\n    }\r\n\r\n    if (decoded) {\r\n      if (this.hasRemaining()) {\r\n        throw this.createNoExtraBytesError(this.totalPos);\r\n      }\r\n      return object;\r\n    }\r\n\r\n    const { headByte, pos, totalPos } = this;\r\n    throw new RangeError(\r\n      `Insufficient data in parcing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\r\n    );\r\n  }\r\n\r\n  async *decodeStream(stream: AsyncIterable<ArrayLike<number>>) {\r\n    for await (const buffer of stream) {\r\n      this.appendBuffer(buffer);\r\n\r\n      try {\r\n        while (true) {\r\n          const result = this.decodeSync();\r\n\r\n          yield result;\r\n        }\r\n      } catch (e) {\r\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\r\n          throw e; // rethrow\r\n        }\r\n        // fallthrough\r\n      }\r\n    }\r\n  }\r\n\r\n  async *decodeArrayStream(stream: AsyncIterable<ArrayLike<number>>) {\r\n    let headerParsed = false;\r\n    let decoded = false;\r\n    let itemsLeft = 0;\r\n\r\n    for await (const buffer of stream) {\r\n      if (decoded) {\r\n        throw this.createNoExtraBytesError(this.totalPos);\r\n      }\r\n\r\n      this.appendBuffer(buffer);\r\n\r\n      if (!headerParsed) {\r\n        itemsLeft = this.readArraySize();\r\n        headerParsed = true;\r\n        this.complete();\r\n      }\r\n\r\n      try {\r\n        while (true) {\r\n          const result = this.decodeSync();\r\n\r\n          yield result;\r\n\r\n          itemsLeft--;\r\n\r\n          if (itemsLeft === 0) {\r\n            decoded = true;\r\n            break;\r\n          }\r\n        }\r\n      } catch (e) {\r\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\r\n          throw e; // rethrow\r\n        }\r\n        // fallthrough\r\n      }\r\n      this.totalPos += this.pos;\r\n    }\r\n  }\r\n\r\n  decodeSync(): unknown {\r\n    DECODE: while (true) {\r\n      const headByte = this.readHeadByte();\r\n      let object: unknown;\r\n\r\n      if (headByte >= 0xe0) {\r\n        // negative fixint (111x xxxx) 0xe0 - 0xff\r\n        object = headByte - 0x100;\r\n      } else if (headByte < 0xc0) {\r\n        if (headByte < 0x80) {\r\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\r\n          object = headByte;\r\n        } else if (headByte < 0x90) {\r\n          // fixmap (1000 xxxx) 0x80 - 0x8f\r\n          const size = headByte - 0x80;\r\n          if (size !== 0) {\r\n            this.pushMapState(size);\r\n            this.complete();\r\n            continue DECODE;\r\n          } else {\r\n            object = {};\r\n          }\r\n        } else if (headByte < 0xa0) {\r\n          // fixarray (1001 xxxx) 0x90 - 0x9f\r\n          const size = headByte - 0x90;\r\n          if (size !== 0) {\r\n            this.pushArrayState(size);\r\n            this.complete();\r\n            continue DECODE;\r\n          } else {\r\n            object = [];\r\n          }\r\n        } else {\r\n          // fixstr (101x xxxx) 0xa0 - 0xbf\r\n          const byteLength = headByte - 0xa0;\r\n          object = this.decodeUtf8String(byteLength, 0);\r\n        }\r\n      } else if (headByte === 0xc0) {\r\n        // nil\r\n        object = null;\r\n      } else if (headByte === 0xc2) {\r\n        // false\r\n        object = false;\r\n      } else if (headByte === 0xc3) {\r\n        // true\r\n        object = true;\r\n      } else if (headByte === 0xca) {\r\n        // float 32\r\n        object = this.readF32();\r\n      } else if (headByte === 0xcb) {\r\n        // float 64\r\n        object = this.readF64();\r\n      } else if (headByte === 0xcc) {\r\n        // uint 8\r\n        object = this.readU8();\r\n      } else if (headByte === 0xcd) {\r\n        // uint 16\r\n        object = this.readU16();\r\n      } else if (headByte === 0xce) {\r\n        // uint 32\r\n        object = this.readU32();\r\n      } else if (headByte === 0xcf) {\r\n        // uint 64\r\n        object = this.readU64();\r\n      } else if (headByte === 0xd0) {\r\n        // int 8\r\n        object = this.readI8();\r\n      } else if (headByte === 0xd1) {\r\n        // int 16\r\n        object = this.readI16();\r\n      } else if (headByte === 0xd2) {\r\n        // int 32\r\n        object = this.readI32();\r\n      } else if (headByte === 0xd3) {\r\n        // int 64\r\n        object = this.readI64();\r\n      } else if (headByte === 0xd9) {\r\n        // str 8\r\n        const byteLength = this.lookU8();\r\n        object = this.decodeUtf8String(byteLength, 1);\r\n      } else if (headByte === 0xda) {\r\n        // str 16\r\n        const byteLength = this.lookU16();\r\n        object = this.decodeUtf8String(byteLength, 2);\r\n      } else if (headByte === 0xdb) {\r\n        // str 32\r\n        const byteLength = this.lookU32();\r\n        object = this.decodeUtf8String(byteLength, 4);\r\n      } else if (headByte === 0xdc) {\r\n        // array 16\r\n        const size = this.readU16();\r\n        if (size !== 0) {\r\n          this.pushArrayState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = [];\r\n        }\r\n      } else if (headByte === 0xdd) {\r\n        // array 32\r\n        const size = this.readU32();\r\n        if (size !== 0) {\r\n          this.pushArrayState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = [];\r\n        }\r\n      } else if (headByte === 0xde) {\r\n        // map 16\r\n        const size = this.readU16();\r\n        if (size !== 0) {\r\n          this.pushMapState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = {};\r\n        }\r\n      } else if (headByte === 0xdf) {\r\n        // map 32\r\n        const size = this.readU32();\r\n        if (size !== 0) {\r\n          this.pushMapState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = {};\r\n        }\r\n      } else if (headByte === 0xc4) {\r\n        // bin 8\r\n        const size = this.lookU8();\r\n        object = this.decodeBinary(size, 1);\r\n      } else if (headByte === 0xc5) {\r\n        // bin 16\r\n        const size = this.lookU16();\r\n        object = this.decodeBinary(size, 2);\r\n      } else if (headByte === 0xc6) {\r\n        // bin 32\r\n        const size = this.lookU32();\r\n        object = this.decodeBinary(size, 4);\r\n      } else if (headByte === 0xd4) {\r\n        // fixext 1\r\n        object = this.decodeExtension(1, 0);\r\n      } else if (headByte === 0xd5) {\r\n        // fixext 2\r\n        object = this.decodeExtension(2, 0);\r\n      } else if (headByte === 0xd6) {\r\n        // fixext 4\r\n        object = this.decodeExtension(4, 0);\r\n      } else if (headByte === 0xd7) {\r\n        // fixext 8\r\n        object = this.decodeExtension(8, 0);\r\n      } else if (headByte === 0xd8) {\r\n        // fixext 16\r\n        object = this.decodeExtension(16, 0);\r\n      } else if (headByte === 0xc7) {\r\n        // ext 8\r\n        const size = this.lookU8();\r\n        object = this.decodeExtension(size, 1);\r\n      } else if (headByte === 0xc8) {\r\n        // ext 16\r\n        const size = this.lookU16();\r\n        object = this.decodeExtension(size, 2);\r\n      } else if (headByte === 0xc9) {\r\n        // ext 32\r\n        const size = this.lookU32();\r\n        object = this.decodeExtension(size, 4);\r\n      } else {\r\n        throw new Error(`Unrecognized type byte: ${prettyByte(headByte)}`);\r\n      }\r\n\r\n      this.complete();\r\n\r\n      const stack = this.stack;\r\n      while (stack.length > 0) {\r\n        // arrays and maps\r\n        const state = stack[stack.length - 1];\r\n        if (state.type === State.ARRAY) {\r\n          state.array[state.position] = object;\r\n          state.position++;\r\n          if (state.position === state.size) {\r\n            stack.pop();\r\n            object = state.array;\r\n          } else {\r\n            continue DECODE;\r\n          }\r\n        } else if (state.type === State.MAP_KEY) {\r\n          if(typeof object === \"number\" && this.mapKeys) {\r\n            // convert object key index to key string\r\n            object = this.mapKeys[object];\r\n          }\r\n\r\n          if (typeof object !== \"string\") {\r\n            throw new Error(\"The type of key must be string but \" + typeof object);\r\n          }\r\n          state.key = object;\r\n          state.type = State.MAP_VALUE;\r\n          continue DECODE;\r\n        } else if (state.type === State.MAP_VALUE) {\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          state.map[state.key!] = object;\r\n          state.readCount++;\r\n\r\n          if (state.readCount === state.size) {\r\n            stack.pop();\r\n            object = state.map;\r\n          } else {\r\n            state.key = null;\r\n            state.type = State.MAP_KEY;\r\n            continue DECODE;\r\n          }\r\n        }\r\n      }\r\n\r\n      return object;\r\n    }\r\n  }\r\n\r\n  readHeadByte(): number {\r\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\r\n      this.headByte = this.readU8();\r\n      // console.log(\"headByte\", prettyByte(this.headByte));\r\n    }\r\n\r\n    return this.headByte;\r\n  }\r\n\r\n  complete(): void {\r\n    this.headByte = HEAD_BYTE_REQUIRED;\r\n  }\r\n\r\n  readArraySize(): number {\r\n    const headByte = this.readHeadByte();\r\n\r\n    switch (headByte) {\r\n      case 0xdc:\r\n        return this.readU16();\r\n      case 0xdd:\r\n        return this.readU32();\r\n      default: {\r\n        if (headByte < 0xa0) {\r\n          return headByte - 0x90;\r\n        } else {\r\n          throw new Error(`Unrecognized array type byte: ${prettyByte(headByte)}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  pushMapState(size: number) {\r\n    if (size > this.maxMapLength) {\r\n      throw new Error(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\r\n    }\r\n\r\n    this.stack.push({\r\n      type: State.MAP_KEY,\r\n      size,\r\n      key: null,\r\n      readCount: 0,\r\n      map: {},\r\n    });\r\n  }\r\n\r\n  pushArrayState(size: number) {\r\n    if (size > this.maxArrayLength) {\r\n      throw new Error(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\r\n    }\r\n\r\n    this.stack.push({\r\n      type: State.ARRAY,\r\n      size,\r\n      array: new Array<unknown>(size),\r\n      position: 0,\r\n    });\r\n  }\r\n\r\n  decodeUtf8String(byteLength: number, headerOffset: number): string {\r\n    if (byteLength > this.maxStrLength) {\r\n      throw new Error(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);\r\n    }\r\n\r\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\r\n      throw MORE_DATA;\r\n    }\r\n\r\n    const offset = this.pos + headerOffset;\r\n    let object: string;\r\n    object = utf8DecodeJs(this.bytes, offset, byteLength);\r\n    this.pos += headerOffset + byteLength;\r\n    return object;\r\n  }\r\n\r\n  decodeBinary(byteLength: number, headOffset: number): Uint8Array {\r\n    if (byteLength > this.maxBinLength) {\r\n      throw new Error(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\r\n    }\r\n\r\n    if (!this.hasRemaining(byteLength + headOffset)) {\r\n      throw MORE_DATA;\r\n    }\r\n\r\n    const offset = this.pos + headOffset;\r\n    const object = this.bytes.subarray(offset, offset + byteLength);\r\n    this.pos += headOffset + byteLength;\r\n    return object;\r\n  }\r\n\r\n  decodeExtension(size: number, headOffset: number): unknown {\r\n    if (size > this.maxExtLength) {\r\n      throw new Error(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\r\n    }\r\n\r\n    const extType = this.view.getInt8(this.pos + headOffset);\r\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\r\n    return this.extensionCodec.decode(data, extType);\r\n  }\r\n\r\n  lookU8() {\r\n    return this.view.getUint8(this.pos);\r\n  }\r\n\r\n  lookU16() {\r\n    return this.view.getUint16(this.pos);\r\n  }\r\n\r\n  lookU32() {\r\n    return this.view.getUint32(this.pos);\r\n  }\r\n\r\n  readU8(): number {\r\n    const value = this.view.getUint8(this.pos);\r\n    this.pos++;\r\n    return value;\r\n  }\r\n\r\n  readI8(): number {\r\n    const value = this.view.getInt8(this.pos);\r\n    this.pos++;\r\n    return value;\r\n  }\r\n\r\n  readU16(): number {\r\n    const value = this.view.getUint16(this.pos);\r\n    this.pos += 2;\r\n    return value;\r\n  }\r\n\r\n  readI16(): number {\r\n    const value = this.view.getInt16(this.pos);\r\n    this.pos += 2;\r\n    return value;\r\n  }\r\n\r\n  readU32(): number {\r\n    const value = this.view.getUint32(this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n  }\r\n\r\n  readI32(): number {\r\n    const value = this.view.getInt32(this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n  }\r\n\r\n  readU64(): number {\r\n    const value = getUint64(this.view, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n\r\n  readI64(): number {\r\n    const value = getInt64(this.view, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n\r\n  readF32() {\r\n    const value = this.view.getFloat32(this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n  }\r\n\r\n  readF64() {\r\n    const value = this.view.getFloat64(this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n}\r\n","import { utf8EncodeJs, utf8Count } from \"./utils/utf8\";\r\nimport { ExtensionCodec } from \"./ExtensionCodec\";\r\nimport { setInt64, setUint64 } from \"./utils/int\";\r\nimport { ensureUint8Array } from \"./utils/typedArrays\";\r\nimport { ExtData } from \"./ExtData\";\r\n\r\nexport const DEFAULT_MAX_DEPTH = 100;\r\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\r\n\r\nexport class Encoder {\r\n  private pos = 0;\r\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\r\n  private bytes = new Uint8Array(this.view.buffer);\r\n  private mapKeys: { [key: string]: number } = null as any;\r\n\r\n  constructor(\r\n    readonly extensionCodec = ExtensionCodec.defaultCodec,\r\n    readonly maxDepth = DEFAULT_MAX_DEPTH,\r\n    readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\r\n    readonly sortKeys = false,\r\n    mapKeys = Array<string>(),\r\n  ) {\r\n    if (mapKeys.length > 0) {\r\n      this.mapKeys = {};\r\n      for (let i = 0; i < mapKeys.length; i++) {\r\n        this.mapKeys[mapKeys[i]] = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  encode(object: unknown, depth: number): void {\r\n    if (depth > this.maxDepth) {\r\n      throw new Error(`Too deep objects in depth ${depth}`);\r\n    }\r\n    if (this.mapKeys && Object.keys(this.mapKeys).length > 255) {\r\n      throw new Error(`Only support mapkey lenght <= 255`);\r\n    }\r\n\r\n    if (object == null) {\r\n      this.encodeNil();\r\n    } else if (typeof object === \"boolean\") {\r\n      this.encodeBoolean(object);\r\n    } else if (typeof object === \"number\") {\r\n      this.encodeNumber(object);\r\n    } else if (typeof object === \"string\") {\r\n      this.encodeString(object);\r\n    } else {\r\n      this.encodeObject(object, depth);\r\n    }\r\n  }\r\n\r\n  getUint8Array(): Uint8Array {\r\n    return this.bytes.subarray(0, this.pos);\r\n  }\r\n\r\n  ensureBufferSizeToWrite(sizeToWrite: number) {\r\n    const requiredSize = this.pos + sizeToWrite;\r\n\r\n    if (this.view.byteLength < requiredSize) {\r\n      this.resizeBuffer(requiredSize * 2);\r\n    }\r\n  }\r\n\r\n  resizeBuffer(newSize: number) {\r\n    const newBuffer = new ArrayBuffer(newSize);\r\n    const newBytes = new Uint8Array(newBuffer);\r\n    const newView = new DataView(newBuffer);\r\n\r\n    newBytes.set(this.bytes);\r\n\r\n    this.view = newView;\r\n    this.bytes = newBytes;\r\n  }\r\n\r\n  encodeNil() {\r\n    this.writeU8(0xc0);\r\n  }\r\n\r\n  encodeBoolean(object: boolean) {\r\n    if (object === false) {\r\n      this.writeU8(0xc2);\r\n    } else {\r\n      this.writeU8(0xc3);\r\n    }\r\n  }\r\n  encodeNumber(object: number) {\r\n    if (Number.isSafeInteger(object)) {\r\n      if (object >= 0) {\r\n        if (object < 0x80) {\r\n          // positive fixint\r\n          this.writeU8(object);\r\n        } else if (object < 0x100) {\r\n          // uint 8\r\n          this.writeU8(0xcc);\r\n          this.writeU8(object);\r\n        } else if (object < 0x10000) {\r\n          // uint 16\r\n          this.writeU8(0xcd);\r\n          this.writeU16(object);\r\n        } else if (object < 0x100000000) {\r\n          // uint 32\r\n          this.writeU8(0xce);\r\n          this.writeU32(object);\r\n        } else {\r\n          // uint 64\r\n          this.writeU8(0xcf);\r\n          this.writeU64(object);\r\n        }\r\n      } else {\r\n        if (object >= -0x20) {\r\n          // nagative fixint\r\n          this.writeU8(0xe0 | (object + 0x20));\r\n        } else if (object >= -0x80) {\r\n          // int 8\r\n          this.writeU8(0xd0);\r\n          this.writeI8(object);\r\n        } else if (object >= -0x8000) {\r\n          // int 16\r\n          this.writeU8(0xd1);\r\n          this.writeI16(object);\r\n        } else if (object >= -0x80000000) {\r\n          // int 32\r\n          this.writeU8(0xd2);\r\n          this.writeI32(object);\r\n        } else {\r\n          // int 64\r\n          this.writeU8(0xd3);\r\n          this.writeI64(object);\r\n        }\r\n      }\r\n    } else {\r\n      this.writeU8(0xcb);\r\n      this.writeF64(object);\r\n    }\r\n  }\r\n\r\n  writeStringHeader(byteLength: number) {\r\n    if (byteLength < 32) {\r\n      // fixstr\r\n      this.writeU8(0xa0 + byteLength);\r\n    } else if (byteLength < 0x100) {\r\n      // str 8\r\n      this.writeU8(0xd9);\r\n      this.writeU8(byteLength);\r\n    } else if (byteLength < 0x10000) {\r\n      // str 16\r\n      this.writeU8(0xda);\r\n      this.writeU16(byteLength);\r\n    } else if (byteLength < 0x100000000) {\r\n      // str 32\r\n      this.writeU8(0xdb);\r\n      this.writeU32(byteLength);\r\n    } else {\r\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\r\n    }\r\n  }\r\n\r\n  encodeString(object: string) {\r\n    const maxHeaderSize = 1 + 4;\r\n    const strLength = object.length;\r\n\r\n    const byteLength = utf8Count(object);\r\n    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\r\n    this.writeStringHeader(byteLength);\r\n    utf8EncodeJs(object, this.bytes, this.pos);\r\n    this.pos += byteLength;\r\n  }\r\n\r\n  encodeObject(object: unknown, depth: number) {\r\n    // try to encode objects with custom codec first of non-primitives\r\n    const ext = this.extensionCodec.tryToEncode(object);\r\n    if (ext != null) {\r\n      this.encodeExtension(ext);\r\n    } else if (Array.isArray(object)) {\r\n      this.encodeArray(object, depth);\r\n    } else if (ArrayBuffer.isView(object)) {\r\n      this.encodeBinary(object);\r\n    } else if (typeof object === \"object\") {\r\n      this.encodeMap(object as Record<string, unknown>, depth);\r\n    } else {\r\n      // symbol, function and other special object come here unless extensionCodec handles them.\r\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\r\n    }\r\n  }\r\n\r\n  encodeBinary(object: ArrayBufferView) {\r\n    const size = object.byteLength;\r\n    if (size < 0x100) {\r\n      // bin 8\r\n      this.writeU8(0xc4);\r\n      this.writeU8(size);\r\n    } else if (size < 0x10000) {\r\n      // bin 16\r\n      this.writeU8(0xc5);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // bin 32\r\n      this.writeU8(0xc6);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large binary: ${size}`);\r\n    }\r\n    const bytes = ensureUint8Array(object);\r\n    this.writeU8a(bytes);\r\n  }\r\n\r\n  encodeArray(object: Array<unknown>, depth: number) {\r\n    const size = object.length;\r\n    if (size < 16) {\r\n      // fixarray\r\n      this.writeU8(0x90 + size);\r\n    } else if (size < 0x10000) {\r\n      // array 16\r\n      this.writeU8(0xdc);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // array 32\r\n      this.writeU8(0xdd);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large array: ${size}`);\r\n    }\r\n    for (const item of object) {\r\n      this.encode(item, depth + 1);\r\n    }\r\n  }\r\n\r\n  encodeMap(object: Record<string, unknown>, depth: number) {\r\n    const keys = Object.keys(object);\r\n    if (this.sortKeys) {\r\n      keys.sort();\r\n    }\r\n    const size = keys.length;\r\n    if (size < 16) {\r\n      // fixmap\r\n      this.writeU8(0x80 + size);\r\n    } else if (size < 0x10000) {\r\n      // map 16\r\n      this.writeU8(0xde);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // map 32\r\n      this.writeU8(0xdf);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large map object: ${size}`);\r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      const key = keys[i];\r\n      if (this.mapKeys) {\r\n        let keyIdx = this.mapKeys[key];\r\n        if (keyIdx != null) {\r\n          this.writeU8(this.mapKeys[key]);\r\n        } else {\r\n          // throw new Error(`Object key '${key}' not found in mapKeys`);\r\n          console.warn(`Object key '${key}' not found in mapKeys! You might need to add this`);\r\n          this.encodeString(key);\r\n        }\r\n      } else {\r\n        this.encodeString(key);\r\n      }\r\n      this.encode(object[key], depth + 1);\r\n    }\r\n  }\r\n\r\n  encodeExtension(ext: ExtData) {\r\n    const size = ext.data.length;\r\n    if (size === 1) {\r\n      // fixext 1\r\n      this.writeU8(0xd4);\r\n    } else if (size === 2) {\r\n      // fixext 2\r\n      this.writeU8(0xd5);\r\n    } else if (size === 4) {\r\n      // fixext 4\r\n      this.writeU8(0xd6);\r\n    } else if (size === 8) {\r\n      // fixext 8\r\n      this.writeU8(0xd7);\r\n    } else if (size === 16) {\r\n      // fixext 16\r\n      this.writeU8(0xd8);\r\n    } else if (size < 0x100) {\r\n      // ext 8\r\n      this.writeU8(0xc7);\r\n      this.writeU8(size);\r\n    } else if (size < 0x10000) {\r\n      // ext 16\r\n      this.writeU8(0xc8);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // ext 32\r\n      this.writeU8(0xc9);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large extension object: ${size}`);\r\n    }\r\n    this.writeI8(ext.type);\r\n    this.writeU8a(ext.data);\r\n  }\r\n\r\n  writeU8(value: number) {\r\n    this.ensureBufferSizeToWrite(1);\r\n\r\n    this.view.setUint8(this.pos, value);\r\n    this.pos++;\r\n  }\r\n\r\n  writeU8a(values: ArrayLike<number>) {\r\n    const size = values.length;\r\n    this.ensureBufferSizeToWrite(size);\r\n\r\n    this.bytes.set(values, this.pos);\r\n    this.pos += size;\r\n  }\r\n\r\n  writeI8(value: number) {\r\n    this.ensureBufferSizeToWrite(1);\r\n\r\n    this.view.setInt8(this.pos, value);\r\n    this.pos++;\r\n  }\r\n\r\n  writeU16(value: number) {\r\n    this.ensureBufferSizeToWrite(2);\r\n\r\n    this.view.setUint16(this.pos, value);\r\n    this.pos += 2;\r\n  }\r\n\r\n  writeI16(value: number) {\r\n    this.ensureBufferSizeToWrite(2);\r\n\r\n    this.view.setInt16(this.pos, value);\r\n    this.pos += 2;\r\n  }\r\n\r\n  writeU32(value: number) {\r\n    this.ensureBufferSizeToWrite(4);\r\n\r\n    this.view.setUint32(this.pos, value);\r\n    this.pos += 4;\r\n  }\r\n\r\n  writeI32(value: number) {\r\n    this.ensureBufferSizeToWrite(4);\r\n\r\n    this.view.setInt32(this.pos, value);\r\n    this.pos += 4;\r\n  }\r\n\r\n  writeF64(value: number) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    this.view.setFloat64(this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n\r\n  writeU64(value: number) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    setUint64(this.view, this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n\r\n  writeI64(value: number) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    setInt64(this.view, this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n}\r\n","export class MpCode {\r\n    static CONNECT_ERROR = 1000;\r\n    static MAKER_NOT_INIT = 1001;\r\n    static INVALID_ROOM = 1002;\r\n    static ROOM_NOT_EXIST = 1003;\r\n    static ROOM_FULL = 1004;\r\n    static SOCKET_JOIN_FAILED = 1005;\r\n    static QUICK_JOIN_FAILED = 1006;\r\n    static KICK_PLAYER_FALIED = 1007;\r\n    static INVALID_PARAMS = 1008;\r\n    static HAS_NOT_PERMIT = 1009;\r\n    static START_GAME_FAILED = 1010;\r\n    static JOIN_ROOM_FAILED = 1011;\r\n}\r\n\r\nexport class MpEvent {\r\n    static S_ERROR = 'serror';\r\n    static S_CONNECTED = 'connected';\r\n    static S_ROOM_CREATED = 'roomCreated';\r\n    static S_ROOM_JOINED = 'roomJoined';\r\n    static S_QUICK_ROOM_JOINED = 'qroomJoined';\r\n    static S_QUICK_ROOM_LEFT = 'qroomLeft';\r\n    static S_ROOM_PLAYER_JOINED = 'playerJoined';\r\n    static S_ROOM_PLAYER_LEFT = 'playerLeft';\r\n    static S_ROOM_MASTER_CHANGE = 'masterChange';\r\n    static S_PLAYER_STATUS_CHANGE = 'status';\r\n    static S_IDLE_PLAYER_CHANGE = 'playerChange';\r\n    static S_QROOM_RESULT = 'roomResult';\r\n    static S_QPLAYER_RESULT = 'playerResult';\r\n    static S_GAME_STARTED = 'startGame';\r\n    static S_GAME_CANCEL = 'gameCancel';\r\n    static S_GAME_STARTING = 'gameStarting';\r\n    static S_ROOM_INFO_RESULT = 'rInfoResult';\r\n    static S_PLAYER_KICKED = 'kickedOut';\r\n    static S_PLAYER_INVITED = 'invited';\r\n    static S_ROOM_MESSAGE = 'sroomMsg';\r\n    static S_DEBUG_RESULT = 'debugResult';\r\n\r\n    static C_QUERY_ROOM = 'queryRoom';\r\n    static C_QUERY_PLAYER = 'queryPlayer';\r\n    static C_ROOM_INFO = 'roomInfo';\r\n    static C_CREATE_ROOM = 'create';\r\n    static C_JOIN_ROOM = 'join';\r\n    static C_LEAVE_ROOM = 'leave';\r\n    static C_PLAYER_READY = 'ready';\r\n    static C_KICK_PLAYER = 'kick';\r\n    static C_QUICK_PLAY = 'quickPlay';\r\n    static C_QUICK_JOIN = 'quickJoin';\r\n    static C_CANCEL_PLAY = 'cancelPlay';\r\n    static C_INVITE = 'invite';\r\n    static C_START_GAME = 'playgame';\r\n    static C_ROOM_MESSAGE = 'roomMsg';\r\n    static C_DEBUG = 'debugInfo';\r\n}","/**\r\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\r\n */\r\nexport class ExtData {\r\n  constructor(readonly type: number, readonly data: Uint8Array) {}\r\n}\r\n","// ExtensionCodec to handle MessagePack extensions\r\n\r\nimport { ExtData } from \"./ExtData\";\r\nimport { timestampExtension } from \"./timestamp\";\r\n\r\nexport type ExtensionDecoderType = (data: Uint8Array, extensionType: number) => unknown;\r\n\r\nexport type ExtensionEncoderType = (input: unknown) => Uint8Array | null;\r\n\r\n// immutable interfce to ExtensionCodec\r\nexport type ExtensionCodecType = {\r\n  tryToEncode(object: unknown): ExtData | null;\r\n  decode(data: Uint8Array, extType: number): unknown;\r\n};\r\n\r\nexport class ExtensionCodec implements ExtensionCodecType {\r\n  public static readonly defaultCodec: ExtensionCodecType = new ExtensionCodec();\r\n\r\n  // built-in extensions\r\n  private readonly builtInEncoders: Array<ExtensionEncoderType> = [];\r\n  private readonly builtInDecoders: Array<ExtensionDecoderType> = [];\r\n\r\n  // custom extensions\r\n  private readonly encoders: Array<ExtensionEncoderType> = [];\r\n  private readonly decoders: Array<ExtensionDecoderType> = [];\r\n\r\n  public constructor() {\r\n    this.register(timestampExtension);\r\n  }\r\n\r\n  public register({\r\n    type,\r\n    encode,\r\n    decode,\r\n  }: {\r\n    type: number;\r\n    encode: ExtensionEncoderType;\r\n    decode: ExtensionDecoderType;\r\n  }): void {\r\n    if (type >= 0) {\r\n      // custom extensions\r\n      this.encoders[type] = encode;\r\n      this.decoders[type] = decode;\r\n    } else {\r\n      // built-in extensions\r\n      const index = 1 + type;\r\n      this.builtInEncoders[index] = encode;\r\n      this.builtInDecoders[index] = decode;\r\n    }\r\n  }\r\n\r\n  public tryToEncode(object: unknown): ExtData | null {\r\n    // built-in extensions\r\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\r\n      const encoder = this.builtInEncoders[i];\r\n      if (encoder != null) {\r\n        const data = encoder(object);\r\n        if (data != null) {\r\n          const type = -1 - i;\r\n          return new ExtData(type, data);\r\n        }\r\n      }\r\n    }\r\n\r\n    // custom extensions\r\n    for (let i = 0; i < this.encoders.length; i++) {\r\n      const encoder = this.encoders[i];\r\n      if (encoder != null) {\r\n        const data = encoder(object);\r\n        if (data != null) {\r\n          const type = i;\r\n          return new ExtData(type, data);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (object instanceof ExtData) {\r\n      // to keep ExtData as is\r\n      return object;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public decode(data: Uint8Array, type: number): unknown {\r\n    const decoder = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\r\n    if (decoder) {\r\n      return decoder(data, type);\r\n    } else {\r\n      // decode() does not fail, returns ExtData instead.\r\n      return new ExtData(type, data);\r\n    }\r\n  }\r\n}\r\n","const {ccclass, property, requireComponent, executeInEditMode, menu} = cc._decorator;\r\n\r\nconst i18n = require('i18n');\r\n\r\n@ccclass\r\n@requireComponent(cc.Label)\r\n@executeInEditMode\r\n@menu('i18n:MAIN_MENU.component.renderers/LabelLocalized')\r\nexport default class LabelLocalized extends cc.Component {\r\n\r\n    @property()\r\n    _textKey: string = \"TEXT_KEY\";\r\n\r\n    @property({\r\n        multiline: true,\r\n        tooltip: \"Enter i18n text key\"\r\n    })\r\n    set textKey (value) {\r\n        this._textKey = value;\r\n        this.updateLabel();\r\n    }\r\n    get textKey() { return this._textKey; }\r\n\r\n    protected label: cc.Component = null;\r\n    protected textProp = null;\r\n\r\n    onLoad() {\r\n        this.label = this.getComponent(cc.Label);\r\n        this.updateLabel();\r\n    }\r\n\r\n    updateLabel () {\r\n        if(this.label == null)\r\n            this.label = this.getComponent(cc.Label);\r\n        if(this.label)\r\n        {\r\n            let keys = this.textKey.trim().split(\"+\");\r\n            let text = '';\r\n            for(let i = 0; i < keys.length; ++i)\r\n            {\r\n                text += i18n.t(keys[i], this.textProp);\r\n            }\r\n            (this.label as any).string = text;\r\n        }\r\n    }\r\n\r\n    updateTextProp(props: {}) {\r\n        this.textProp = props;\r\n        this.updateLabel();\r\n    }\r\n}\r\n\r\n","import { Room, Player } from \"./MpMacher\";\r\n\r\n// import { Socket } from \"socket.io\";\r\n\r\nclass Connection {\r\n    peer: RTCPeerConnection;\r\n    channel: RTCDataChannel;\r\n    ready: boolean = false;\r\n    player: Player;\r\n}\r\n\r\nexport class MpController {\r\n    // api\r\n\r\n    /**\r\n     * set data receiver\r\n     * @param receiver \r\n     */\r\n    setDataReceiver(receiver: (data: any, from?: string) => void) {\r\n        this.onData = receiver;\r\n        // flush cache message data\r\n        this.dataCache.forEach(data => {\r\n            this.onData(data.data, data.from);\r\n        })\r\n        this.dataCache = [];    // clear\r\n    }\r\n\r\n    /**\r\n     * connection disconnect\r\n     */\r\n    onDisconnect: (id: string) => void = () => { };\r\n\r\n    /**\r\n     * send data to player with @id\r\n     * @param id player id\r\n     * @param data data to send\r\n     */\r\n    send(id: string, data: any) {\r\n        try {\r\n            if (this.connections[id]) {\r\n                this.connections[id].channel.send(data);\r\n            }\r\n        } catch (e) {\r\n            // console.error(e);\r\n            this.disconnect(id);\r\n            this.onDisconnect(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send to player that has server sync\r\n     * @param data \r\n     */\r\n    sendServer(data: any) {\r\n        if (this.connections[this.serverPlayer]) {\r\n            this.send(this.serverPlayer, data);\r\n        }\r\n        else {\r\n            cc.warn('Send to server player failed');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * broadcast data to all player connected\r\n     * @param data datat send\r\n     */\r\n    broadcast(data: any) {\r\n        for (let id in this.connections) {\r\n            this.send(id, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * disconnect to spec connnection id\r\n     * @param id \r\n     */\r\n    disconnect(id: string) {\r\n        if (this.connections[id]) {\r\n            this.connections[id].channel.close();\r\n            delete this.connections[id];\r\n        } else {\r\n            cc.warn('Disconnect to invalid id: ' + id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * cache data for network in case it not init yet\r\n     */\r\n    private dataCache: { data: any, from: any }[] = [];\r\n    /**\r\n     * default data receiver\r\n     */\r\n    private onData: (data: any, from?: string) => void = (data, from) => {\r\n        this.dataCache.push({ data: data, from: from });\r\n    };\r\n\r\n    /** server role player id */\r\n    serverPlayer = \"\";\r\n    /** my local player id */\r\n    localPlayer = \"\";\r\n    /** game room */\r\n    room: Room;\r\n\r\n    // implement\r\n    private connections: { [key: string]: Connection } = {};\r\n\r\n    private signal: SocketIO.Socket;\r\n\r\n    private rtcConfig = {\r\n        iceServers: [\r\n            { urls: 'stun:stun.l.google.com:19302' },\r\n            { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },\r\n            { urls: 'turn:13.250.13.83:3478?transport=udp', username: 'YzYNCouZM1mhqhmseWk6', credential: 'YzYNCouZM1mhqhmseWk6' },\r\n            { urls: 'turn:turn.anyfirewall.com:443?transport=tcp', username: 'webrtc', credential: 'webrtc' },\r\n            { urls: 'turn:numb.viagenie.ca', username: 'nqtham68@hotmail.com', credential: '123456?a' }\r\n        ]\r\n    };\r\n\r\n    private sdpConstraints = {\r\n        offerToReceiveAudio: false,\r\n        offerToReceiveVideo: false,\r\n    };\r\n\r\n    private dataChannelConfig = { ordered: false, maxRetransmits: 0 };\r\n    private connectionCount = 0;\r\n\r\n    startGame() {\r\n        // we map socket id -> player index id for player id to reduce id size\r\n        this.room.players.forEach((player, idx) => {\r\n            if (this.serverPlayer === player.id) this.serverPlayer = idx.toString();\r\n            if (this.localPlayer === player.id) this.localPlayer = idx.toString();\r\n            if (this.connections[player.id]) {\r\n                this.connections[idx] = this.connections[player.id];\r\n                this.connections[idx].player = player;\r\n            }\r\n            delete this.connections[player.id];\r\n            player.id = idx.toString();\r\n        })\r\n    }\r\n\r\n    init(signalChannel: SocketIO.Socket) {\r\n        this.signal = signalChannel;\r\n        this.signal.on('rtc-roomInfo', (data: { room: Room, server: string }) => {\r\n            this.connections = {};      // reset\r\n            this.room = new Room(data.room);\r\n            this.serverPlayer = data.server;\r\n            // set global var to use\r\n            if (this.localPlayer === this.serverPlayer) {\r\n                this.connectionCount = this.room.players.length - 1;\r\n                window.GAME_SERVER = true;\r\n            }\r\n            else {\r\n                this.connectionCount = 1;\r\n                window.GAME_SERVER = false;\r\n            }\r\n        })\r\n\r\n        this.signal.on('rtc-reqOffer', (data) => {\r\n            if (!this.connections[data.player]) {\r\n                let connection: Connection = new Connection();\r\n                connection.peer = new RTCPeerConnection(this.rtcConfig);\r\n                connection.channel = connection.peer.createDataChannel('mp', this.dataChannelConfig);\r\n                connection.channel.onclose = () => {\r\n                    let playerId = (connection.player && connection.player.id) || data.player;\r\n                    console.log('connection ' + playerId + ' closed');\r\n                    this.onDisconnect(playerId);\r\n                };\r\n                connection.channel.onopen = () => {\r\n                    console.log('connection ' + data.player + ' openned');\r\n                    connection.ready = true;\r\n                    this.checkReady();\r\n                };\r\n                connection.channel.onerror = (e) => {\r\n                    let playerId = (connection.player && connection.player.id) || data.player;\r\n                    console.log('connection ' + playerId + ' error: ' + e)\r\n                };\r\n                connection.channel.onmessage = (e) => {\r\n                    let playerId = (connection.player && connection.player.id) || data.player;\r\n                    this.onData(e.data, playerId);\r\n                }\r\n                connection.peer.onicecandidate = (event) => {\r\n                    if (event && event.candidate) {\r\n                        this.signal.emit('rtc-data', { type: 'ice', to: data.player, data: event.candidate })\r\n                    }\r\n                }\r\n                connection.peer.createOffer(this.sdpConstraints).then(sdp => {\r\n                    connection.peer.setLocalDescription(sdp);\r\n                    this.signal.emit('rtc-data', { type: 'offer', to: data.player, data: sdp })\r\n                })\r\n                this.connections[data.player] = connection;\r\n            } else {\r\n                console.warn('request duplicate for: ' + data.player);\r\n            }\r\n\r\n        })\r\n\r\n        this.signal.on('rtc-rtcData', (data) => {\r\n            if (data.type == 'offer') {\r\n                // create connection to offerer\r\n                let connection: Connection = new Connection();\r\n                connection.peer = new RTCPeerConnection(this.rtcConfig);\r\n                connection.peer.onicecandidate = (event) => {\r\n                    if (event && event.candidate) {\r\n                        this.signal.emit('rtc-data', { type: 'ice', to: data.player, data: event.candidate });\r\n                    }\r\n                }\r\n                connection.peer.ondatachannel = (event) => {\r\n                    connection.channel = event.channel;\r\n                    connection.channel.onclose = () => {\r\n                        let playerId = (connection.player && connection.player.id) || data.player;\r\n                        console.log('connection ' + playerId + ' closed');\r\n                        this.onDisconnect(playerId);\r\n                    };\r\n                    connection.channel.onopen = () => {\r\n                        console.log('connection ' + data.player + ' openned');\r\n                        connection.ready = true;\r\n                        this.checkReady();\r\n                    };\r\n                    connection.channel.onerror = (e) => {\r\n                        let playerId = (connection.player && connection.player.id) || data.player;\r\n                        console.log('connection ' + playerId + ' error: ' + e)\r\n                    };\r\n                    connection.channel.onmessage = (e) => {\r\n                        let playerId = (connection.player && connection.player.id) || data.player;\r\n                        this.onData(e.data, playerId);\r\n                    }\r\n                }\r\n                this.connections[data.player] = connection;\r\n\r\n                //\r\n                this.connections[data.player].peer.setRemoteDescription(data.data);\r\n                this.connections[data.player].peer.createAnswer(this.sdpConstraints).then(sdp => {\r\n                    this.connections[data.player].peer.setLocalDescription(sdp);\r\n                    this.signal.emit('rtc-data', { type: 'answer', to: data.player, data: sdp });\r\n                })\r\n            } else if (data.type == 'answer') {\r\n                this.connections[data.player].peer.setRemoteDescription(data.data);\r\n            } else if (data.type == 'ice') {\r\n                this.connections[data.player].peer.addIceCandidate(data.data);\r\n            }\r\n        })\r\n\r\n        return this;\r\n    }\r\n\r\n    private checkReady() {\r\n        let readyCount = 0;\r\n        for (let id in this.connections) {\r\n            if (this.connections[id].ready) {\r\n                readyCount++;\r\n            }\r\n        }\r\n        if (readyCount == this.connectionCount) {\r\n            this.signal.emit('rtc-ready');\r\n        }\r\n    }\r\n}","// import { Socket } from \"socket.io\";\r\nimport { MpEvent, MpCode } from \"./ErrorCode\";\r\nimport { MpController } from \"./MpController\";\r\n\r\nexport class Player {\r\n    id: string;\r\n    name: string;\r\n    master: boolean = false;\r\n    team: number;\r\n    data: any;\r\n    slot: number;\r\n    ready: boolean = false;\r\n    lastRep: number;        // last response time, use to check disconnect event\r\n}\r\n\r\nexport class Room {\r\n    id: string;\r\n    max: number;\r\n    data: any;\r\n    players: Player[] = [];\r\n\r\n    constructor(data: Room) {\r\n        this.id = data.id;\r\n        this.max = data.max;\r\n        this.data = data.data;\r\n        this.players = data.players;            // NOTICE: if player has it owner func we need to create this obj\r\n    }\r\n    \r\n    getPlayer(id: string): Player {\r\n        for(let i = 0; i < this.players.length; i++) {\r\n            if(this.players[i].id == id) {\r\n                return this.players[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removePlayer(id: string): Player {\r\n        for(let i = 0; i < this.players.length; i++) {\r\n            if(this.players[i].id == id) {\r\n                return this.players.splice(i, 1)[0];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface RoomInfo {\r\n    id: string;\r\n    current: number;\r\n    max: number;\r\n}\r\n\r\nexport interface PlayerInfo {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface InviteInfo {\r\n    player: string;\r\n    room: string;\r\n    data: any;\r\n}\r\n\r\nexport interface IdlePlayerInfo {\r\n    id: string;\r\n    idle: boolean;\r\n    name?: string;\r\n}\r\n\r\nexport interface PlayerStatusInfo {\r\n    id: string;\r\n    ready: boolean;\r\n}\r\n\r\nexport enum PlayType {\r\n    NORMAL,\r\n    PAIR\r\n}\r\n\r\nexport interface RoomData {\r\n    max?: number,\r\n    play?: PlayType,\r\n    comper?: any,\r\n    data?: any,\r\n}\r\n\r\nexport interface MMListener {\r\n    onError(errorCode: number);\r\n    onConnected(id: string, name: string);\r\n    onRoomCreated(room: Room);\r\n    onRoomJoined(room: Room);\r\n    onRoomPlayerJoined(player: Player);\r\n    onRoomPlayerLeft(player: Player);\r\n    onPlayerKicked();\r\n    onPlayerInvite(info: InviteInfo);\r\n    onRoomMessage(message: any);\r\n    onPlayerStatusChange(status: PlayerStatusInfo);\r\n    onRoomMasterChange(newMasterId: string);\r\n    onRoomsResult(rooms: RoomInfo[]);\r\n    onPlayersResult(players: PlayerInfo[]);\r\n    onQuickRoomJoined();\r\n    onGameStarting();\r\n    onGameStarted(controller: MpController);\r\n    onGameCancel();\r\n    onIdlePlayersChange(info: IdlePlayerInfo[]);\r\n}\r\n\r\n/**\r\n * class to use for lobby game function\r\n */\r\nexport class MatchMaker {\r\n    private socket: SocketIO.Socket;\r\n\r\n    localPlayer: Player;\r\n    listener: MMListener;\r\n    controller: MpController;\r\n\r\n    connect(server: string, gameId: string, playerName: string, playerData: any) {\r\n        let cdata = {\r\n            gameId: gameId,\r\n            name: playerName,\r\n            data: JSON.stringify(playerData)\r\n        }\r\n        this.socket = (window as any).io.connect(server, { \r\n            query: cdata,\r\n            reconnection: false\r\n         });\r\n        this.setServerListener();\r\n        this.controller = new MpController().init(this.socket);\r\n    }\r\n\r\n    disconnect() {\r\n        this.socket.disconnect(true);\r\n    }\r\n\r\n    createRoom(data: RoomData) {\r\n        this.socket.emit(MpEvent.C_CREATE_ROOM, data);\r\n    }\r\n\r\n    joinRoom(roomId: string) {\r\n        this.socket.emit(MpEvent.C_JOIN_ROOM, roomId);\r\n    }\r\n\r\n    leaveRoom() {\r\n        this.socket.emit(MpEvent.C_LEAVE_ROOM);\r\n    }\r\n\r\n    sendRoomMessage(message: any) {\r\n        this.socket.emit(MpEvent.C_ROOM_MESSAGE, message);\r\n    }\r\n\r\n    setReady(ready: boolean) {\r\n        this.socket.emit(MpEvent.C_PLAYER_READY, ready);\r\n    }\r\n\r\n    kickPlayer(playerId: string) {\r\n        this.socket.emit(MpEvent.C_KICK_PLAYER, playerId);\r\n    }\r\n\r\n    invitePlayer(playerId: string, data: any) {\r\n        this.socket.emit(MpEvent.C_INVITE, { player: playerId, data: data });\r\n    }\r\n\r\n    getRooms() {\r\n        this.socket.emit(MpEvent.C_QUERY_ROOM);\r\n    }\r\n\r\n    getIdlePlayers(listenChange: boolean) {\r\n        this.socket.emit(MpEvent.C_QUERY_PLAYER);\r\n        this.setListenIdlePlayersChange(listenChange);\r\n    }\r\n\r\n    private _listenIdleChange: boolean = false;\r\n    setListenIdlePlayersChange(listen: boolean) {\r\n        if(this._listenIdleChange == listen) return;\r\n        this._listenIdleChange = listen;\r\n        if(listen) {\r\n            this.socket.on(MpEvent.S_IDLE_PLAYER_CHANGE, data => {\r\n                this.listener.onIdlePlayersChange(data);\r\n            })\r\n        } else {\r\n            this.socket.removeAllListeners(MpEvent.S_IDLE_PLAYER_CHANGE);\r\n        }\r\n    }\r\n\r\n    quickJoinRoom(data: RoomData) {\r\n        this.socket.emit(MpEvent.C_QUICK_JOIN, data);\r\n    }\r\n\r\n    quickPlay(data: RoomData) {\r\n        this.socket.emit(MpEvent.C_QUICK_PLAY, data);\r\n    }\r\n\r\n    startGame() {\r\n        this.socket.emit(MpEvent.C_START_GAME);\r\n    }\r\n\r\n    cancelPlay() {\r\n        this.socket.emit(MpEvent.C_CANCEL_PLAY);\r\n    }\r\n\r\n    private setServerListener() {\r\n        this.socket.on('connect_error', (error) => {\r\n            console.warn(\"Failed to connect to server\");\r\n            this.listener.onError(MpCode.CONNECT_ERROR);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_ERROR, (error) => {\r\n            this.listener.onError(error);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_CONNECTED, (data) => {\r\n            this.localPlayer = new Player();\r\n            this.localPlayer.id = data.id;\r\n            this.localPlayer.name = data.name;\r\n            this.controller.localPlayer = data.id;\r\n\r\n            this.listener.onConnected(data.id, data.name);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_ROOM_CREATED, data => {\r\n            this.listener.onRoomCreated(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_ROOM_JOINED, data => {\r\n            this.listener.onRoomJoined(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_ROOM_PLAYER_JOINED, data => {\r\n            this.listener.onRoomPlayerJoined(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_ROOM_PLAYER_LEFT, data => {\r\n            this.listener.onRoomPlayerLeft(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_PLAYER_KICKED, () => {\r\n            this.listener.onPlayerKicked();\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_ROOM_MESSAGE, data => {\r\n            this.listener.onRoomMessage(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_PLAYER_STATUS_CHANGE, data => {\r\n            this.listener.onPlayerStatusChange(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_ROOM_MASTER_CHANGE, data => {\r\n            this.listener.onRoomMasterChange(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_QROOM_RESULT, data => {\r\n            this.listener.onRoomsResult(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_QPLAYER_RESULT, data => {\r\n            this.listener.onPlayersResult(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_QUICK_ROOM_JOINED, () => {\r\n            this.listener.onQuickRoomJoined();\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_PLAYER_INVITED, data => {\r\n            this.listener.onPlayerInvite(data);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_GAME_STARTED, () => {\r\n            this.controller.startGame();\r\n            this.listener.onGameStarted(this.controller);\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_GAME_CANCEL, () => {\r\n            this.listener.onGameCancel();\r\n        })\r\n\r\n        this.socket.on(MpEvent.S_GAME_STARTING, () => {\r\n            this.listener.onGameStarting();\r\n        })\r\n    }\r\n}\r\n\r\n","import { NetManager, mergeDeep, compareObj, vec2Round } from \"./NetModules\";\r\n\r\nconst { ccclass, property, disallowMultiple } = cc._decorator;\r\n\r\nenum SyncMode {\r\n    None = 0,\r\n    Position = 1,\r\n}\r\n\r\n@ccclass\r\n@disallowMultiple\r\nexport class NetComponent extends cc.Component {\r\n\r\n    @property({ tooltip: 'Sync fps between server and client' })\r\n    syncRate: number = 20;\r\n\r\n    @property()\r\n    interpolate: boolean = true;\r\n\r\n    @property({ type: cc.Enum(SyncMode) })\r\n    syncMode: SyncMode = SyncMode.Position;\r\n\r\n    // network id\r\n    id: string;\r\n    creator: string;    // object/prefab name use to create this\r\n    // last time object sync with server\r\n    protected lastTimeSync: number;\r\n\r\n    private syncVars: { [key: string]: any } = {};\r\n    // interpolate\r\n    protected _posBuffer: { time: number, pos: cc.Vec2, delta?: number }[] = [];\r\n    protected _lastStatePos: cc.Vec2;       // last authorize pos we receive from server. notice: pos of obj do not continuous receive from server when it not change\r\n\r\n    onLoad() {\r\n        this.lastTimeSync = Date.now();\r\n        this.collectSyncVars();\r\n        if (CC_SERVER) this.interpolate = false;\r\n    }\r\n\r\n    start() {\r\n        if (GAME_SERVER) {  // only server send it data to other player. normal player only send input/action to server\r\n            this.schedule(this.syncToClient.bind(this), 1 / this.syncRate);\r\n            this.syncToClient();    // sync to client first time\r\n        }\r\n    }\r\n\r\n    onEnable() {\r\n        NetManager.instance.registerNetObject(this);\r\n    }\r\n\r\n    onDisable() {\r\n        NetManager.instance.unregisterNetObject(this);\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (GAME_SERVER) {\r\n\r\n        } else {\r\n            if (this.interpolate) {\r\n                let factor = this.syncRate / cc.game.getFrameRate();\r\n                let time = Date.now() - (1000 / this.syncRate);\r\n                // drop old\r\n                while (this._posBuffer.length >= 2 && this._posBuffer[1].time <= time) {\r\n                    this._posBuffer.shift();\r\n                }\r\n                // interpolate\r\n                if (this._posBuffer.length >= 2 && this._posBuffer[0].time <= time && time <= this._posBuffer[1].time) {\r\n                    if (!this._posBuffer[0].delta) this._posBuffer[0].delta = factor;\r\n                    // let r = (time - this._posBuffer[0].time) / (this._posBuffer[1].time - this._posBuffer[0].time);\r\n                    let r = this._posBuffer[0].delta;\r\n                    let target = this._posBuffer[0].pos.lerp(this._posBuffer[1].pos, r);\r\n                    this.node.setPosition(target);\r\n                    this._posBuffer[0].delta += factor;\r\n                }\r\n            }\r\n\r\n            if(!this.isSync()) {\r\n                this.deSync();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // apply data the receive from server, client only\r\n    @ClientOnly\r\n    applyServerData(data) {\r\n        this.lastTimeSync = Date.now();\r\n        if (data.pos) {\r\n            if (this.interpolate) {\r\n                this._posBuffer.push({ time: Date.now(), pos: cc.v2(data.pos) })\r\n            } else {\r\n                this.node.setPosition(data.pos);\r\n            }\r\n            if (!this._lastStatePos) this.node.setPosition(data.pos);    // the very first pos from server\r\n            this._lastStatePos = data.pos;\r\n        }\r\n\r\n        // sync var\r\n        if (data.vars) {\r\n            for (let syncvar in data.vars) {\r\n                if (this.syncVars[syncvar]) {\r\n                    this.syncVars[syncvar]._syncVars[syncvar] = data.vars[syncvar];\r\n                    this.syncVars[syncvar][syncvar] = 2586;     // secret notify\r\n                } else {\r\n                    cc.warn('SyncVar local not match');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected isSync(): boolean {\r\n        return Date.now() - this.lastTimeSync < (1000 / this.syncRate) * 8;         // after 8 time of syncrate but we not receive sync data\r\n    }\r\n\r\n    protected deSync() {\r\n        this.enabled = false;\r\n    }\r\n\r\n    private lastCaptureData: any = {};\r\n    // send owner data to connected player, server only\r\n    @ServerOnly\r\n    protected captureData(): { id: string } {\r\n        let data: any = { id: this.id };\r\n        // only sync pos with syncmode = pos OR only first time\r\n        let position = vec2Round(this.node.position);\r\n        if (((this.syncMode & SyncMode.Position) != 0 || !this.lastCaptureData.pos) && (!this.lastCaptureData.pos || this.lastCaptureData.pos.x != position.x || this.lastCaptureData.pos.y != position.y)) {\r\n            data.pos = position;\r\n        }\r\n        // sync var\r\n        data.vars = {};\r\n        for (let syncvar in this.syncVars) {\r\n            let value = this.syncVars[syncvar][syncvar];\r\n            if (!this.lastCaptureData.vars || !compareObj(value, this.lastCaptureData.vars[syncvar])) {\r\n                data.vars[syncvar] = value;\r\n            }\r\n        }\r\n        if (Object.keys(data.vars).length == 0) delete data.vars;    // empty vars\r\n\r\n        this.lastCaptureData = mergeDeep(this.lastCaptureData, data);\r\n\r\n        return data;\r\n    }\r\n\r\n    @ServerOnly\r\n    captureDataFull(): { id: string, name: string, pos?: cc.Vec2, vars: any } {\r\n        // base\r\n        let data: any = { id: this.id, name: this.creator, pos: vec2Round(this.node.position) };\r\n        // var\r\n        data.vars = {};\r\n        for (let syncvar in this.syncVars) {\r\n            data.vars[syncvar] = this.syncVars[syncvar][syncvar];\r\n        }\r\n        if (Object.keys(data.vars).length == 0) delete data.vars;    // empty vars\r\n        return data;\r\n    }\r\n\r\n    @ServerOnly\r\n    private syncToClient() {\r\n        let data = this.captureData();\r\n        NetManager.instance.messageQueue.push({ sync: data });\r\n    }\r\n\r\n    private collectSyncVars() {\r\n        let comps: cc.Component[] = (this.node as any)._components;\r\n        comps.forEach((comp: any) => {\r\n            if (comp._syncVarsPool) {       // syncvar in prototype pool\r\n                comp._syncVars = comp._syncVars || {};      // init\r\n                comp._syncVarsPool.forEach(syncvar => {\r\n                    if (this.syncVars[syncvar]) {\r\n                        cc.error('SyncVar name conflict. There are more than one syncvar on the same object!');\r\n                    }\r\n                    this.syncVars[syncvar] = comp;\r\n                })\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// decorator\r\nexport function SyncVar(notify?: Function) {\r\n    return function (target: any, propertyKey: string) {\r\n        target._syncVarsPool = target._syncVarsPool || [];\r\n        target._syncVarsPool.push(propertyKey);\r\n        Object.defineProperty(target, propertyKey, {\r\n            get: function () {\r\n                this._syncVars = this._syncVars || {};\r\n                return this._syncVars[propertyKey];\r\n            },\r\n            set: function (value) {\r\n                if ((GAME_SERVER || !this.node)) {     // only game server or initializer                \r\n                    this._syncVars = this._syncVars || {};\r\n                    this._syncVars[propertyKey] = value;\r\n                    // sync for server\r\n                    notify && (this as cc.Component).scheduleOnce(() => {     // delay for next frame so all syncvar updated\r\n                        notify.apply(this, [this._syncVars[propertyKey]]);\r\n                    })\r\n                } else if (value === 2586) {     // secret key notify\r\n                    notify && (this as cc.Component).scheduleOnce(() => {     // delay for next frame so all syncvar updated\r\n                        notify.apply(this, [this._syncVars[propertyKey]]);\r\n                    })\r\n                }\r\n                else {\r\n                    cc.error('Only server can set value to SyncVar');\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        })\r\n    }\r\n}\r\n\r\nexport function ServerOnly(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n    descriptor.value = function (...args: any[]) {\r\n        let result;\r\n        if (GAME_SERVER) {\r\n            result = method.apply(this, args);\r\n        }\r\n        return result;\r\n    }\r\n    return descriptor;\r\n}\r\n\r\nexport function ClientOnly(target: Object, propertyKey: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n    descriptor.value = function (...args: any[]) {\r\n        let result;\r\n        if (!GAME_SERVER) {\r\n            result = method.apply(this, args);\r\n        }\r\n        return result;\r\n    }\r\n    return descriptor;\r\n}\r\n\r\n","import { NetMessage, systemKeys } from \"./NetModules\";\r\nimport { decode, encode } from \"../../msgpack\";\r\n\r\nconst USE_MSGPACK = true;        // use msgpack to pack/unpack message over net\r\n\r\nexport interface NetChannel {\r\n    setDataReceiver(receiver: (data: any, from?: string) => void);\r\n    onDisconnect: (id: string) => void;\r\n\r\n    send(id: string, data: string | ArrayBuffer | Blob | ArrayBufferView);\r\n    sendServer(data: string | ArrayBuffer | Blob | ArrayBufferView);\r\n    broadcast(data: string | ArrayBuffer | Blob | ArrayBufferView);\r\n    disconnect(id: string);\r\n}\r\n\r\nexport class NetConnection {    \r\n    private channel: NetChannel;\r\n    private onDataReceived: (data: NetMessage[], from: string) => void;\r\n    private mapKeys: string[];\r\n\r\n    constructor(channel: NetChannel) {\r\n        this.channel = channel;\r\n        this.channel.onDisconnect = (id) => { cc.warn('player disconnected: ' + id) };\r\n        this.mapKeys = systemKeys;\r\n    }\r\n\r\n    setDataReceiver(receiver: (data: NetMessage[], from: string) => void) {\r\n        this.onDataReceived = receiver;\r\n        this.channel.setDataReceiver(this.onChannelData.bind(this));\r\n    }\r\n\r\n    addMapKeys(keys: string[]) {\r\n        this.mapKeys = this.mapKeys.concat(keys);\r\n    }\r\n\r\n    private onChannelData(data: any, from: string) {\r\n        if(USE_MSGPACK) {\r\n            data = decode(new Uint8Array(data), { mapKeys: this.mapKeys });\r\n        } else {\r\n            data = JSON.parse(data);\r\n        }\r\n        // cc.log('connection on data: ' + JSON.stringify(data));\r\n        this.onDataReceived(data, from);\r\n    }\r\n\r\n    send(data: any, to?: string) {\r\n        if(USE_MSGPACK) {\r\n            data = encode(data, { mapKeys: this.mapKeys });\r\n        } else {\r\n            data = JSON.stringify(data);\r\n        }\r\n\r\n        if (!to) {\r\n            if (GAME_SERVER) {\r\n                this.channel.broadcast(data);\r\n            } else {\r\n                this.channel.sendServer(data);\r\n            }\r\n        } else {\r\n            this.channel.send(to, data);\r\n        }\r\n    }\r\n\r\n    disconnect(id: string) {\r\n        this.channel.disconnect(id);\r\n    }\r\n\r\n    set onDisconnect(handle: (id: string) => void) {\r\n        this.channel.onDisconnect = handle;\r\n    }\r\n}","import { Room } from \"../MpMacher\";\r\nimport { MpController } from \"../MpController\";\r\nimport { NetPlayer, NetComponent, ShortId, NetMessageQueue, NetMessage, NetConnection, ServerOnly, vec2Round } from \"./NetModules\";\r\n\r\n// global macro define\r\nwindow.GAME_SERVER = window.GAME_SERVER || false;\r\nwindow.CC_SERVER = window.CC_SERVER || false;\r\n\r\n// each game must have singleton this manager class to manage network component\r\n\r\nconst { ccclass, property, disallowMultiple } = cc._decorator;\r\n\r\nexport enum NetEvent {\r\n    READY,              // all player ready to game (game scene start and netmanager init)\r\n    DISCONNECT,         // disconnect from each others\r\n}\r\n\r\n@ccclass\r\n@disallowMultiple\r\nexport class NetManager extends cc.Component {\r\n    static instance: NetManager = null;\r\n\r\n    @property([cc.Prefab])\r\n    private spawnObjects: cc.Prefab[] = [];\r\n\r\n    @property({ tooltip: 'fps to send data between server <-> client' })\r\n    private messageRate: number = 20;\r\n    get syncRate() { return this.messageRate; }\r\n\r\n\r\n    localPlayer: string;\r\n    serverPlayer: string;\r\n    room: Room;\r\n\r\n    // event\r\n    private onNetObjectChanged: (object: NetComponent, spawn: boolean) => void;\r\n    setNetObjectChangedListener(listener: (object: NetComponent, spawn: boolean) => void) { this.onNetObjectChanged = listener; }\r\n\r\n    private onEvent: (event: NetEvent, data?: any) => void;\r\n    setEventListener(listener: (event: NetEvent, data: any) => void) { this.onEvent = listener; }\r\n\r\n    private _spawnPrefabs: { [key: string]: cc.Prefab } = {};\r\n    private _netConnection: NetConnection;\r\n    private _netObjects: { [key: string]: NetComponent } = {};\r\n\r\n    public messageQueue: NetMessageQueue;\r\n    public ready: boolean = false;              // all connected player ready play? (scene load, init manager,..)\r\n    private _objectsInfo: { [key: string]: number } = {};       // keep objects id that already request sync miss info\r\n\r\n    onLoad() {\r\n        NetManager.instance = this;\r\n    }\r\n\r\n    init(controller: MpController) {\r\n        if (!controller) return;\r\n\r\n        this.spawnObjects.forEach(obj => {\r\n            this._spawnPrefabs[obj.name] = obj;\r\n        })\r\n\r\n        this.localPlayer = controller.localPlayer;\r\n        this.serverPlayer = controller.serverPlayer;\r\n        this.room = controller.room;\r\n\r\n        this._netConnection = new NetConnection(controller);\r\n        this.messageQueue = new NetMessageQueue(this._netConnection);\r\n        this._netConnection.setDataReceiver(this.onNetData.bind(this));\r\n        this._netConnection.onDisconnect = this.onDisConnected.bind(this);\r\n\r\n        this.schedule(() => {\r\n            this.messageQueue.update();\r\n        }, 1 / this.messageRate)\r\n\r\n        GAME_SERVER && this.schedule(this.pingTask.bind(this), 1);\r\n\r\n        if (!GAME_SERVER) {\r\n            this.messageQueue.push({ sys: { ready: true } })\r\n        } else {\r\n            this.room.getPlayer(this.localPlayer).ready = true;\r\n        }\r\n    }\r\n\r\n    addMapKeys(keys: string[]) {\r\n        this._netConnection.addMapKeys(keys);\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (!this.room) return;\r\n\r\n        let time = Date.now();\r\n        if (GAME_SERVER) {\r\n            let disPlayers = [];\r\n            this.room.players.forEach(player => {\r\n                if (player.id != this.localPlayer) {\r\n                    if (time - player.lastRep > 10 * 1000) {\r\n                        disPlayers.push(player.id);\r\n                    }\r\n                }\r\n            })\r\n            disPlayers.forEach(id => {\r\n                let player = this.room.removePlayer(id);\r\n                this._netConnection.disconnect(player.id);\r\n                this.onEvent && this.onEvent(NetEvent.DISCONNECT, player);\r\n            })\r\n        } else {\r\n            // disconnect \r\n            let serverPlayer = this.room.getPlayer(this.serverPlayer);\r\n            if (serverPlayer) {\r\n                if (time - serverPlayer.lastRep > 12 * 1000) {\r\n                    this.onEvent && this.onEvent(NetEvent.DISCONNECT, this.serverPlayer);\r\n                    this._netConnection.disconnect(this.serverPlayer);\r\n                    this.room.removePlayer(this.serverPlayer);\r\n                }\r\n            }\r\n\r\n            // object info refresh if need\r\n            for (let id in this._objectsInfo) {\r\n                if (time - this._objectsInfo[id] > 15 * 1000) {\r\n                    delete this._objectsInfo[id];   // remove to refresh request\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getNetObject(objectId: string): NetComponent {\r\n        return this._netObjects[objectId];\r\n    }\r\n\r\n    getLocalPlayer(): NetPlayer {\r\n        return this._netObjects[this.localPlayer] as NetPlayer;\r\n    }\r\n\r\n    private pingTask() {\r\n        this.messageQueue.push({ sys: { ping: true } })\r\n    }\r\n\r\n    @ServerOnly\r\n    spawnObject(name: string | cc.Prefab, position?: cc.Vec2, id?: string): cc.Node {\r\n        if (typeof name === 'string') {\r\n            if (this._spawnPrefabs[name]) {\r\n                return this.spawnFromPrefab(this._spawnPrefabs[name], position, id);\r\n            } else {\r\n                cc.warn('Object not register to spawn object: ' + name);\r\n            }\r\n        } else {\r\n            return this.spawnFromPrefab(name, position, id);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private spawnFromPrefab(prefab: cc.Prefab, position: cc.Vec2, id: string): cc.Node {\r\n        let node = cc.instantiate(prefab);\r\n        let netcomp = node.getComponent(NetComponent);\r\n        if (netcomp instanceof NetPlayer && this.localPlayer === id) {\r\n            (netcomp as NetPlayer).isLocalPlayer = true;\r\n        }\r\n        netcomp.id = id ? id : ShortId.generate();\r\n        netcomp.creator = prefab.name;\r\n        position && node.setPosition(position);\r\n        this.onNetObjectChanged(netcomp, true);\r\n\r\n        if (GAME_SERVER) {   // send to sync client\r\n            this.messageQueue.push({ spawn: { id: netcomp.id, name: prefab.name, pos: vec2Round(netcomp.node.position) } })\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    private onDisConnected(id: string) {\r\n        let player = this.room.getPlayer(id);\r\n        if (player) {\r\n            this.room.removePlayer(id);\r\n            this.onEvent && this.onEvent(NetEvent.DISCONNECT, player);\r\n        }\r\n    }\r\n\r\n    private onNetData(netdatas: NetMessage[], from: string) {\r\n        netdatas.forEach((data: NetMessage) => {\r\n            // system message\r\n            if (data.sys) {\r\n                let sysData = data.sys;\r\n                if (sysData.ready != null) {\r\n                    this.room.getPlayer(from).ready = true;\r\n                    // check for all ready\r\n                    let allready = true;\r\n                    for (let i = 0; i < this.room.players.length; i++) {\r\n                        if (!this.room.players[i].ready) {\r\n                            allready = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (allready) {\r\n                        this.ready = true;\r\n                        this.onEvent && this.onEvent(NetEvent.READY);\r\n                        this.messageQueue.push({ sys: { allready: true } })       // signal client all player ready\r\n                    }\r\n                }\r\n\r\n                if (sysData.allready != null) {      // client receive ready message from server\r\n                    this.ready = true;\r\n                    this.onEvent && this.onEvent(NetEvent.READY);\r\n                }\r\n\r\n                if (sysData.ping != null) {       // receive ping from server\r\n                    let player = this.room.getPlayer(from);\r\n                    if (player) {\r\n                        player.lastRep = Date.now();\r\n                        this.messageQueue.push({ sys: { pong: true } })\r\n                    }\r\n                }\r\n\r\n                if (sysData.pong != null) {       // receive pong from client\r\n                    let player = this.room.getPlayer(from);\r\n                    if (player) {\r\n                        player.lastRep = Date.now();\r\n                    }\r\n                }\r\n\r\n                // request info from client\r\n                if (sysData.info) {\r\n                    if (this._netObjects[sysData.info]) {\r\n                        let info = this._netObjects[sysData.info].captureDataFull();\r\n                        this.messageQueue.push({ spawn: { id: info.id, name: info.name, pos: info.pos }, to: from });\r\n                        this.messageQueue.push({ sync: { id: info.id, vars: info.vars }, to: from });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // client receive\r\n            if (data.spawn) {\r\n                this.spawnObject(data.spawn.name, data.spawn.pos, data.spawn.id);\r\n            }\r\n            // sync net obj data\r\n            if (data.sync) {\r\n                if (this._netObjects[data.sync.id]) {\r\n                    this._netObjects[data.sync.id].applyServerData(data.sync);\r\n                } else {\r\n                    if (this._objectsInfo[data.sync.id] == null) {\r\n                        cc.warn('Objects not in sync: ' + data.sync.id);\r\n                        this.messageQueue.push({ sys: { info: data.sync.id } });\r\n                        this._objectsInfo[data.sync.id] = Date.now();\r\n                    }\r\n                }\r\n            }\r\n\r\n            // server only: move from client player\r\n            if (data.move) {\r\n                if (this._netObjects[data.move.id]) {\r\n                    (this._netObjects[data.move.id] as NetPlayer).applyPlayerMove(data.move as any);\r\n                } else {\r\n                    cc.warn('Player not in sync: ' + data.move.id);\r\n                }\r\n            }\r\n\r\n            // server only: act from client player\r\n            if (data.act) {\r\n                if (this._netObjects[data.act.id]) {\r\n                    (this._netObjects[data.act.id] as NetPlayer).applyAction(data.act as any);\r\n                } else {\r\n                    cc.warn('Player not in sync: ' + data.act.id);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    registerNetObject(object: NetComponent) {\r\n        // cc.warn('register: ' + object.id);\r\n        if (!this._netObjects[object.id]) {\r\n            this._netObjects[object.id] = object;\r\n            delete this._objectsInfo[object.id];\r\n        } else {\r\n            cc.warn('Already registered: ' + object.id);\r\n        }\r\n    }\r\n\r\n    unregisterNetObject(object: NetComponent) {\r\n        // cc.warn('unregister: ' + object.id);\r\n        if (this._netObjects[object.id]) {\r\n            delete this._netObjects[object.id]\r\n        } else {\r\n            cc.warn('Not yet registered: ' + object.id);\r\n        }\r\n        this.onNetObjectChanged(object, false);\r\n    }\r\n}\r\n","import { mergeDeep, NetConnection } from \"./NetModules\";\r\n\r\nexport interface NetMessage {\r\n    sys?: { ready?: boolean, allready?: boolean, ping?: boolean, pong?: boolean, info?: string },\r\n    spawn?: { id: string, name: string, pos?: cc.Vec2 },\r\n    sync?: { id: string, pos?: cc.Vec2, vars?: any },\r\n    move?: { id: string, seq: number },\r\n    act?: { id: string },\r\n    to?: string,\r\n}\r\n\r\nexport const systemKeys = ['sys', 'spawn', 'sync', 'move', 'act', 'to', 'id', 'pos', 'x', 'y', 'ready', 'allready', 'ping', 'pong', 'info', 'name', 'vars', 'seq'];\r\n\r\nexport class NetMessageQueue {\r\n\r\n    private connection: NetConnection;\r\n    private queue: NetMessage[] = [];\r\n    private pqueue: { [key: string]: NetMessage[] } = {};\r\n\r\n    constructor(connectionChannel: NetConnection) {\r\n        this.connection = connectionChannel;\r\n    }\r\n\r\n    push(message: NetMessage) {\r\n        message = Object.assign({}, message);  \r\n        if(message.to) {\r\n            let to = message.to;\r\n            this.pqueue[to] = this.pqueue[to] || [];\r\n            delete message.to;\r\n            this.pqueue[to].push(message);\r\n        } else {\r\n            this.queue.push(message);\r\n        }\r\n    }\r\n\r\n    // send message out\r\n    update() {\r\n        if (this.queue.length > 0) {\r\n            this.connection.send(this.queue);\r\n            this.queue = [];\r\n        }\r\n        for(let id in this.pqueue) {\r\n            this.connection.send(this.pqueue[id], id);\r\n        }\r\n        this.pqueue = {};\r\n    }\r\n}","// this use for breack circle import\r\n\r\nexport * from './NetUtils';\r\nexport * from './NetMessageQueue';\r\nexport * from './NetConnection';\r\nexport * from './NetManager';\r\nexport * from './NetComponent';\r\nexport * from './NetPlayer';\r\n","import { NetComponent, NetManager, SyncVar, ClientOnly, ServerOnly, mergeDeep, compareObj } from \"./NetModules\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nexport interface NetPlayerMove {\r\n    seq: number;        // move sequence number\r\n    time: number;       // time duration that move present\r\n}\r\n\r\nexport interface NetPlayerAction {\r\n    action: number;\r\n}\r\n\r\n@ccclass\r\nexport class NetPlayer extends NetComponent {\r\n\r\n    // need to call from player to apply input data to local player\r\n    applyMove: (move: NetPlayerMove, base?: cc.Vec2) => cc.Vec2;\r\n    applyAction: (action: NetPlayerAction) => void;\r\n\r\n    isLocalPlayer: boolean = false;\r\n\r\n    @SyncVar()\r\n    private lasMoveSeq: number = 0;    // last move seq proccess by server\r\n    private _pendingMoves: NetPlayerMove[] = [];\r\n    private _statePos: cc.Vec2;     // real player pos need to sync to client, with server we will interpolate to get smooth move\r\n    private _moves: NetPlayerMove[] = [];\r\n\r\n    start() {\r\n        super.start();\r\n        if (this.isLocalPlayer) {\r\n            this.interpolate = false;   // not not make interpolate for local player\r\n        }\r\n    }\r\n\r\n    // call from local player only\r\n    playerMove(move: NetPlayerMove) {\r\n        if (this.isLocalPlayer) {\r\n            this.syncMove(move);\r\n            this._pendingMoves.push(move);\r\n            let pos = this.applyMove(move);\r\n            this.node.setPosition(pos);\r\n        }\r\n    }\r\n\r\n    playerAction(action: NetPlayerAction) {\r\n        if (this.isLocalPlayer) {\r\n            if (GAME_SERVER) {\r\n                this.applyAction(action);\r\n            } else {\r\n                this.syncAction(action);\r\n            }\r\n        }\r\n    }\r\n\r\n    // client only\r\n    @ClientOnly\r\n    applyServerData(data) {\r\n        super.applyServerData(data);\r\n\r\n        if (this.isLocalPlayer) {\r\n            // Reconciliation input, @lasMoveSeq already sync from server\r\n            // state pos\r\n            let pos = cc.v2(this._lastStatePos);    // clone\r\n            let i = 0;\r\n            while (i < this._pendingMoves.length) {\r\n                let move = this._pendingMoves[i];\r\n                if (move.seq <= this.lasMoveSeq) {\r\n                    this._pendingMoves.splice(i, 1);\r\n                } else {\r\n                    pos = this.applyMove(move, pos);\r\n                    i++;\r\n                }\r\n            }\r\n            this.node.setPosition(pos);\r\n        }\r\n    }\r\n\r\n    // server only, to apply client move\r\n    @ServerOnly\r\n    applyPlayerMove(move: NetPlayerMove) {\r\n        this._moves.push(move);\r\n    }\r\n\r\n    captureData() {\r\n        let data;\r\n        if (this.isLocalPlayer) {\r\n            data = super.captureData();\r\n        } else {\r\n            // use state pos to sync\r\n            let current = this.node.position;\r\n            this._statePos = this._statePos || current;\r\n            this.node.setPosition(this._statePos);\r\n            data = super.captureData();\r\n            this.node.setPosition(current);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    protected isSync(): boolean {\r\n        return Date.now() - this.lastTimeSync < 12 * 1000;      // longer than netcomp\r\n    }\r\n\r\n    update(dt: number) {\r\n        super.update(dt);\r\n\r\n        if (GAME_SERVER) {\r\n            // interpolate\r\n            if (this.interpolate && !CC_SERVER) {       // interpolate other player on server (not for CC_SERVER)\r\n                if (this._posBuffer.length > 0) {\r\n                    let pos = this._posBuffer.shift().pos;\r\n                    this.node.setPosition(pos);\r\n                }\r\n            }\r\n            // apply move for player inst\r\n            if (this._moves.length > 0) {\r\n                this._moves.sort((a, b) => { return a.seq - b.seq });\r\n                let pos: cc.Vec2;\r\n                if (this._posBuffer.length > 0) {    // apply for last post\r\n                    pos = this._posBuffer[this._posBuffer.length - 1].pos;\r\n                }\r\n\r\n                this._moves.forEach(move => {\r\n                    this.lasMoveSeq = move.seq;\r\n                    pos = this.applyMove((move as NetPlayerMove), pos);\r\n                    this._posBuffer.push({ time: 0, pos: pos });            // interpolate player pos on server\r\n                })\r\n                this._statePos = pos;\r\n                this._moves = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    // client call only\r\n    @ClientOnly\r\n    private syncMove(move: NetPlayerMove) {\r\n        if (!GAME_SERVER) {\r\n            NetManager.instance.messageQueue.push({\r\n                move: { ...move, id: this.id }\r\n            })\r\n        }\r\n    }\r\n\r\n    @ClientOnly\r\n    private syncAction(action: NetPlayerAction) {\r\n        if (!GAME_SERVER) {\r\n            NetManager.instance.messageQueue.push({\r\n                act: { ...action, id: this.id }\r\n            })\r\n        }\r\n    }\r\n}","\r\n// generate random net id\r\nexport class ShortId {\r\n  static ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n  static generate(): string {\r\n    let id = '';\r\n    for (let i = 0; i < 6; i++) {\r\n      id += this.ALPHABET.charAt(Math.floor(Math.random() * this.ALPHABET.length));\r\n    }\r\n    return id;\r\n  }\r\n}\r\n\r\nexport function mergeDeep(...objects) {\r\n  const isObject = obj => obj && typeof obj === 'object';\r\n\r\n  return objects.reduce((prev, obj) => {\r\n      Object.keys(obj).forEach(key => {\r\n          const pVal = prev[key];\r\n          const oVal = obj[key];\r\n\r\n          if (Array.isArray(pVal) && Array.isArray(oVal)) {\r\n              prev[key] = pVal.concat(...oVal);\r\n          }\r\n          else if (isObject(pVal) && isObject(oVal)) {\r\n              prev[key] = mergeDeep(pVal, oVal);\r\n          }\r\n          else {\r\n              prev[key] = oVal;\r\n          }\r\n      });\r\n\r\n      return prev;\r\n  }, {});\r\n}\r\n\r\nexport function compareObj(x, y): boolean {\r\n  if (x === y) return true;\r\n  if (!(x instanceof Object) || !(y instanceof Object)) return false;\r\n\r\n  for (var p in x) {\r\n      if (!x.hasOwnProperty(p)) continue;\r\n\r\n      if (!y.hasOwnProperty(p)) return false;\r\n\r\n      if (x[p] === y[p]) continue;\r\n\r\n      if (!compareObj(x[p], y[p])) return false;\r\n  }\r\n\r\n  for (p in y) {\r\n      if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function vec2Round(x: number|any, y?: number): cc.Vec2 {\r\n  if(typeof x === 'object') {\r\n    return cc.v2(Math.round(x.x), Math.round(x.y));\r\n  }\r\n  return cc.v2(Math.round(x), Math.round(y));\r\n}","import LabelLocalized from \"./LabelLocalized\";\r\n\r\nconst {ccclass, property, requireComponent, executeInEditMode, menu} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(cc.RichText)\r\n@menu('i18n:MAIN_MENU.component.renderers/RichTextLocalized')\r\n@executeInEditMode\r\nexport default class RichTextLocalized extends LabelLocalized {\r\n\r\n    onLoad() {\r\n        this.label = this.getComponent(cc.RichText);\r\n        this.updateLabel();\r\n    }\r\n\r\n    updateLabel () {\r\n        if(this.label == null) {\r\n            this.label = this.getComponent(cc.RichText);\r\n        }\r\n        super.updateLabel();\r\n    }\r\n}","\r\nimport { NetComponent, SyncVar, NetManager } from \"../libs/multiplayer/components/NetModules\";\r\nimport PathVisual, { BezierPath } from \"./path-visual\";\r\nimport GlobalVar from \"../core/global-var\";\r\nimport Player from \"./player\";\r\n\r\nexport enum BombState {\r\n    NONE = -1,\r\n    DROP = 0,\r\n    IDLE,\r\n    BIND,\r\n    THROW,\r\n}\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Bomb extends cc.Component {\r\n\r\n    @property()\r\n    speed: number = 400;    // pixel/second\r\n\r\n    @property()\r\n    dropSpeed: number = 200;\r\n\r\n    @property()\r\n    exploreTime: number = 5;\r\n\r\n    @property(cc.Node)\r\n    mask: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    exploreRange: cc.Node = null;\r\n\r\n\r\n    // sync var\r\n    @SyncVar(Bomb.prototype.onStateChange)\r\n    state: BombState = BombState.NONE;\r\n\r\n    @SyncVar()\r\n    throwVector: cc.Vec2;   // vector that player throw out fire\r\n\r\n    @SyncVar()\r\n    progress: number;    // fire explosion progress\r\n\r\n    @SyncVar()\r\n    dropTarget: cc.Vec2;\r\n\r\n    @SyncVar(Bomb.prototype.onBindToPlayer)\r\n    bindId: string;\r\n\r\n    maxRange: number;\r\n\r\n\r\n    private movePath = new BezierPath();\r\n    private throwTime = 0;   // total time to move path\r\n    private throwTimeCount = 0;  // current time moving\r\n    private maskHeight = 0;\r\n    private exploreTimeCount = 0;\r\n    private cprogress = 0;\r\n    private explored = false;\r\n    private binPlayer: Player;\r\n\r\n    onLoad() {\r\n        this.exploreRange.active = false;\r\n        this.exploreRange.scale = 1;\r\n        this.maskHeight = this.mask.height;\r\n        this.mask.height = 0;\r\n        this.maxRange = GlobalVar.instance.get('maxFireRange');\r\n    }\r\n\r\n    start() {\r\n        let colliders = this.getComponents(cc.Collider);\r\n        if (GAME_SERVER) {\r\n            this.state = BombState.DROP;\r\n            colliders.forEach(col => {\r\n                col.tag == 1 ? col.enabled = false : null;      // disable explore collider\r\n            })\r\n        } else {\r\n            colliders.forEach(col => col.enabled = false);\r\n        }\r\n    }\r\n\r\n    onStateChange() {\r\n        if (this.state == BombState.DROP) {        // stop drop -> end drop seq or player catch fire            \r\n        } else if (this.state == BombState.THROW) {\r\n            PathVisual.getBezierPath(this.node.position, this.throwVector, this.maxRange, this.movePath);\r\n\r\n            let s = this.movePath.endPos.sub(this.movePath.startPos).mag();  // real move range\r\n            this.throwTime = s / this.speed;\r\n            this.throwTimeCount = 0;\r\n        }\r\n    }\r\n\r\n    onBindToPlayer() {\r\n        if (this.bindId) {\r\n            this.binPlayer = NetManager.instance.getNetObject(this.bindId).getComponent(Player);\r\n        } else {\r\n            this.binPlayer = null;\r\n        }\r\n    }\r\n    \r\n    // server call\r\n    setDropTarget(dropPos: cc.Vec2) {\r\n        this.dropTarget = dropPos;\r\n    }\r\n\r\n    startThrow(val) {\r\n        // cc.log(`start pos ${cc.v2(this.startPos)} control ${cc.v2(this.control)} max ${this.maxRange}`)\r\n        // make sure all control, maxRange is set before startPos\r\n        PathVisual.getBezierPath(this.node.position, this.throwVector, this.maxRange, this.movePath);\r\n\r\n        let s = this.movePath.endPos.sub(this.movePath.startPos).mag();  // real move range\r\n        this.throwTime = s / this.speed;\r\n        this.throwTimeCount = 0;\r\n    }\r\n\r\n    // server call\r\n    setBindPlayer(playerId: string) {\r\n        if (playerId) {\r\n            this.state = BombState.BIND;\r\n            this.bindId = playerId;\r\n        } else {\r\n            this.state = BombState.IDLE;\r\n            this.bindId = '';\r\n        }\r\n    }\r\n\r\n    // server call\r\n    setThrowDirection(control: cc.Vec2) {\r\n        this.throwVector = control;\r\n        this.state = BombState.THROW;\r\n    }\r\n\r\n    canCapture(): boolean {\r\n        return this.state == BombState.DROP || this.state == BombState.IDLE;\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (!this.explored) {\r\n            if (this.state == BombState.DROP) {       // bomb drop process\r\n                let dy = this.dropSpeed * dt;\r\n                this.node.y -= dy;\r\n                if (this.node.y < this.dropTarget.y) {\r\n                    this.node.y = this.dropTarget.y;\r\n                    if (GAME_SERVER) {\r\n                        this.state = BombState.IDLE;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.state > BombState.DROP) {      // bom explosion process\r\n                this.exploreTimeCount += dt;\r\n                if (GAME_SERVER) {\r\n                    this.progress = Math.round((this.exploreTimeCount / this.exploreTime) * 100) / 100;\r\n                }\r\n                this.cprogress = Math.round((this.exploreTimeCount / this.exploreTime) * 100) / 100;\r\n\r\n                if (Math.abs(this.cprogress - this.progress) > 1 / 10) {\r\n                    this.cprogress = this.progress;\r\n                    this.exploreTimeCount = this.cprogress * this.exploreTime;  // recal for time count\r\n                }\r\n                // update bomb progress\r\n                this.mask.height = this.cprogress * this.maskHeight;\r\n                if (this.cprogress >= 1) {\r\n                    this.explored = true;\r\n                    this.exploreRange.active = true;\r\n                    this.exploreRange.runAction(cc.sequence(\r\n                        cc.scaleTo(0.35, 14),\r\n                        cc.callFunc(() => {\r\n                            let colliders = this.getComponents(cc.Collider);\r\n                            colliders.forEach(collid => {\r\n                                collid.tag == 0 ? collid.enabled = false : null;    // disable capture collid\r\n                                collid.tag == 1 ? collid.enabled = true : null;    // enable explosion range effect collid\r\n                            })\r\n                            this.binPlayer && this.binPlayer.onBindFireExplore(this.getComponent(NetComponent).id);\r\n                        }),\r\n                        cc.delayTime(0.2),\r\n                        cc.callFunc(() => {\r\n                            this.node.removeFromParent();\r\n                        })\r\n                    ))\r\n                }\r\n            }\r\n\r\n            if (this.state == BombState.BIND) {       // binb player proccess\r\n                this.binPlayer && this.node.setPosition(this.binPlayer.node.x, this.binPlayer.node.y + 14);\r\n            }\r\n\r\n            if (this.state == BombState.THROW) {\r\n                if (this.throwTime > 0) {\r\n                    this.throwTimeCount += dt;\r\n                    if (this.throwTimeCount > this.throwTime) this.throwTimeCount = this.throwTime;\r\n                    let p = this.movePath.getPoint(this.throwTimeCount / this.throwTime);\r\n                    this.node.setPosition(p);\r\n                    if (this.throwTimeCount >= this.throwTime) {\r\n                        this.throwTime = 0;          // arrive\r\n                        GAME_SERVER && (this.state = BombState.IDLE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","// Using this class as a static configuration for project\r\n\r\nexport default class Config {\r\n    // this mus be unique for each project\r\n    static PROJECT_ID = \"pol-battle\";\r\n    static PROJECT_VERSION = \"1.0.0\";\r\n}","import { Decoder } from \"./Decoder\";\r\nimport { defaultDecodeOptions, DecodeOptions } from \"./decode\";\r\nimport { ensureAsyncIterabe, ReadableStreamLike } from \"./utils/stream\";\r\n\r\nexport type DecodeAsyncOptions = DecodeOptions;\r\nexport const defaultDecodeAsyncOptions = defaultDecodeOptions;\r\n\r\nexport async function decodeAsync(\r\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\r\n  options: DecodeAsyncOptions = defaultDecodeOptions,\r\n): Promise<unknown> {\r\n  const stream = ensureAsyncIterabe(streamLike);\r\n\r\n  const decoder = new Decoder(\r\n    options.extensionCodec,\r\n    options.maxStrLength,\r\n    options.maxBinLength,\r\n    options.maxArrayLength,\r\n    options.maxMapLength,\r\n    options.maxExtLength,\r\n  );\r\n  return decoder.decodeOneAsync(stream);\r\n}\r\n\r\nexport function decodeArrayStream(\r\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\r\n  options: DecodeAsyncOptions = defaultDecodeOptions,\r\n) {\r\n  const stream = ensureAsyncIterabe(streamLike);\r\n\r\n  const decoder = new Decoder(\r\n    options.extensionCodec,\r\n    options.maxStrLength,\r\n    options.maxBinLength,\r\n    options.maxArrayLength,\r\n    options.maxMapLength,\r\n    options.maxExtLength,\r\n  );\r\n\r\n  return decoder.decodeArrayStream(stream);\r\n}\r\n\r\nexport function decodeStream(\r\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\r\n  options: DecodeAsyncOptions = defaultDecodeOptions,\r\n) {\r\n  const stream = ensureAsyncIterabe(streamLike);\r\n\r\n  const decoder = new Decoder(\r\n    options.extensionCodec,\r\n    options.maxStrLength,\r\n    options.maxBinLength,\r\n    options.maxArrayLength,\r\n    options.maxMapLength,\r\n    options.maxExtLength,\r\n  );\r\n\r\n  return decoder.decodeStream(stream);\r\n}\r\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\r\nimport { Decoder } from \"./Decoder\";\r\n\r\nexport type DecodeOptions = Partial<\r\n  Readonly<{\r\n    extensionCodec: ExtensionCodecType;\r\n\r\n    /**\r\n     * Maximum string length.\r\n     * Default to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxStrLength: number;\r\n    /**\r\n     * Maximum binary length.\r\n     * Default to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxBinLength: number;\r\n    /**\r\n     * Maximum array length.\r\n     * Default to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxArrayLength: number;\r\n    /**\r\n     * Maximum map length.\r\n     * Default to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxMapLength: number;\r\n    /**\r\n     * Maximum extension length.\r\n     * Default to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxExtLength: number;\r\n    /**\r\n     * map key use to encode object key\r\n     */\r\n    mapKeys: string[];\r\n  }>\r\n>;\r\n\r\nexport const defaultDecodeOptions: DecodeOptions = {};\r\n\r\nexport function decode(buffer: ArrayLike<number>, options: DecodeOptions = defaultDecodeOptions): unknown {\r\n  const decoder = new Decoder(\r\n    options.extensionCodec,\r\n    options.maxStrLength,\r\n    options.maxBinLength,\r\n    options.maxArrayLength,\r\n    options.maxMapLength,\r\n    options.maxExtLength,\r\n    options.mapKeys,\r\n  );\r\n  decoder.setBuffer(buffer); // decodeSync() requires only one buffer\r\n  return decoder.decodeOneSync();\r\n}\r\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\r\nimport { Encoder } from \"./Encoder\";\r\n\r\nexport type EncodeOptions = Partial<\r\n  Readonly<{\r\n    extensionCodec: ExtensionCodecType;\r\n    maxDepth: number;\r\n    initialBufferSize: number;\r\n    sortKeys: boolean;\r\n    mapKeys: string[];\r\n  }>\r\n>;\r\n\r\nconst defaultEncodeOptions = {};\r\n\r\nexport function encode(value: unknown, options: EncodeOptions = defaultEncodeOptions): Uint8Array {\r\n  const encoder = new Encoder(options.extensionCodec, options.maxDepth, options.initialBufferSize, options.sortKeys, options.mapKeys);\r\n  encoder.encode(value, 1);\r\n  return encoder.getUint8Array();\r\n}\r\n","// this class use for manage own event sending between game object\r\n// why we do not use cocos event manager like emit, dispatchevent\r\n//      - emit: it only work on the same node\r\n//      - dispatch event: it only work buble (we not send cross object)\r\n\r\nclass Listenner {\r\n    target: cc.Node = null;\r\n    callback: Function = null;\r\n    priority: number = 0;\r\n    excuteOnce: boolean = false;\r\n}\r\n\r\nexport default class EventManager {\r\n\r\n    private static _instance: EventManager = null;\r\n    static get instance() {\r\n        if(EventManager._instance == null)\r\n            EventManager._instance = new EventManager();\r\n\r\n        return EventManager._instance;\r\n    }\r\n\r\n    private eventListenners: {[key: string]: Listenner[]} = {};\r\n\r\n    register(event: string, callback: Function, target: any = null, priority: number = 0, excuteOnce: boolean = false): Function {\r\n        let listenner = {target: target, callback: callback, priority: priority, excuteOnce: excuteOnce};\r\n        if(this.eventListenners[event]) {   // already have evnt type -> push back it in list listenner\r\n            this.eventListenners[event].push(listenner);\r\n        } else { // if not create list\r\n            this.eventListenners[event] = [];\r\n            this.eventListenners[event].push(listenner);\r\n        }\r\n        // sort base on prirority\r\n        this.eventListenners[event].sort((a, b) => {\r\n            return b.priority - a.priority;         // bigger priority -> most front of array\r\n        });\r\n\r\n        return callback;    // return callback to easy store it, and use in unregister function\r\n    }\r\n\r\n    registerOnce(event: string, callback: Function, target: any = null, priority: number = 0) {\r\n        this.register(event, callback, target, priority, true);\r\n    }\r\n\r\n    unregister(event: string, callback: Function, target: any = null) {\r\n        if(this.eventListenners[event]) {\r\n            let toRemove: number[] = [];\r\n            for(let i = 0; i < this.eventListenners[event].length; i++) {\r\n                let listenner = this.eventListenners[event][i];\r\n                if(callback == null) {  // remove for all listenner on node target\r\n                    if(listenner.target == target)\r\n                        toRemove.push(i);\r\n                }  else {\r\n                    if(listenner.target == target && listenner.callback == callback)\r\n                        toRemove.push(i);\r\n                }                \r\n            }\r\n            this.eventListenners[event] = this.eventListenners[event].filter((val, id) => {\r\n                return toRemove.indexOf(id) === -1;\r\n            });\r\n            // remove if event has empty\r\n            if(this.eventListenners[event].length == 0) {\r\n                delete this.eventListenners[event];\r\n            }\r\n        }\r\n    }\r\n\r\n    // unregister all listenner for target\r\n    unregisterTarget(target: any) {\r\n        for(let event in this.eventListenners) {\r\n            let toRemove: number[] = [];\r\n            for(let i = 0; i < this.eventListenners[event].length; i++) {\r\n                let listenner = this.eventListenners[event][i];\r\n                if(listenner.target == target)\r\n                    toRemove.push(i);\r\n            }\r\n            this.eventListenners[event] = this.eventListenners[event].filter((val, id) => {\r\n                return toRemove.indexOf(id) === -1;\r\n            });\r\n            // remove if event has empty\r\n            if(this.eventListenners[event].length == 0) {\r\n                delete this.eventListenners[event];\r\n            }\r\n        }\r\n    }\r\n\r\n    // remove all listener for event\r\n    remove(event: string) {\r\n        if(this.eventListenners[event]) {\r\n            delete this.eventListenners[event];\r\n        }\r\n    }\r\n\r\n    dispatch(event: string, ...params: any[]) {\r\n        if(this.eventListenners[event]) {\r\n            let excuteOnce: Listenner[] = [];\r\n            this.eventListenners[event].forEach(listenner => {\r\n                if(listenner.target) {\r\n                    listenner.callback.call(listenner.target, params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], params[9]);\r\n                } else {\r\n                    listenner.callback(params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], params[9]);\r\n                }\r\n                if(listenner.excuteOnce == true) {\r\n                    excuteOnce.push(listenner);\r\n                }\r\n            });\r\n\r\n            excuteOnce.forEach(listenner => {\r\n                this.unregister(event, listenner.callback, listenner.target);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { NetManager, vec2Round } from \"../libs/multiplayer/components/NetModules\";\r\nimport Bomb from \"./bomb\";\r\nimport EventManager from \"../core/event-manager\";\r\nimport GameNet from \"./game-net\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BombSpawner extends cc.Component {\r\n\r\n    @property()\r\n    delayActive: number = 3;\r\n\r\n    @property()\r\n    spawnRate: number = 0.5;\r\n\r\n    @property(cc.Prefab)\r\n    firePrefab: cc.Prefab = null;\r\n\r\n    start() {\r\n        if (GAME_SERVER) {\r\n            this.scheduleOnce(this.activeSpawn.bind(this), this.delayActive);\r\n        }\r\n        EventManager.instance.register(GameNet.EVT_GAME_OVER, this.onGameOver, this);\r\n    }\r\n\r\n    activeSpawn() {\r\n        this.spawn();\r\n        this.schedule(this.spawn, 1 / this.spawnRate);\r\n    }\r\n\r\n    spawn() {\r\n        // select pos\r\n        let x = 30 + Math.random() * (1280 - 30 * 2);\r\n        let targetY = 30 + Math.random() * (720 - 30 * 2);\r\n        let bomb = NetManager.instance.spawnObject(this.firePrefab, cc.v2(x, 750));\r\n        bomb.getComponent(Bomb).setDropTarget(vec2Round(x, targetY));\r\n    }\r\n\r\n    onGameOver() {\r\n        this.unschedule(this.spawn);\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n}","import { SyncVar } from \"../libs/multiplayer/components/NetModules\";\r\nimport EventManager from \"../core/event-manager\";\r\n\r\n// special part of game need to sync over net. We do not make on Game itself because net obj need to spawn\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GameNet extends cc.Component {\r\n\r\n    static EVT_GAME_OVER = 'gnend';\r\n\r\n    @property()\r\n    private gameTime: number = 3 * 60;        // 3 min\r\n\r\n    @SyncVar()\r\n    private stime: number;                  // sync time on net\r\n    get time() { return this.stime; }\r\n\r\n    @SyncVar()\r\n    score1: number;\r\n\r\n    @SyncVar()\r\n    score2: number;\r\n\r\n    gameOver = false;\r\n\r\n    private ltime: number;      // local time\r\n\r\n    start() {\r\n        if (GAME_SERVER) {\r\n            this.stime = this.gameTime;\r\n            this.ltime = this.stime;\r\n            this.score1 = 0;\r\n            this.score2 = 0;\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this.gameOver) return;\r\n\r\n        if (GAME_SERVER && !this.gameOver) {\r\n            this.ltime -= dt;\r\n            this.stime = Math.round(this.ltime);            // we sync integer instead of float to reduce msg size\r\n            if (this.ltime < 0) {\r\n                this.stime = 0;\r\n                this.gameOver = true;\r\n            }\r\n        }\r\n\r\n        if (this.stime == 0) {\r\n            this.gameOver = true;\r\n            EventManager.instance.dispatch(GameNet.EVT_GAME_OVER);\r\n        }\r\n    }\r\n}","import Loader from \"../core/loader\";\r\nimport Player from \"./player\";\r\nimport { NetManager, NetComponent, NetEvent } from \"../libs/multiplayer/components/NetModules\";\r\nimport { MpController } from \"../libs/multiplayer/MpController\";\r\nimport GlobalVar from \"../core/global-var\";\r\nimport Popup from \"../core/popup\";\r\nimport GameNet from \"./game-net\";\r\nimport { Utils } from \"../utils\";\r\nimport EventManager from \"../core/event-manager\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nconst customMapKeys = ['stime', 'score1', 'score2', 'lasMoveSeq', 'face', 'team', 'health', 'bindFireId', 'strength', 'speed', 'state',\r\n    'throwVector', 'progress', 'dropTarget', 'bindId', 'time', 'dir', 'data', 'action'\r\n];\r\n\r\n@ccclass\r\nexport default class Game extends cc.Component {\r\n    static instance: Game;\r\n\r\n    @property(cc.Node)\r\n    root: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    playerPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    firePrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    gameSyncPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Label)\r\n    gameTime: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    score1: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    score2: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    deathTime: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    gameOverMsg: cc.Label = null;\r\n\r\n    @property([cc.Node])\r\n    team1Pos: cc.Node[] = [];\r\n\r\n    @property([cc.Node])\r\n    team2Pos: cc.Node[] = [];\r\n\r\n    private gameSync: GameNet = null;\r\n\r\n    onLoad() {\r\n        if (!Loader.loaded) return;\r\n\r\n        Game.instance = this;\r\n        cc.director.getCollisionManager().enabled = true;\r\n        // cc.director.getCollisionManager().enabledDebugDraw = true;\r\n\r\n        this.deathTime.node.parent.active = false;\r\n        this.gameOverMsg.node.parent.active = false;\r\n    }\r\n\r\n    start() {\r\n        if (!Loader.loaded) return;\r\n\r\n        cc.log(\"Is server: \" + GAME_SERVER);\r\n\r\n        let connection: MpController = GlobalVar.instance.get('connection', true);\r\n        if (!connection) { cc.director.loadScene('main-menu'); return; }  // not come from matchmaker -> mm\r\n\r\n        EventManager.instance.register(Player.EVT_DEATH_TIME, this.onPlayerDeathTimeUpdate, this);\r\n        EventManager.instance.register(Player.EVT_REVIVE, this.onPlayerRevive, this);\r\n        EventManager.instance.register(Player.EVT_DEATH, this.onPlayerDeath, this);\r\n        EventManager.instance.register(GameNet.EVT_GAME_OVER, this.onGameOver, this);\r\n\r\n        NetManager.instance.setNetObjectChangedListener(this.onNetObjectChanged.bind(this));\r\n        NetManager.instance.init(connection);\r\n        NetManager.instance.setEventListener(this.onNetEvent.bind(this));\r\n        NetManager.instance.addMapKeys(customMapKeys);\r\n\r\n        if (GAME_SERVER) {\r\n            NetManager.instance.spawnObject(this.gameSyncPrefab);\r\n        }\r\n\r\n        this.createPlayer();\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this.gameSync) {\r\n            let time = Utils.time2String(this.gameSync.time);\r\n            this.gameTime.string = time;\r\n            this.gameSync.score1 && (this.score1.string = this.gameSync.score1.toString());\r\n            this.gameSync.score2 && (this.score2.string = this.gameSync.score2.toString());\r\n        }\r\n    }\r\n\r\n    onNetEvent(event: NetEvent, data: any) {\r\n        if (event == NetEvent.DISCONNECT) {\r\n            cc.log('player disconnected: ' + data.id);\r\n            if (GAME_SERVER && this.gameSync && !this.gameSync.gameOver) {\r\n                NetManager.instance.getNetObject(data.id).node.removeFromParent();\r\n                if (NetManager.instance.room.players.length == 1) {      // all client quit\r\n                    Popup.instance.showInfoPopup('All player quit!!', () => {\r\n                        cc.director.loadScene('main-menu');\r\n                    })\r\n                } else {\r\n                    Popup.instance.showNotify('[' + data.name + ']' + ' disconnted');\r\n                }\r\n            } else {\r\n                Popup.instance.showInfoPopup('Disconnected to server!', () => {\r\n                    cc.director.loadScene('main-menu');\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onNetObjectChanged(object: NetComponent, spawn: boolean) {\r\n        if (spawn) {\r\n            if (!this.gameSync) {\r\n                this.gameSync = object.getComponent(GameNet);\r\n            }\r\n            this.root.addChild(object.node);\r\n        } else {    // death\r\n            if(object.getComponent(GameNet)) {\r\n                this.gameSync = null;\r\n            }\r\n            object.node.removeFromParent();\r\n        }\r\n    }\r\n\r\n    private createPlayer() {\r\n        if (GAME_SERVER) {\r\n            // team split\r\n            let room = NetManager.instance.room;\r\n            if (room.players[0].data && room.players[0].data.team) {\r\n                room.players.forEach((player, idx) => {\r\n                    player.team = player.data.team;\r\n                })\r\n            } else {\r\n                let half = room.players.length / 2;\r\n                room.players.forEach((player, idx) => {\r\n                    player.team = idx < half ? 1 : 2;\r\n                })\r\n            }\r\n\r\n            // create player\r\n            let team1Idx = 0, team2Idx = 0;\r\n            NetManager.instance.room.players.forEach(playerInfo => {\r\n                // cc.log('player info: ' + JSON.stringify(playerInfo))\r\n                let playerNode = NetManager.instance.spawnObject(this.playerPrefab, null, playerInfo.id);\r\n                let pos: cc.Vec2;\r\n                if (playerInfo.team == 1) {\r\n                    pos = this.team1Pos[team1Idx++].position;\r\n                } else {\r\n                    pos = this.team2Pos[team2Idx++].position;\r\n                }\r\n                playerNode.setPosition(pos);\r\n\r\n                let player = playerNode.getComponent(Player);\r\n                player.team = playerInfo.team;\r\n            })\r\n        }\r\n    }\r\n\r\n    showDeathMessage(deathTime: number) {\r\n        this.deathTime.node.parent.active = true;\r\n        this.deathTime.string = deathTime.toString();\r\n    }\r\n\r\n    hideDeathMessage() {\r\n        this.deathTime.node.parent.active = false;\r\n    }\r\n\r\n    onPlayerDeathTimeUpdate(player: Player, time: number) {\r\n        if (player.netPlayer.isLocalPlayer) {\r\n            this.showDeathMessage(time);\r\n        }\r\n    }\r\n\r\n    onPlayerRevive(player: Player) {\r\n        if (player.netPlayer.isLocalPlayer) {\r\n            this.hideDeathMessage();\r\n        }\r\n    }\r\n\r\n    onPlayerDeath(player: Player) {\r\n        if (GAME_SERVER) {\r\n            if (player.team == 1) {\r\n                this.gameSync.score2 += 1;\r\n            } else if (player.team == 2) {\r\n                this.gameSync.score1 += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    onGameOver() {\r\n        let localPlayer = NetManager.instance.getLocalPlayer().getComponent(Player);\r\n        let teamWin = this.gameSync.score1 > this.gameSync.score2 ? 1 : this.gameSync.score1 < this.gameSync.score2 ? 2 : 0;\r\n        if (teamWin == 0) {\r\n            this.gameOverMsg.node.parent.active = true;\r\n            this.gameOverMsg.string = 'RAW';\r\n        } else {\r\n            if (localPlayer.team == teamWin) {\r\n                this.gameOverMsg.node.parent.active = true;\r\n            } else {\r\n                this.gameOverMsg.node.parent.active = true;\r\n                this.gameOverMsg.string = 'YOU LOSE';\r\n                this.gameOverMsg.node.color = cc.color(100, 100, 100);\r\n            }\r\n        }\r\n        this.hideDeathMessage();\r\n        localPlayer.enabled = false;\r\n    }\r\n\r\n    onButtonHome() {\r\n        cc.director.loadScene('main-menu');\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n}","// this use to store data across scene\r\n// the last message will override previous\r\n\r\nexport default class GlobalVar {\r\n    static _instance: GlobalVar;\r\n    static get instance() {\r\n        if(!GlobalVar._instance) {\r\n            GlobalVar._instance = new GlobalVar();\r\n        }\r\n        return GlobalVar._instance;\r\n    }\r\n\r\n    private _vars: {[key: string]: any} = {};\r\n\r\n    /**\r\n     * set global var\r\n     * @param varName variable name\r\n     * @param value variable value\r\n     */\r\n    set(varName: string, value: any) {\r\n        this._vars[varName] = value;\r\n    }\r\n\r\n    /**\r\n     * read global var\r\n     * @param varName variable name\r\n     * @param deleteAfterRead delete var after read, default FALSE\r\n     */\r\n    get(varName: string, deleteAfterRead: boolean = false) {\r\n        let data = this._vars[varName];\r\n        if(data && deleteAfterRead) {\r\n            delete this._vars[varName];\r\n        }\r\n        return data;\r\n    }\r\n}","if(!window.i18n) window.i18n = {};\r\nif(!window.i18n.languages) window.i18n.languages = {};\r\n\r\n\r\nconst Polyglot = require('polyglot');\r\nconst supported_languages = window.i18n.supported_languages || [];\r\n\r\nlet saveLanguage = CC_EDITOR ? null : cc.sys.localStorage.getItem(\"__gamesave-language\");\r\nlet lang = '';\r\nif(saveLanguage == null) {      // first time, load default from system lang\r\n    lang = cc.sys.language;\r\n    if(supported_languages.length > 0 && supported_languages.indexOf(lang) == -1) {   // system lang not support -> choose the 1st\r\n        lang = supported_languages[0];\r\n        // save selected\r\n        if(!CC_EDITOR) {\r\n            cc.sys.localStorage.setItem(\"__gamesave-language\", lang);\r\n        }\r\n    }\r\n} else {    // we have the save lang\r\n    lang = saveLanguage;\r\n}\r\n\r\n\r\nlet data = window.i18n.languages[lang] || {}; // update this to set your default displaying language in editor\r\n// let polyglot = null;\r\nlet polyglot = new Polyglot({phrases: data, allowMissing: true});\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * This method allow you to switch language during runtime, language argument should be the same as your data file name\r\n     * such as when language is 'zh', it will load your 'zh.js' data source.\r\n     * @method init\r\n     * @param language - the language specific data file name, such as 'zh' to load 'zh.js'\r\n     */\r\n    init (language) {\r\n        if(!window.i18n.languages[language]) {\r\n            console.warn('Language is not support: ' + language);\r\n            return false;\r\n        }\r\n        if(!CC_EDITOR && window.i18n.languages[language]) {    // save lang\r\n            cc.sys.localStorage.setItem(\"__gamesave-language\", language);\r\n        }\r\n        lang = language;\r\n        data = window.i18n.languages[lang] || {};\r\n        polyglot.replace(data);\r\n        return true;\r\n    },\r\n    /**\r\n     * return the save language\r\n     */\r\n    getSaveLang () {\r\n        return cc.sys.localStorage.getItem(\"__gamesave-language\");\r\n    },\r\n    /**\r\n     * this method takes a text key as input, and return the localized string\r\n     * Please read https://github.com/airbnb/polyglot.js for details\r\n     * @method t\r\n     * @return {String} localized string\r\n     * @example\r\n     *\r\n     * var myText = i18n.t('MY_TEXT_KEY');\r\n     *\r\n     * // if your data source is defined as\r\n     * // {\"hello_name\": \"Hello, %{name}\"}\r\n     * // you can use the following to interpolate the text\r\n     * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\r\n     */\r\n    t (key, opt) {\r\n        return polyglot.t(key, opt);\r\n    }\r\n};","// Main Functions:\r\n\r\nexport { encode } from \"./encode\";\r\nexport { decode } from \"./decode\";\r\nexport { decodeAsync, decodeArrayStream, decodeStream } from \"./decodeAsync\";\r\n\r\nexport { Decoder } from \"./Decoder\";\r\nexport { Encoder } from \"./Encoder\";\r\n\r\n// Utilitiies for Extension Types:\r\n\r\nexport { ExtensionCodec, ExtensionCodecType, ExtensionDecoderType, ExtensionEncoderType } from \"./ExtensionCodec\";\r\nexport { ExtData } from \"./ExtData\";\r\nexport {\r\n  EXT_TIMESTAMP,\r\n  encodeDateToTimeSpec,\r\n  encodeTimeSpecToTimestamp,\r\n  decodeTimestampToTimeSpec,\r\n  encodeTimestampExtension,\r\n  decodeTimestampExtension,\r\n} from \"./timestamp\";\r\n","import Input from \"./input\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class InputKeyboard extends cc.Component {\r\n\r\n    private keys = {};      // key status\r\n    private preAngle = -1;\r\n\r\n    start() {\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    }\r\n\r\n    update() {\r\n        this.updateMove();\r\n    }\r\n\r\n    onKeyUp(event: cc.Event.EventKeyboard) {\r\n        let code = event.keyCode;\r\n        code == cc.macro.KEY.up ? code = cc.macro.KEY.w : null;\r\n        code == cc.macro.KEY.down ? code = cc.macro.KEY.s : null;\r\n        code == cc.macro.KEY.left ? code = cc.macro.KEY.a : null;\r\n        code == cc.macro.KEY.right ? code = cc.macro.KEY.d : null;\r\n        this.keys[code] = 0;\r\n    }\r\n\r\n    onKeyDown(event: cc.Event.EventKeyboard) {\r\n        let code = event.keyCode;\r\n        code == cc.macro.KEY.up ? code = cc.macro.KEY.w : null;\r\n        code == cc.macro.KEY.down ? code = cc.macro.KEY.s : null;\r\n        code == cc.macro.KEY.left ? code = cc.macro.KEY.a : null;\r\n        code == cc.macro.KEY.right ? code = cc.macro.KEY.d : null;\r\n        this.keys[code] = 1;\r\n\r\n        // fire\r\n        if(code == cc.macro.KEY.space) {\r\n            Input.instance.fireAction(false, null);\r\n        }\r\n    }\r\n\r\n    updateMove() {\r\n        // check move\r\n        let angle = this.getMoveDirection();\r\n\r\n        if (angle > -1) {\r\n            this.preAngle = angle;\r\n            Input.instance.setMoveDirection(angle);\r\n        } else if (this.preAngle != -1) {        // stop\r\n            Input.instance.setMoveDirection(-1);\r\n            this.preAngle = -1;\r\n        }\r\n    }\r\n\r\n    getMoveDirection(): number {\r\n        let moveDirection = -1;\r\n        if (this.keys[cc.macro.KEY.w]) {\r\n            if (this.keys[cc.macro.KEY.a]) moveDirection = 135;\r\n            else if (this.keys[cc.macro.KEY.d]) moveDirection = 45;\r\n            else moveDirection = 90;\r\n        } else if (this.keys[cc.macro.KEY.d]) {\r\n            if (this.keys[cc.macro.KEY.w]) moveDirection = 45;\r\n            else if (this.keys[cc.macro.KEY.s]) moveDirection = 360 - 45;\r\n            else moveDirection = 0;\r\n        } else if (this.keys[cc.macro.KEY.s]) {\r\n            if (this.keys[cc.macro.KEY.d]) moveDirection = 360 - 45;\r\n            else if (this.keys[cc.macro.KEY.a]) moveDirection = 360 - 135;\r\n            else moveDirection = 360 - 90;\r\n        } else if (this.keys[cc.macro.KEY.a]) {\r\n            if (this.keys[cc.macro.KEY.w]) moveDirection = 135;\r\n            else if (this.keys[cc.macro.KEY.s]) moveDirection = 360 - 135;\r\n            else moveDirection = 180;\r\n        }\r\n        return moveDirection;\r\n    }\r\n}","import MoveControl from \"../move-around-control\";\r\nimport Input from \"./input\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class InputTouch extends cc.Component {\r\n\r\n    @property(MoveControl)\r\n    moveControl: MoveControl = null;\r\n\r\n    @property(MoveControl)\r\n    fireControl: MoveControl = null;\r\n\r\n    private preAngle: number = -1;\r\n\r\n    start() {\r\n        this.fireControl.onMoveEnd = this.fireControlRelease.bind(this);\r\n    }\r\n\r\n    update() {\r\n        if (this.moveControl) {\r\n            let move = this.moveControl.getMoveDelta();\r\n            if (move) {\r\n                let angle = cc.misc.radiansToDegrees(Math.atan2(move.y, move.x));\r\n                if (angle < 0) angle = angle + 360;\r\n                Input.instance.setMoveDirection(angle);\r\n                this.preAngle = angle;\r\n            } else if(this.preAngle != -1) {\r\n                Input.instance.setMoveDirection(-1);\r\n                this.preAngle = -1;\r\n            }\r\n        }\r\n\r\n        if(this.fireControl) {\r\n            let fire = this.fireControl.getMoveDelta();\r\n            Input.instance.setFireTarget(fire);\r\n        }\r\n    }\r\n\r\n    fireControlRelease(cancel: boolean, target: cc.Vec2) {\r\n        Input.instance.fireAction(cancel, target);\r\n    }\r\n}","import { PlayerMoveInput } from \"../player\";\r\nimport EventManager from \"../../core/event-manager\";\r\n\r\nexport default class Input {\r\n\r\n    static EVT_THROW_FIRE = 'fire';\r\n    static EVT_FAST_SPEED = 'fspeed';\r\n\r\n    private static _instance: Input;\r\n    public static get instance() {\r\n        if (!Input._instance) {\r\n            Input._instance = new Input();\r\n        }\r\n        return Input._instance;\r\n    }\r\n\r\n    private _moveDir: number = -1;\r\n    setMoveDirection(angleDeg: number) {\r\n        this._moveDir = Math.round(angleDeg);\r\n    }\r\n\r\n    private moveSeq: number = 0;\r\n    private lastMoveTime: number;\r\n    getMoveData(): PlayerMoveInput {\r\n        let time = Date.now();\r\n        this.lastMoveTime = this.lastMoveTime || time;\r\n        let dt = time - this.lastMoveTime;\r\n        this.lastMoveTime = time;\r\n\r\n        if (this._moveDir >= 0) {\r\n            return {\r\n                time: dt,\r\n                seq: this.moveSeq++,\r\n                dir: this._moveDir,\r\n                speed: 0,           // need to set by player\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    fireAction(cancel: boolean, target: cc.Vec2) {\r\n        EventManager.instance.dispatch(Input.EVT_THROW_FIRE, cancel, target);\r\n    }\r\n\r\n    private fireTarget: cc.Vec2;\r\n    setFireTarget(target: cc.Vec2) {\r\n        this.fireTarget = target;\r\n    }\r\n\r\n    getFireTarget() { return this.fireTarget };\r\n\r\n    private fastSpeedMode: boolean = false;\r\n    setFastSpeedMode(fast: boolean) {\r\n        if (this.fastSpeedMode != fast) {\r\n            this.fastSpeedMode = fast;\r\n            EventManager.instance.dispatch(Input.EVT_FAST_SPEED, fast);\r\n        }\r\n    }\r\n}","// DataView extension to handle int64 / uint64,\r\n// where the actual range is 53-bits integer (a.k.a. safe integer)\r\n\r\nexport function setUint64(view: DataView, offset: number, value: number): void {\r\n  const high = value / 0x1_0000_0000;\r\n  const low = value; // high bits are truncated by DataView\r\n  view.setUint32(offset, high);\r\n  view.setUint32(offset + 4, low);\r\n}\r\n\r\nexport function setInt64(view: DataView, offset: number, value: number): void {\r\n  const high = Math.floor(value / 0x1_0000_0000);\r\n  const low = value; // high bits are truncated by DataView\r\n  view.setUint32(offset, high);\r\n  view.setUint32(offset + 4, low);\r\n}\r\n\r\nexport function getInt64(view: DataView, offset: number) {\r\n  const high = view.getInt32(offset);\r\n  const low = view.getUint32(offset + 4);\r\n  return high * 0x1_0000_0000 + low;\r\n}\r\n\r\nexport function getUint64(view: DataView, offset: number) {\r\n  const high = view.getUint32(offset);\r\n  const low = view.getUint32(offset + 4);\r\n  return high * 0x1_0000_0000 + low;\r\n}\r\n","import Loader from \"../../../core/loader\";\r\nimport GlobalVar from \"../../../core/global-var\";\r\nimport { MatchMakerControl } from \"../../multiplayer/matchmaker-control\";\r\nimport EventManager from \"../../../core/event-manager\";\r\nimport { Room } from \"../../../libs/multiplayer/MpMacher\";\r\nimport { MpCode } from \"../../../libs/multiplayer/ErrorCode\";\r\nimport Popup from \"../../../core/popup\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class JoinTeam extends cc.Component {\r\n\r\n    static EVT_TEAM_JOINED = 'team-join';\r\n\r\n    @property(cc.EditBox)\r\n    teamId: cc.EditBox = null;\r\n\r\n    @property(cc.Button)\r\n    joinButton: cc.Button = null;\r\n\r\n    private matcherCtrl: MatchMakerControl;\r\n\r\n    start () {\r\n        if(!Loader.loaded) return;\r\n        this.matcherCtrl = GlobalVar.instance.get('matcherControl');\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ROOM_JOINED, (room: Room) => {\r\n            cc.log('joined room: ' + JSON.stringify(room));\r\n            EventManager.instance.dispatch(JoinTeam.EVT_TEAM_JOINED, room);\r\n        }, this);\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ERROR, (errorCode: number) => {\r\n            if(errorCode == MpCode.ROOM_NOT_EXIST) {\r\n                Popup.instance.showInfoPopup('Team does not exist');\r\n            } else if(errorCode == MpCode.JOIN_ROOM_FAILED) {\r\n                Popup.instance.showInfoPopup('Can not join room');\r\n            }\r\n        }, this)\r\n    }\r\n\r\n    onButtonJoin() {\r\n        cc.log('join team: ' + this.teamId.string);\r\n        this.matcherCtrl.matchmaker.joinRoom(this.teamId.string);\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n}\r\n","import { RoomInfo } from \"../../../libs/multiplayer/MpMacher\";\r\nimport EventManager from \"../../../core/event-manager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LiveTeamItem extends cc.Component {\r\n\r\n    static EVT_JOIN_ROOM = 'live_join_room';\r\n\r\n    @property(cc.Label)\r\n    roomName: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    playerCount: cc.Label = null;\r\n\r\n    private roomId: string;\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    onButtonJoin() {\r\n        EventManager.instance.dispatch(LiveTeamItem.EVT_JOIN_ROOM, this.roomId);\r\n    }\r\n\r\n    setData(room: RoomInfo) {\r\n        this.roomId = room.id;\r\n        this.roomName.string = room.id;\r\n        this.playerCount.string = \"\" + room.current + \"/\" + room.max;\r\n    }\r\n}\r\n","import LiveTeamItem from \"./live-team-item\";\r\nimport { MatchMakerControl } from \"../../multiplayer/matchmaker-control\";\r\nimport EventManager from \"../../../core/event-manager\";\r\nimport { RoomInfo } from \"../../../libs/multiplayer/MpMacher\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LiveTeam extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    content: cc.Node = null;\r\n\r\n    private templateItem: LiveTeamItem;\r\n    private matcher: MatchMakerControl;\r\n\r\n    onLoad() {\r\n        this.templateItem = this.content.getComponentInChildren(LiveTeamItem);\r\n        // clean content\r\n        this.content.removeAllChildren();\r\n    }\r\n\r\n    start() {\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ROOM_RESULT, (rooms: RoomInfo[]) => {\r\n            cc.log('room result: ' + JSON.stringify(rooms))\r\n            this.content.removeAllChildren();\r\n            rooms.forEach(room => {\r\n                let node = cc.instantiate(this.templateItem.node);\r\n                node.getComponent(LiveTeamItem).setData(room);\r\n                this.content.addChild(node);\r\n            })\r\n        }, this)\r\n\r\n        EventManager.instance.register(LiveTeamItem.EVT_JOIN_ROOM, roomId => {\r\n            this.matcher.matchmaker.joinRoom(roomId);\r\n        }, this)\r\n    }\r\n\r\n    onButtonRefresh() {\r\n        this.matcher.matchmaker.getRooms();\r\n    }\r\n\r\n    setMatcher(matcher: MatchMakerControl) {\r\n        this.matcher = matcher;\r\n    }\r\n\r\n    reset() {\r\n        this.content.removeAllChildren();\r\n        this.onButtonRefresh();\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n}\r\n","import GlobalVar from \"./global-var\";\r\nimport PlayerRef from \"../player-ref\";\r\nimport EventManager from \"./event-manager\";\r\nimport SoundManager from \"./sound-manager\";\r\nimport Localization from \"./localization\";\r\n\r\n// this will load loader.scene to init all our needed for game\r\n// this script need attach to each scene 1 time (in canvas obj)\r\n// we can also attach more manager to 'loader' scene then listen to it init complete\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Loader extends cc.Component {\r\n\r\n    public static loaded: boolean = false;\r\n\r\n    private nextScene = \"main-menu\";\r\n\r\n    @property\r\n    targetLoad: string = \"\";\r\n\r\n    onLoad() {        \r\n        // check if loader is load before\r\n        if(Loader.loaded == false) {            \r\n            if(this.getCurrentSceneName() != 'loader') {\r\n                let nextScene = this.targetLoad != \"\" ? this.targetLoad : this.getCurrentSceneName();\r\n                GlobalVar.instance.set('loader-nextScene', nextScene);\r\n                cc.director.loadScene('loader');\r\n            } else {\r\n                Loader.loaded = true;\r\n                let next = GlobalVar.instance.get('loader-nextScene', true);\r\n                this.nextScene = next != null ? next : this.nextScene;\r\n            }\r\n        }\r\n    }\r\n\r\n    start() {\r\n        if(this.getCurrentSceneName() == 'loader') {\r\n            this.initLoader();\r\n        }\r\n    }\r\n\r\n    // lib need to load before game\r\n    private _loadInstances = {\r\n        \"PlayerRef\": false,\r\n        \"Sound\": false,\r\n    }\r\n    private initLoader() {\r\n        // multiplay\r\n        window.GAME_SERVER = false;     \r\n        // listen on manager init done\r\n        EventManager.instance.registerOnce('PlayerRef-init', ()=>{\r\n            this._loadInstances[\"PlayerRef\"] = true;\r\n        }, this)\r\n        EventManager.instance.registerOnce('Sound_initialized', ()=>{\r\n            this._loadInstances[\"Sound\"] = true;\r\n        }, this)\r\n\r\n        // init other manager\r\n        PlayerRef.current; \r\n        SoundManager.instance.init();\r\n        if (Localization.getCurrentLanguage() == null) {\r\n            Localization.setLanguage(cc.sys.language);\r\n        }\r\n    }\r\n\r\n    private _loadGame = false;\r\n    update(dt) {\r\n        if(PlayerRef.current.initialized) this._loadInstances[\"PlayerRef\"] = true;\r\n        \r\n        let allLoaded = true;\r\n        for(let inst in this._loadInstances) {\r\n            if(this._loadInstances[inst] == false) {\r\n                allLoaded = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(allLoaded && !this._loadGame) {\r\n            // start next scene when all complete\r\n            this._loadGame = true;\r\n            cc.director.loadScene(this.nextScene);\r\n        }\r\n    }\r\n\r\n    private getCurrentSceneName(): string {\r\n        let scene: string = \"\";\r\n        (cc.game as any)._sceneInfos.forEach(element => {\r\n            if(element.uuid == (cc.director as any)._scene._id) {\r\n                scene = element.url;\r\n                scene = scene.substring(scene.lastIndexOf('/')+1).match(/[^\\.]+/)[0]\r\n            }\r\n        });\r\n\r\n        return scene;\r\n    }\r\n}","import { MatchMakerControl } from \"../../multiplayer/matchmaker-control\";\r\nimport GlobalVar from \"../../../core/global-var\";\r\nimport EventManager from \"../../../core/event-manager\";\r\nimport { Room, PlayType } from \"../../../libs/multiplayer/MpMacher\";\r\nimport NewTeam from \"./new-team\";\r\nimport JoinTeam from \"./join-team\";\r\nimport LiveTeam from \"./live-team\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Lobby extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    mainNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    joinButtonNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    newTeamNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    joinTeamNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    liveTeamNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    backNode: cc.Node = null;\r\n\r\n    private pageStack: { in: cc.Node, out: cc.Node }[] = [];\r\n    private matcherCtrl: MatchMakerControl;\r\n    private currentPage: cc.Node;\r\n\r\n    start() {\r\n        this.newTeamNode.x = -1000;\r\n        this.joinTeamNode.x = -1000;\r\n        this.liveTeamNode.x = -1000;\r\n        this.backNode.active = false;\r\n        this.currentPage = this.mainNode;\r\n        this.matcherCtrl = GlobalVar.instance.get('matcherControl');\r\n        this.newTeamNode.getComponent(NewTeam).setLobby(this);\r\n        this.liveTeamNode.getComponent(LiveTeam).setMatcher(this.matcherCtrl);\r\n        // register matcher listener\r\n\r\n        // child listener\r\n        EventManager.instance.register(JoinTeam.EVT_TEAM_JOINED, (room: Room) => {\r\n            if (this.currentPage == this.liveTeamNode) {\r\n                this.pushPage(this.newTeamNode, this.liveTeamNode);\r\n            } else {\r\n                this.pushPage(this.newTeamNode, this.mainNode);\r\n            }\r\n            this.newTeamNode.getComponent(NewTeam).reset();\r\n            this.newTeamNode.getComponent(NewTeam).setRoomInfo(room);\r\n        }, this);\r\n    }\r\n\r\n    onButtonNewTeam() {\r\n        this.pushPage(this.newTeamNode, this.mainNode);\r\n        this.newTeamNode.getComponent(NewTeam).reset();\r\n        this.matcherCtrl.matchmaker.createRoom({ max: 3, play: PlayType.PAIR });\r\n    }\r\n\r\n    onButtonJoinTeam() {\r\n        this.pushPage(this.joinTeamNode, this.joinButtonNode);\r\n        this.joinTeamNode.getComponentInChildren(cc.EditBox).setFocus();\r\n    }\r\n\r\n    onButtonLiveTeam() {\r\n        this.pushPage(this.liveTeamNode, this.mainNode);\r\n    }\r\n\r\n    onButtonBackPage() {\r\n        this.popPage();\r\n        if (this.pageStack.length == 0) {\r\n            this.backNode.active = false;\r\n        }\r\n    }\r\n\r\n    private pushPage(page: cc.Node, replacer: cc.Node) {\r\n        this.pageStack.push({ in: page, out: replacer });\r\n        this.runInOutAction(replacer, 'out', 'right');\r\n        this.runInOutAction(page, 'in', null, 0.8);\r\n        this.backNode.active = true;\r\n    }\r\n\r\n    private popPage() {\r\n        if (this.pageStack.length > 0) {\r\n            let stack = this.pageStack.pop();\r\n            if (stack.in == this.newTeamNode) {      // back on new team page\r\n                this.matcherCtrl.matchmaker.leaveRoom();\r\n            }\r\n            this.runInOutAction(stack.in, 'out', 'left');\r\n            this.runInOutAction(stack.out, 'in', null, 0.8);            \r\n        }\r\n    }\r\n\r\n    private runInOutAction(node: cc.Node, state: string, to?: string, time: number = 0.5) {\r\n        if (state == 'in') {\r\n            this.currentPage = node;\r\n            node.runAction(cc.moveTo(time, 0, node.y).easing(cc.easeBackInOut()));\r\n            // check for join input\r\n            if (node == this.mainNode && this.joinTeamNode.x >= 100) {\r\n                this.runInOutAction(this.joinTeamNode, state, to, time);\r\n            } else if (node == this.liveTeamNode) {\r\n                this.liveTeamNode.getComponent(LiveTeam).reset();\r\n            }\r\n        } else if (state == 'out') {\r\n            if (to == 'left') {\r\n                node.runAction(cc.moveTo(time, -1000, node.y).easing(cc.easeBackInOut()));\r\n                // check for join input\r\n                if (node == this.mainNode && Math.abs(this.joinTeamNode.x) <= 1) {\r\n                    this.runInOutAction(this.joinTeamNode, state, to, time);\r\n                }\r\n            } else if (to == 'right') {\r\n                node.runAction(cc.moveTo(time, 1000, node.y).easing(cc.easeBackInOut()));\r\n                // check for join input\r\n                if (node == this.mainNode && Math.abs(this.joinTeamNode.x) <= 1) {\r\n                    this.runInOutAction(this.joinTeamNode, state, to, time);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onButtonBackMM() {\r\n        this.matcherCtrl.matchmaker.disconnect();\r\n        cc.director.loadScene('main-menu');\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n}\r\n","// helper class to local text\r\n\r\nlet i18n = require('i18n');\r\nexport default class Localization {\r\n\r\n    /**\r\n     * Get translate text for key\r\n     * @param key text key\r\n     */\r\n    static get(key: string): string {\r\n        let text = i18n.t(key);\r\n        if(text == \"\") text = \"N/A\";\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Set game language to new lang\r\n     * It also set the save lang to new lang if valid\r\n     * @param lang \r\n     */\r\n    static setLanguage(lang: string) {\r\n        if(i18n.init(lang)) {\r\n            // reload localize item on screen\r\n            let rootNodes = cc.director.getScene().children;\r\n            // walk all nodes with localize label and update\r\n            let allLocalizedLabels = [];\r\n            for (let i = 0; i < rootNodes.length; ++i) {\r\n                let labels = rootNodes[i].getComponentsInChildren('LabelLocalized');\r\n                Array.prototype.push.apply(allLocalizedLabels, labels);\r\n            }\r\n            for (let i = 0; i < allLocalizedLabels.length; ++i) {\r\n                let label = allLocalizedLabels[i];\r\n                label.updateLabel();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the current save language\r\n     */\r\n    static getCurrentLanguage() {\r\n        return i18n.getSaveLang();\r\n    }\r\n}","import Config from \"../config\";\r\n\r\nexport default class LocalStorage {\r\n    /**\r\n     * set local storage value\r\n     * @param key key save\r\n     * @param value value to save\r\n     */\r\n    static setItem(key: string, value: string) {\r\n        cc.sys.localStorage.setItem(this._key(key), value);\r\n    }\r\n\r\n    /**\r\n     * get data from local storage\r\n     * @param key key save\r\n     * @param _default default value if it not set\r\n     */\r\n    static getItem(key: string, _default?: string): string {\r\n        let val = cc.sys.localStorage.getItem(this._key(key));\r\n        return val || _default;\r\n    }\r\n\r\n    /**\r\n     * remove a save value from local storage\r\n     * @param key key save\r\n     */\r\n    static removeItem(key: string) {\r\n        cc.sys.localStorage.removeItem(this._key(key));\r\n    }\r\n\r\n    private static _key(key: string): string {\r\n        return Config.PROJECT_ID + key;\r\n    }\r\n}","import Popup from \"../../core/popup\";\r\nimport PlayerRef from \"../../player-ref\";\r\nimport { MatchMakerControl } from \"../multiplayer/matchmaker-control\";\r\nimport EventManager from \"../../core/event-manager\";\r\nimport GlobalVar from \"../../core/global-var\";\r\nimport { MpCode } from \"../../libs/multiplayer/ErrorCode\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainMenu extends cc.Component {\r\n\r\n    @property(cc.EditBox)\r\n    playerName: cc.EditBox = null;\r\n\r\n    @property(cc.Button)\r\n    editNameButton: cc.Button = null;\r\n\r\n    @property(cc.Sprite)\r\n    playerDisplay: cc.Sprite = null;\r\n\r\n    @property([cc.SpriteFrame])\r\n    playerPols: cc.SpriteFrame[] = [];\r\n    @property([cc.SpriteFrame])\r\n    playerPolsMask: cc.SpriteFrame[] = [];\r\n\r\n    @property([cc.Node])\r\n    playerCols: cc.Node[] = []\r\n\r\n    private matchmakerCtrl: MatchMakerControl;\r\n    private playerColor: cc.Color[] = [];\r\n    private currentPol: number;\r\n    private currentCol: number;\r\n    private playType = 'quick';\r\n\r\n    onLoad() {\r\n        this.playerName.string = PlayerRef.current.name;\r\n\r\n        this.playerCols.forEach(node => {\r\n            this.playerColor.push(node.color);\r\n        })\r\n\r\n        this.currentPol = PlayerRef.current.displayIdx;\r\n        if (this.currentPol == -1) { // not set\r\n            this.currentPol = Math.floor(Math.random() * this.playerPols.length);\r\n            PlayerRef.current.displayIdx = this.currentPol;\r\n        }\r\n\r\n        this.currentCol = PlayerRef.current.displayColor;\r\n        if (this.currentCol == -1) { // not set\r\n            this.currentCol = Math.floor(Math.random() * this.playerCols.length);\r\n            PlayerRef.current.displayColor = this.currentCol;\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.matchmakerCtrl = new MatchMakerControl();\r\n\r\n        this.updatePlayerDisplay();\r\n\r\n        // store player display in global\r\n        GlobalVar.instance.set('player-pols', this.playerPols);\r\n        GlobalVar.instance.set('player-cols', this.playerColor);\r\n        GlobalVar.instance.set('player-pols-m', this.playerPolsMask);\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ERROR, (errorCode: number) => {\r\n            Popup.instance.hideWaitingPopup();\r\n            if (errorCode == MpCode.START_GAME_FAILED) {\r\n                this.matchmakerCtrl.matchmaker.disconnect();\r\n            }\r\n            else {\r\n                Popup.instance.showInfoPopup(\"Network error: \" + errorCode);\r\n            }\r\n        }, this)\r\n        EventManager.instance.register(MatchMakerControl.MAKER_CONNECTED, (id: string, name: string) => {\r\n            if (this.playType == 'quick') {\r\n                Popup.instance.showWaitingPopup('waiting match...', true, () => {\r\n                    this.matchmakerCtrl.matchmaker.leaveRoom();\r\n                    this.matchmakerCtrl.matchmaker.disconnect();\r\n                });\r\n                this.matchmakerCtrl.matchmaker.quickPlay({ max: 6 });\r\n            } else if(this.playType == 'team') {\r\n                GlobalVar.instance.set('matcherControl', this.matchmakerCtrl);\r\n                cc.director.loadScene('team');\r\n            }\r\n        }, this)\r\n        EventManager.instance.register(MatchMakerControl.MAKER_GAME_STARTED, (connection) => {\r\n            Popup.instance.hideWaitingPopup();\r\n            cc.log('game start')\r\n            GlobalVar.instance.set('connection', connection);\r\n            cc.director.loadScene('game');\r\n        }, this)\r\n    }\r\n\r\n    onButtonQuickPlay() {\r\n        this.playType = 'quick';\r\n        Popup.instance.showWaitingPopup('connecting...');\r\n        this.matchmakerCtrl.connect({ p: this.currentPol, c: this.currentCol });\r\n    }\r\n\r\n    onButtonTeamPlay() {\r\n        this.playType = 'team';\r\n        Popup.instance.showWaitingPopup('connecting...');\r\n        this.matchmakerCtrl.connect({ p: this.currentPol, c: this.currentCol });\r\n    }\r\n\r\n    onEditPlayerName(target, action: string) {\r\n        if (action == 'begin') {\r\n            this.editNameButton.node.runAction(\r\n                cc.moveBy(0.5, 57, 0)\r\n            )\r\n        }\r\n        else if (action == 'end') {\r\n            this.editNameButton.node.runAction(\r\n                cc.moveBy(0.5, -57, 0)\r\n            )\r\n            this.onButtonEditPlayerName();\r\n        }\r\n        else if (action == 'return') {\r\n            this.onButtonEditPlayerName();\r\n        }\r\n    }\r\n\r\n    onButtonEditPlayerName() {\r\n        PlayerRef.current.name = this.playerName.string;\r\n    }\r\n\r\n    onButtonSelectPol(event, step: string) {\r\n        // cc.log(' step: ' + step);\r\n        this.currentPol += +step;\r\n        if (this.currentPol < 0) this.currentPol = this.playerPols.length - 1;\r\n        if (this.currentPol >= this.playerPols.length) this.currentPol = 0;\r\n        this.updatePlayerDisplay();\r\n        PlayerRef.current.displayIdx = this.currentPol;\r\n    }\r\n\r\n    onButtonSelectCol(event, idx: string) {\r\n        this.currentCol = +idx;\r\n        this.updatePlayerDisplay();\r\n        PlayerRef.current.displayColor = this.currentCol;\r\n    }\r\n\r\n    private updatePlayerDisplay() {\r\n        this.playerDisplay.spriteFrame = this.playerPols[this.currentPol];\r\n        this.playerDisplay.node.color = this.playerColor[this.currentCol];\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\n// use to scale the map to fix the screen\r\n\r\n@ccclass\r\nexport default class MapScale extends cc.Component {\r\n    private widget: cc.Widget;\r\n    private target: cc.Node;\r\n\r\n    onLoad () {\r\n        this.widget = this.getComponent(cc.Widget);\r\n        this.target = this.widget.target || this.node.parent;\r\n        this.target.on(cc.Node.EventType.SIZE_CHANGED, this.onTargetSizeChange, this);   // target align size change\r\n        this.onTargetSizeChange();\r\n    }\r\n\r\n    onTargetSizeChange() {\r\n        this.widget.updateAlignment();\r\n        // cc.log(`target size change mine: ${this.node.width} ${this.node.height} target: ${this.target.width} ${this.target.height}` )\r\n        let rx = this.target.width / this.node.width;\r\n        let ry = this.target.height / this.node.height;\r\n        let r = Math.min(rx, ry);\r\n        // cc.log('select ratio scale: ' + r);\r\n        this.node.setScale(r);\r\n    }\r\n\r\n}","import { MatchMaker, MMListener, Room, Player, InviteInfo, RoomInfo, PlayerInfo, IdlePlayerInfo, PlayerStatusInfo } from \"../../libs/multiplayer/MpMacher\";\r\nimport { MpController } from \"../../libs/multiplayer/MpController\";\r\nimport Config from \"../../config\";\r\nimport PlayerRef from \"../../player-ref\";\r\nimport EventManager from \"../../core/event-manager\";\r\n\r\nexport class MatchMakerControl {\r\n\r\n    static MAKER_ERROR = \"_mm_error\";\r\n    static MAKER_CONNECTED = \"_mm_connected\";\r\n    static MAKER_ROOM_CREATED = \"_mm_room_created\";\r\n    static MAKER_ROOM_JOINED = \"_mm_room_joined\";\r\n    static MAKER_ROOM_PLAYER_JOINED = \"_mm_room_player_joined\";\r\n    static MAKER_ROOM_PLAYER_LEFT = \"_mm_room_player_left\";\r\n    static MAKER_ROOM_MASTER_CHANGE = \"_mm_room_master_change\";\r\n    static MAKER_PLAYER_KICKED = \"_mm_player_kicked\";\r\n    static MAKER_PLAYER_INVITED = \"_mm_player_invited\";\r\n    static MAKER_ROOM_MESSAGE = \"_mm_room_msg\";\r\n    static MAKER_PLAYER_STATUS_CHANGE = \"_mm_room_player_status\";\r\n    static MAKER_ROOM_RESULT = \"_mm_room_result\";\r\n    static MAKER_PLAYER_RESULT = \"_mm_player_result\";\r\n    static MAKER_QUICK_ROOM_JOINED = \"_mm_quick_room_joined\";\r\n    static MAKER_IDLE_PLAYER_CHANGE = \"_mm_idle_player_change\";\r\n    static MAKER_GAME_STARTED = \"_mm_game_started\";\r\n    static MAKER_GAME_STARTING = \"_mm_game_starting\";\r\n    static MAKER_GAME_CANCEL = \"_mm_game_cancel\";\r\n\r\n\r\n    private serverUrl = 'http://35.201.210.174:3333';\r\n    matchmaker: MatchMaker;\r\n\r\n    private matchmakerListen: MMListener = {\r\n        onError(errorCode: number) {\r\n            cc.error('Matchmaker error: ' + errorCode);\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ERROR, errorCode);\r\n        },\r\n        onConnected(id: string, name: string) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_CONNECTED, id, name);\r\n        },\r\n        onRoomCreated(room: Room) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ROOM_CREATED, room);\r\n        },\r\n        onRoomJoined(room: Room) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ROOM_JOINED, room);\r\n        },\r\n        onRoomPlayerJoined(player: Player) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ROOM_PLAYER_JOINED, player);\r\n        },\r\n        onRoomPlayerLeft(player: Player) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ROOM_PLAYER_LEFT, player);\r\n        },\r\n        onPlayerKicked() {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_PLAYER_KICKED);\r\n        },\r\n        onPlayerInvite(info: InviteInfo) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_PLAYER_INVITED, info);\r\n        },\r\n        onRoomMessage(message: any) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ROOM_MESSAGE, message);\r\n        },\r\n        onPlayerStatusChange(status: PlayerStatusInfo) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_PLAYER_STATUS_CHANGE, status);\r\n        },\r\n        onRoomMasterChange(newMasterId: string) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ROOM_MASTER_CHANGE, newMasterId);\r\n        },\r\n        onRoomsResult(rooms: RoomInfo[]) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_ROOM_RESULT, rooms);\r\n        },\r\n        onPlayersResult(players: PlayerInfo[]) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_PLAYER_RESULT, players);\r\n        },\r\n        onQuickRoomJoined() {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_QUICK_ROOM_JOINED);\r\n        },\r\n        onGameStarted(controller: MpController) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_GAME_STARTED, controller);\r\n        },\r\n        onGameStarting() {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_GAME_STARTING);\r\n        },\r\n        onGameCancel() {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_GAME_CANCEL);\r\n        },\r\n        onIdlePlayersChange(info: IdlePlayerInfo[]) {\r\n            EventManager.instance.dispatch(MatchMakerControl.MAKER_IDLE_PLAYER_CHANGE, info);\r\n        },\r\n    }\r\n\r\n    connect(data: any) {\r\n        this.matchmaker = new MatchMaker();\r\n        this.matchmaker.listener = this.matchmakerListen;\r\n        this.matchmaker.connect(this.serverUrl, Config.PROJECT_ID, PlayerRef.current.name, data);\r\n    }\r\n}","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MoveControl extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    moveSprite: cc.Sprite = null;\r\n\r\n    @property(cc.Sprite)\r\n    aroundSprite: cc.Sprite = null;\r\n\r\n    @property()\r\n    maxDistance: number = 120;\r\n\r\n    // callback when move end\r\n    onMoveEnd: (cancle: boolean, target: cc.Vec2) => void = () => { };\r\n\r\n    private basePos: cc.Vec2;\r\n    private basePosWorld: cc.Vec2;\r\n    private moveData: cc.Vec2 = cc.Vec2.ZERO;\r\n\r\n    start() {\r\n        this.basePos = this.moveSprite.node.position;\r\n        this.basePosWorld = this.moveSprite.node.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n        this.aroundSprite.enabled = false;\r\n        this.node.opacity = 100;\r\n\r\n        this.moveSprite.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.moveSprite.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.moveSprite.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.moveSprite.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n    }\r\n\r\n    getMoveDelta(): cc.Vec2 | null {\r\n        if (this.moveData.x == 0 && this.moveData.y == 0) return null;\r\n        return this.moveData;\r\n    }\r\n\r\n    private onTouchStart(event: cc.Event.EventTouch) {\r\n        this.node.opacity = 255;\r\n        this.aroundSprite.enabled = true;\r\n        this.moveSprite.node.runAction(cc.scaleTo(0.3, 1.2));\r\n    }\r\n\r\n    private onTouchMove(event: cc.Event.EventTouch) {\r\n        let pos = event.getLocation();\r\n        let delta = pos.sub(this.basePosWorld);\r\n        let angel = Math.atan2(delta.y, delta.x);\r\n        let tx = Math.cos(angel) * Math.min(this.maxDistance, Math.abs(delta.x));\r\n        let ty = Math.sin(angel) * Math.min(this.maxDistance, Math.abs(delta.y));\r\n        let p = cc.v2(tx, ty).sub(this.basePos);\r\n        this.moveData = cc.v2(p.x / this.maxDistance, p.y / this.maxDistance);\r\n        this.moveSprite.node.setPosition(tx, ty);\r\n    }\r\n\r\n    private endMove() {\r\n        this.aroundSprite.enabled = false;\r\n        this.node.opacity = 100;\r\n        this.moveSprite.node.setPosition(this.basePos);\r\n        this.moveData = cc.v2(0, 0);\r\n        this.moveSprite.node.runAction(cc.scaleTo(0.2, 1.0));\r\n    }\r\n\r\n    private onTouchEnd(event: cc.Event.EventTouch) {\r\n        let target = this.moveData;\r\n        let cancel = target.magSqr() <= 0.15 * 0.15;\r\n        this.endMove();\r\n        this.onMoveEnd(cancel, target);\r\n    }\r\n\r\n    // private onTouchCancel(event: cc.Event.EventTouch) {\r\n    //     let target = this.moveData;\r\n    //     this.endMove();\r\n    //     this.onMoveEnd(true, target);\r\n    // }\r\n}","import { Player } from \"../../../libs/multiplayer/MpMacher\";\r\nimport EventManager from \"../../../core/event-manager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewTeamItem extends cc.Component {\r\n\r\n    static EVT_KICK_PLAYER = 'kick-player';\r\n\r\n    @property(cc.Label)\r\n    playerName: cc.Label = null;\r\n\r\n    @property(cc.Node)\r\n    coverBackground: cc.Node = null;\r\n\r\n    @property(cc.Sprite)\r\n    readyStatus: cc.Sprite = null;\r\n\r\n    @property(cc.Button)\r\n    kickoutButton: cc.Button = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    readyFrame: cc.SpriteFrame = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    waitFrame: cc.SpriteFrame = null;\r\n    \r\n    private playerId: string = '';\r\n\r\n    hasPlayer = false;\r\n    ready = false;\r\n\r\n    onButonKick() {\r\n        EventManager.instance.dispatch(NewTeamItem.EVT_KICK_PLAYER, this.playerId);\r\n    }\r\n\r\n    playerJoin(player: Player) {\r\n        this.hasPlayer = true;\r\n        this.playerId = player.id;\r\n        this.playerName.string = player.name;\r\n        this.setReady(player.ready);\r\n        this.coverBackground.runAction(cc.moveTo(0.5, 0, this.coverBackground.y));\r\n    }\r\n\r\n    playerLeft() {\r\n        this.hasPlayer = false;\r\n        this.playerId = '';\r\n        this.playerName.string = 'None';        \r\n        this.readyStatus.node.active = false;\r\n        this.kickoutButton.node.active = false;\r\n        this.setReady(false);\r\n        this.coverBackground.runAction(cc.moveTo(0.5, -this.coverBackground.width, this.coverBackground.y));\r\n    }\r\n\r\n    reset() {        \r\n        this.playerName.string = 'None';\r\n        this.readyStatus.node.active = false;\r\n        this.kickoutButton.node.active = false;\r\n        this.setReady(false);\r\n        this.hasPlayer = false;\r\n        this.coverBackground.x = -this.coverBackground.width;\r\n    }\r\n\r\n    setMasterView() {\r\n        if(!this.hasPlayer) return;\r\n        this.kickoutButton.node.y = 22;\r\n        this.readyStatus.node.y = -22;\r\n        this.readyStatus.node.active = true;\r\n        this.kickoutButton.node.active = true;\r\n    }\r\n\r\n    setNormalView() {\r\n        if(!this.hasPlayer) return;\r\n        this.readyStatus.node.y = 0;\r\n        this.readyStatus.node.active = true;\r\n    }\r\n\r\n    setReady(ready?: boolean) {\r\n        if(!this.hasPlayer) return;\r\n\r\n        this.ready = ready != null ? ready : !this.ready;\r\n        if(this.ready) {\r\n            this.readyStatus.spriteFrame = this.readyFrame;\r\n        } else {\r\n            this.readyStatus.spriteFrame = this.waitFrame;\r\n        }\r\n    }\r\n}\r\n","import NewTeamItem from \"./new-team-item\";\r\nimport { MatchMakerControl } from \"../../multiplayer/matchmaker-control\";\r\nimport GlobalVar from \"../../../core/global-var\";\r\nimport EventManager from \"../../../core/event-manager\";\r\nimport { Room, Player, PlayerStatusInfo } from \"../../../libs/multiplayer/MpMacher\";\r\nimport Loader from \"../../../core/loader\";\r\nimport Popup from \"../../../core/popup\";\r\nimport Lobby from \"./lobby\";\r\nimport { MpCode } from \"../../../libs/multiplayer/ErrorCode\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewTeam extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    title: cc.Label = null;\r\n\r\n    @property(cc.Button)\r\n    readyButton: cc.Button = null;\r\n\r\n    @property(cc.Button)\r\n    startButton: cc.Button = null;\r\n\r\n    @property([NewTeamItem])\r\n    teamSlots: NewTeamItem[] = [];\r\n\r\n    private matcherCtrl: MatchMakerControl;\r\n    private playerSlots: { [key: string]: NewTeamItem } = {};\r\n    private myPlayerId: string;\r\n    private masterPlayerId: string;\r\n    private isMaster = false;\r\n    private lobby: Lobby;\r\n\r\n    start() {\r\n        if (!Loader.loaded) return;\r\n        this.matcherCtrl = GlobalVar.instance.get('matcherControl');\r\n        this.myPlayerId = this.matcherCtrl.matchmaker.localPlayer.id;\r\n        // register matcher listener\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ROOM_CREATED, (room: Room) => {\r\n            // cc.log('room create: ' + JSON.stringify(room))\r\n            this.setRoomInfo(room);\r\n        }, this);\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ROOM_PLAYER_JOINED, (player: Player) => {\r\n            if (!this.playerSlots[player.id]) {\r\n                this.playerSlots[player.id] = this.teamSlots[player.slot];\r\n                this.teamSlots[player.slot].playerJoin(player);\r\n                this.updateMasterView();\r\n                this.checkStartReady();\r\n            } else {\r\n                cc.warn('Slot not empty')\r\n            }\r\n        }, this)\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ROOM_PLAYER_LEFT, (player: Player) => {\r\n            this.playerSlots[player.id].playerLeft();\r\n            delete this.playerSlots[player.id];\r\n            this.checkStartReady();\r\n        }, this)\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_PLAYER_STATUS_CHANGE, (status: PlayerStatusInfo) => {\r\n            // cc.log('player status change: ' + JSON.stringify(status));\r\n            this.playerSlots[status.id].setReady(status.ready);\r\n            this.checkStartReady();\r\n        }, this)\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_PLAYER_KICKED, () => {\r\n            Popup.instance.showInfoPopup('You has been kicked out!');\r\n            this.lobby.onButtonBackPage();\r\n        })\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ROOM_MASTER_CHANGE, masterId => {\r\n            cc.log('master room chagne to: ' + masterId);\r\n            this.masterPlayerId = masterId;\r\n            if (this.myPlayerId === masterId) {\r\n                this.isMaster = true;\r\n            }\r\n            this.updateMasterView();\r\n        })\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_GAME_STARTED, (connection) => {\r\n            cc.log('game start')\r\n            GlobalVar.instance.set('connection', connection);\r\n            cc.director.loadScene('game', () => { Popup.instance.hideWaitingPopup(); });\r\n        }, this)\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_GAME_STARTING, () => {\r\n            Popup.instance.showWaitingPopup(\"Starting game\", true, () => {\r\n                this.matcherCtrl.matchmaker.cancelPlay();\r\n            });\r\n        }, this)\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_GAME_CANCEL, () => {\r\n            Popup.instance.hideWaitingPopup();\r\n        }, this)\r\n\r\n        EventManager.instance.register(MatchMakerControl.MAKER_ERROR, (errorCode: number) => {\r\n            if(errorCode == MpCode.START_GAME_FAILED) {\r\n                Popup.instance.hideWaitingPopup();\r\n                this.lobby.onButtonBackPage();\r\n            }\r\n        }, this)\r\n\r\n        EventManager.instance.register(NewTeamItem.EVT_KICK_PLAYER, (playerId: string) => {\r\n            if (this.playerSlots[playerId]) {\r\n                if (this.isMaster) {\r\n                    this.matcherCtrl.matchmaker.kickPlayer(playerId);\r\n                } else {\r\n                    cc.warn('Not permit permission')\r\n                }\r\n            } else {\r\n                cc.warn('Invalid player at slot');\r\n            }\r\n        })\r\n\r\n        this.reset();\r\n    }\r\n\r\n    setLobby(lobby) {\r\n        this.lobby = lobby;\r\n    }\r\n\r\n    setRoomInfo(room: Room) {\r\n        this.title.string = 'Team ' + room.id;\r\n        this.initPlayers(room.players);\r\n    }\r\n\r\n    onButtonReady() {\r\n        this.playerSlots[this.myPlayerId].setReady();\r\n        this.checkStartReady();\r\n        // send to room\r\n        this.matcherCtrl.matchmaker.setReady(this.playerSlots[this.myPlayerId].ready);\r\n    }\r\n\r\n    onButtonStart() {\r\n        if (!this.isMaster) return;\r\n        cc.log('start game')\r\n        if (this.isMaster) {\r\n            this.matcherCtrl.matchmaker.startGame();\r\n        }\r\n    }\r\n\r\n    initPlayers(players: Player[]) {\r\n        players.forEach(player => {\r\n            this.teamSlots[player.slot].playerJoin(player);\r\n            if (player.master) {\r\n                this.masterPlayerId = player.id;\r\n                if (this.myPlayerId === player.id) {\r\n                    this.isMaster = true;\r\n                }\r\n            }\r\n            this.playerSlots[player.id] = this.teamSlots[player.slot];\r\n        })\r\n\r\n        this.updateMasterView();\r\n    }\r\n\r\n    updateMasterView() {\r\n        if (this.isMaster) {\r\n            this.setMasterView();\r\n        } else {\r\n            this.setNormalView();\r\n        }\r\n    }\r\n\r\n    setMasterView() {\r\n        cc.log('set master view')\r\n        this.readyButton.node.active = true;\r\n        this.startButton.node.active = true;\r\n        this.readyButton.node.x = -91;\r\n\r\n        for (let id in this.playerSlots) {\r\n            id === this.myPlayerId ? this.playerSlots[id].setNormalView() : this.playerSlots[id].setMasterView();\r\n        }\r\n    }\r\n\r\n    setNormalView() {\r\n        cc.log('set normal view')\r\n        this.readyButton.node.active = true;\r\n        this.readyButton.node.x = 0;\r\n        for (let id in this.playerSlots) {\r\n            this.playerSlots[id].setNormalView();\r\n        }\r\n    }\r\n\r\n    checkStartReady() {\r\n        if (this.isMaster) {\r\n            let allReady = true;\r\n            for (let id in this.playerSlots) {\r\n                if (!this.playerSlots[id].ready) {\r\n                    allReady = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (allReady) {\r\n                this.startButton.interactable = true;\r\n            } else {\r\n                this.startButton.interactable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset when create\r\n    reset() {\r\n        this.title.string = 'Team';\r\n        this.teamSlots.forEach(slot => {\r\n            slot.reset();\r\n        })\r\n        this.playerSlots = {};\r\n        this.isMaster = false;\r\n        this.masterPlayerId = null;\r\n        this.readyButton.node.active = false;\r\n        this.startButton.node.active = false;\r\n        this.startButton.interactable = false;\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this)\r\n    }\r\n}\r\n","\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PathVisual extends cc.Component {\r\n\r\n    @property(cc.SpriteFrame)\r\n    pathSeg: cc.SpriteFrame = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    pathEnd: cc.SpriteFrame = null;\r\n\r\n    maxRange: number = 500;\r\n\r\n    private segNodes: cc.Node[] = [];\r\n    private bezier: BezierPath;\r\n\r\n    maxSeg = 15;\r\n    static controlPointAngle = 60;\r\n\r\n    start() {\r\n        // segs node\r\n        for (let i = 0; i < this.maxSeg; i++) {\r\n            let node = new cc.Node('seg');\r\n            node.addComponent(cc.Sprite).spriteFrame = this.pathSeg;\r\n            this.node.addChild(node);\r\n            this.segNodes.push(node);\r\n            node.active = false;\r\n        }\r\n        // target end\r\n        let node = new cc.Node('endx');\r\n        node.addComponent(cc.Sprite).spriteFrame = this.pathEnd;\r\n        this.node.addChild(node);\r\n        this.segNodes.push(node);\r\n        node.active = false;\r\n\r\n        this.bezier = new BezierPath();\r\n    }\r\n\r\n    private generatePath(directionVector: cc.Vec2) {\r\n        // we add seg ad child of this node, so let it node pos as root coords\r\n        let endPos = cc.v2(directionVector.x * this.maxRange, directionVector.y * this.maxRange);\r\n        let l = endPos.mag() / 2;    // let contorl point lenght (compare with start end point)\r\n        // set dest node\r\n        PathVisual.getBezierPath(cc.Vec2.ZERO, directionVector, this.maxRange, this.bezier);\r\n        let node = this.segNodes[this.maxSeg];      // end x-node\r\n        node.setPosition(this.bezier.endPos);\r\n        node.active = true;\r\n        let segUsed = Math.ceil(l * 2 / this.maxRange * (this.maxSeg - 3)) + 3;     // min use 3 seg\r\n        for (let i = 1; i < this.maxSeg; i++) {\r\n            if (i < segUsed) {\r\n                let p = this.bezier.getPoint(i / segUsed);\r\n                this.segNodes[i].active = true;\r\n                this.segNodes[i].setPosition(p);\r\n            } else {\r\n                this.segNodes[i].active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    setDirectionVector(vector: cc.Vec2) {\r\n        this.generatePath(vector);\r\n    }\r\n\r\n    static getBezierPath(start: cc.Vec2, control: cc.Vec2, maxRange: number, out?: BezierPath): BezierPath {\r\n        // convert incase the input is object\r\n        start = cc.v2(start);\r\n        control = cc.v2(control);\r\n        let path = out || new BezierPath();\r\n        let target = cc.v2(control.x * maxRange, control.y * maxRange);\r\n        let s = target.mag();\r\n        let end = start.add(target);    // end point\r\n        // recalc controlPointAngle, so when in case 90/270 it not curve\r\n        let a = Math.atan2(control.y, control.x);\r\n        let pa = (1 - bezier(.06, .19, Math.abs(Math.sin(a)))) * this.controlPointAngle; // use easeIn curve to control angle\r\n        // revert controlangle when need\r\n        let r = control.x > 0 ? pa : (360 - pa);\r\n        let v = control.rotate(cc.misc.degreesToRadians(r));         // rotate to controlangle\r\n        a = Math.atan2(v.y, v.x);\r\n        let c1 = cc.v2(Math.cos(a) * s / 2, Math.sin(a) * s / 2);\r\n        c1 = start.add(c1);\r\n        r = control.x > 0 ? (180 - pa) : (180 + pa);\r\n        v = control.rotate(cc.misc.degreesToRadians(r));     // rotate to controlangle\r\n        a = Math.atan2(v.y, v.x);\r\n        let c2 = cc.v2(Math.cos(a) * s / 2, Math.sin(a) * s / 2);\r\n        c2.addSelf(target);  // move coord since it endpoint\r\n        c2 = start.add(c2);\r\n        path.setData(start, end, c1, c2);\r\n        return path;\r\n\r\n    }\r\n}\r\n\r\nexport class BezierPath {\r\n    startPos: cc.Vec2;\r\n    endPos: cc.Vec2;\r\n    control1: cc.Vec2;\r\n    control2: cc.Vec2;\r\n\r\n    setData(startPos: cc.Vec2, endPos: cc.Vec2, control1: cc.Vec2, control2: cc.Vec2) {\r\n        this.startPos = startPos;\r\n        this.endPos = endPos;\r\n        this.control1 = control1;\r\n        this.control2 = control2;\r\n    }\r\n\r\n    getPoint(t: number): cc.Vec2 {\r\n        let x = (1 - t) * (1 - t) * (1 - t) * this.startPos.x + 3 * (1 - t) * (1 - t) * t * this.control1.x + 3 * (1 - t) * t * t * this.control2.x + t * t * t * this.endPos.x;\r\n        let y = (1 - t) * (1 - t) * (1 - t) * this.startPos.y + 3 * (1 - t) * (1 - t) * t * this.control1.y + 3 * (1 - t) * t * t * this.control2.y + t * t * t * this.endPos.y;\r\n        return cc.v2(x, y);\r\n    }\r\n}\r\n// t -> y\r\nfunction bezier(c1y, c2y, t) {\r\n    return 3 * (1 - t) * (1 - t) * t * c1y + 3 * (1 - t) * t * t * c2y + t * t * t * 1;\r\n}","import EventManager from \"./core/event-manager\";\r\nimport LocalStorage from \"./core/localstorage\";\r\n\r\n// this singleton class keep all player ref\r\n\r\nexport default class PlayerRef {\r\n\r\n    public initialized: boolean = false;\r\n\r\n    private static _current: PlayerRef = null;\r\n    public static get current(): PlayerRef {\r\n        if (this._current == null) {\r\n            this._current = new PlayerRef();\r\n            this._current.init();\r\n        }\r\n\r\n        return this._current;\r\n    }\r\n\r\n    init() {\r\n        this._name = LocalStorage.getItem('user-name', \"NickName\");\r\n        this._displayIdx = +LocalStorage.getItem('displayIdx', '-1');\r\n        this._displayColor = +LocalStorage.getItem('displayColor', '-1');\r\n\r\n        cc.log(\"player init\")\r\n        EventManager.instance.dispatch('PlayerRef-init', 'success');\r\n        this.initialized = true;\r\n    }\r\n\r\n    //////////////////// property ///////////////////////    \r\n    private _id: string = \"\";\r\n    private _name: string = \"\";\r\n    private _displayIdx: number = -1;\r\n    private _displayColor: number = -1;\r\n\r\n    public get id() { return this._id; }\r\n    public setId(id: string) {\r\n        this._id = id;\r\n    }\r\n\r\n    public get name() { return this._name; }\r\n    public set name(name: string) {\r\n        this._name = name;\r\n        LocalStorage.setItem('user-name', name);\r\n    }\r\n\r\n    public get displayIdx () {\r\n        return this._displayIdx;\r\n    }\r\n    public set displayIdx(val: number) {\r\n        this._displayIdx = val;\r\n        LocalStorage.setItem('displayIdx', '' + val);\r\n    }\r\n\r\n    public get displayColor () {\r\n        return this._displayColor;\r\n    }\r\n    public set displayColor(val: number) {\r\n        this._displayColor = val;\r\n        LocalStorage.setItem('displayColor', '' + val);\r\n    }\r\n}","import { NetPlayer, NetPlayerMove, NetPlayerAction, SyncVar, NetManager, ServerOnly, NetComponent } from \"../libs/multiplayer/components/NetModules\";\r\nimport Input from \"./input/input\";\r\nimport EventManager from \"../core/event-manager\";\r\nimport PathVisual from \"./path-visual\";\r\nimport Bomb, { BombState } from \"./bomb\";\r\nimport GlobalVar from \"../core/global-var\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nexport interface PlayerMoveInput extends NetPlayerMove {\r\n    dir: number;\r\n    speed: number;\r\n}\r\n\r\nexport interface PlayerActionInput extends NetPlayerAction {\r\n    // add more action data!!\r\n    data?: any;\r\n}\r\n\r\nenum PlayerAction {\r\n    FIRE_THROW = 0,\r\n    FAST_SPEED,\r\n}\r\n\r\n@ccclass\r\nexport default class Player extends cc.Component {\r\n\r\n    static EVT_DEATH = 'pdeath';\r\n    static EVT_DEATH_TIME = 'pdeathtime';\r\n    static EVT_REVIVE = 'previve';\r\n\r\n    @property({ displayName: 'Speed' })\r\n    normalSpeed: number = 150;\r\n\r\n    @property(cc.Sprite)\r\n    display: cc.Sprite = null;\r\n\r\n    @property(cc.Label)\r\n    playerName: cc.Label = null;\r\n\r\n    @property(cc.Node)\r\n    healthNode: cc.Node = null;\r\n\r\n    @property()\r\n    maxHeath: number = 3;\r\n\r\n    @property()\r\n    maxFireRange: number = 500;\r\n\r\n    @property(PathVisual)\r\n    pathVisual: PathVisual = null;\r\n\r\n\r\n    @SyncVar()\r\n    face: number = 90;       // face direction of the player, it not realy the move dir of player\r\n\r\n    displayIdx: number;     // polygon index of player display\r\n    colorIdx: number;      // color of player\r\n\r\n    @SyncVar()\r\n    team: number = -1;\r\n\r\n    @SyncVar()\r\n    health: number;\r\n\r\n    @SyncVar()\r\n    bindFireId: string;\r\n\r\n    @SyncVar()\r\n    strength: number;\r\n\r\n    @SyncVar()\r\n    speed: number;\r\n\r\n    netPlayer: NetPlayer;\r\n    private healthNodeMaxHeight: number;\r\n    private death: boolean = false;\r\n    private deathTime = 10;\r\n\r\n    onLoad() {\r\n        this.netPlayer = this.getComponent(NetPlayer);\r\n        if (!this.netPlayer.isLocalPlayer) {\r\n            this.pathVisual.enabled = false;\r\n        }\r\n        this.pathVisual.maxRange = this.maxFireRange;\r\n        GlobalVar.instance.set('maxFireRange', this.maxFireRange);\r\n    }\r\n\r\n    start() {\r\n        // player implement\r\n        this.netPlayer.applyMove = this.applyMove.bind(this);\r\n        this.netPlayer.applyAction = this.applyAction.bind(this);\r\n        if (this.netPlayer.isLocalPlayer) {\r\n            EventManager.instance.register(Input.EVT_THROW_FIRE, this.onThrowFire, this);\r\n            EventManager.instance.register(Input.EVT_FAST_SPEED, this.onFastSpeed, this);\r\n        }\r\n        if (GAME_SERVER) {\r\n            this.strength = 100;\r\n            this.health = this.maxHeath;\r\n            this.speed = this.normalSpeed;\r\n        }\r\n        this.setupDisplay();\r\n    }\r\n\r\n    update(dt: number) {\r\n        // death check\r\n        if (this.health <= 0 && this.death == false) {      // just death\r\n            this.death = true;\r\n            this.deathTime = 10;\r\n            EventManager.instance.dispatch(Player.EVT_DEATH, this);\r\n        } else if (this.death == true && this.health > 0) {     // just alive\r\n            this.death = false;\r\n            EventManager.instance.dispatch(Player.EVT_REVIVE, this);\r\n        }\r\n\r\n        if (this.death) {\r\n            this.deathTime -= dt;\r\n            EventManager.instance.dispatch(Player.EVT_DEATH_TIME, this, Math.ceil(this.deathTime));\r\n        }\r\n\r\n        if (this.netPlayer.isLocalPlayer) {\r\n            // local player input\r\n            let move = Input.instance.getMoveData();\r\n            if (!this.death) {    // apply player input\r\n                // moving                \r\n                if (move) {\r\n                    move.speed = this.speed;           // update speed\r\n                    this.netPlayer.playerMove(move);\r\n                    this.display.node.setRotation(360 - (move.dir - 90));     // apply local face\r\n                }\r\n                // fire target\r\n                if (this.bindFireId) {\r\n                    let fireTarget = Input.instance.getFireTarget();\r\n                    let dis = fireTarget ? fireTarget.magSqr() : 0;\r\n                    if (dis > 0.15 * 0.15) {\r\n                        this.pathVisual.node.active = true;\r\n                        this.pathVisual.setDirectionVector(fireTarget);\r\n                    } else {\r\n                        this.pathVisual.node.active = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // update remote player rotation\r\n            let rot = 360 - (this.face - 90);\r\n            this.display.node.setRotation(rot);\r\n        }\r\n\r\n        // set health\r\n        let hp = (this.health / this.maxHeath) * this.healthNodeMaxHeight;\r\n        this.healthNode.height = Math.max(hp, 0);\r\n\r\n        if (GAME_SERVER) {\r\n            // check revive\r\n            if (this.death && Math.ceil(this.deathTime) <= 0) {\r\n                this.health = this.maxHeath;\r\n            }\r\n            // update fast speed vs strength\r\n            if (this.speed > this.normalSpeed) {     // in fast mode\r\n                this.strength -= 20 * dt;     // dec 20 str/second (with 100 strength -> fast in 5 second)\r\n                if (this.strength < 0) this.strength = 0;\r\n                if (this.strength == 0) {\r\n                    this.speed = this.calcSpeed();    // deactive fast when out of strength\r\n                }\r\n            } else {        // normal speed -> inc strength when need\r\n                if (this.strength < 100) {\r\n                    this.strength += 7 * dt;        // inc 7 str/second (~15 second to full fill)\r\n                    if (this.strength > 50) {\r\n                        this.speed = this.calcSpeed();      // update since player in 50% strength\r\n                    }\r\n                }\r\n                if (this.strength > 100) this.strength = 100;\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDisplay() {\r\n        let playerInfo = NetManager.instance.room.getPlayer(this.netPlayer.id);\r\n        this.displayIdx = playerInfo.data.p;\r\n        this.colorIdx = playerInfo.data.c;\r\n        let pols: cc.SpriteFrame[] = GlobalVar.instance.get('player-pols');\r\n        let polsMask: cc.SpriteFrame[] = GlobalVar.instance.get('player-pols-m');\r\n        let cols: cc.Color[] = GlobalVar.instance.get('player-cols');\r\n        this.display.spriteFrame = pols[this.displayIdx];\r\n        let healthSprite = this.healthNode.getComponentInChildren(cc.Sprite);\r\n        healthSprite.spriteFrame = polsMask[this.displayIdx];\r\n        healthSprite.node.color = cols[this.colorIdx];\r\n        this.playerName.string = playerInfo.name;\r\n        this.healthNodeMaxHeight = this.healthNode.height;\r\n    }\r\n\r\n    // implement for NetPlayer\r\n    applyMove(move: PlayerMoveInput, base?: cc.Vec2): cc.Vec2 {\r\n        let dx = Math.cos(cc.misc.degreesToRadians(move.dir)) * move.speed * move.time / 1000;\r\n        let dy = Math.sin(cc.misc.degreesToRadians(move.dir)) * move.speed * move.time / 1000;\r\n        GAME_SERVER && (this.face = move.dir);     // client can not set syncvar\r\n        base = base || this.node.position;\r\n        let pos = cc.v2(base.x + dx, base.y + dy);\r\n\r\n        // limit move zone, map size: 1280 x 720\r\n        let playerHW = 45;      // player half width limit\r\n        let top, bottom, left, right;\r\n        top = 720 - playerHW;\r\n        bottom = playerHW;\r\n        if (this.team == 1) {\r\n            left = playerHW;\r\n            right = 1280 / 2 - playerHW;\r\n        } else {\r\n            left = 1280 / 2 + playerHW;;\r\n            right = 1280 - playerHW;\r\n        }\r\n\r\n        if (pos.x < left) pos.x = left;\r\n        if (pos.x > right) pos.x = right;\r\n        if (pos.y < bottom) pos.y = bottom;\r\n        if (pos.y > top) pos.y = top;\r\n        return pos;\r\n    }\r\n\r\n    // implement for NetPlayer, run on server only\r\n    applyAction(action: PlayerActionInput) {\r\n        if(this.death) return;\r\n\r\n        // cc.log(`${this.netPlayer.id} apply action: ${JSON.stringify(action)}`)\r\n        if (action.action == PlayerAction.FIRE_THROW) {\r\n            let obj = NetManager.instance.getNetObject(this.bindFireId);\r\n            if (obj) {\r\n                obj.getComponent(Bomb).setThrowDirection(action.data);\r\n                this.bindFireId = '';\r\n            } else {\r\n                cc.warn('Can not get Fire object: ' + this.bindFireId);\r\n            }\r\n        } else if (action.action == PlayerAction.FAST_SPEED) {\r\n            let active: boolean = action.data;\r\n            this.speed = this.calcSpeed(active);\r\n        }\r\n    }\r\n\r\n    onThrowFire(cancel: boolean, target: cc.Vec2) {\r\n        if (!this.bindFireId && this.death) return;\r\n\r\n        if (!cancel) {\r\n            if (!target) {       // from key input\r\n                target = cc.v2(Math.cos(cc.misc.degreesToRadians(this.face)), Math.sin(cc.misc.degreesToRadians(this.face)));\r\n            }\r\n            let action: PlayerActionInput = { action: PlayerAction.FIRE_THROW, data: target }\r\n            this.netPlayer.playerAction(action);\r\n        }\r\n        this.pathVisual.node.active = false;\r\n    }\r\n\r\n    onFastSpeed(fast: boolean) {\r\n        if (this.strength <= 0 && fast == true) return;  // can not active speed when strength <= 0\r\n\r\n        let action: PlayerActionInput = { action: PlayerAction.FAST_SPEED, data: fast }\r\n        this.netPlayer.playerAction(action);\r\n    }\r\n\r\n    private calcSpeed(fast: boolean = false) {\r\n        if (this.strength > 0 && fast) {\r\n            return this.normalSpeed + this.normalSpeed * 1;\r\n        }\r\n        let speed = this.normalSpeed;\r\n        if (this.strength < 50) {\r\n            speed -= this.normalSpeed * 0.7;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    @ServerOnly\r\n    onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        // cc.log('plyaer collide with: ' + other.node.name + ' tag: ' + other.tag)\r\n        if (other.tag == 0) {        // bomb capture??\r\n            if (!this.bindFireId) {\r\n                let fire = other.node.getComponent(Bomb);\r\n                if (fire.canCapture()) {\r\n                    fire.setBindPlayer(this.netPlayer.id);\r\n                    this.bindFireId = other.node.getComponent(NetComponent).id;\r\n                }\r\n            }\r\n        }\r\n        if (other.tag == 1) {        // bomb explosion\r\n            this.health -= 1;\r\n        }\r\n    }\r\n\r\n    @ServerOnly\r\n    onBindFireExplore(id: string) {\r\n        if (id == this.bindFireId) {\r\n            this.bindFireId = '';\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n}","//     (c) 2012-2016 Airbnb, Inc.\r\n//\r\n//     polyglot.js may be freely distributed under the terms of the BSD\r\n//     license. For all licensing information, details, and documention:\r\n//     http://airbnb.github.com/polyglot.js\r\n//\r\n//\r\n// Polyglot.js is an I18n helper library written in JavaScript, made to\r\n// work both in the browser and in Node. It provides a simple solution for\r\n// interpolation and pluralization, based off of Airbnb's\r\n// experience adding I18n functionality to its Backbone.js and Node apps.\r\n//\r\n// Polylglot is agnostic to your translation backend. It doesn't perform any\r\n// translation; it simply gives you a way to manage translated phrases from\r\n// your client- or server-side JavaScript application.\r\n//\r\n\r\n\r\n(function(root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], function() {\r\n      return factory(root);\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(root);\r\n  } else {\r\n    root.Polyglot = factory(root);\r\n  }\r\n}(typeof global !== 'undefined' ? global : this, function(root) {\r\n  'use strict';\r\n\r\n  var replace = String.prototype.replace;\r\n\r\n  // ### Polyglot class constructor\r\n  function Polyglot(options) {\r\n    options = options || {};\r\n    this.phrases = {};\r\n    this.extend(options.phrases || {});\r\n    this.currentLocale = options.locale || 'en';\r\n    this.allowMissing = !!options.allowMissing;\r\n    this.warn = options.warn || warn;\r\n  }\r\n\r\n  // ### Version\r\n  Polyglot.VERSION = '1.0.0';\r\n\r\n  // ### polyglot.locale([locale])\r\n  //\r\n  // Get or set locale. Internally, Polyglot only uses locale for pluralization.\r\n  Polyglot.prototype.locale = function(newLocale) {\r\n    if (newLocale) this.currentLocale = newLocale;\r\n    return this.currentLocale;\r\n  };\r\n\r\n  // ### polyglot.extend(phrases)\r\n  //\r\n  // Use `extend` to tell Polyglot how to translate a given key.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     });\r\n  //\r\n  // The key can be any string.  Feel free to call `extend` multiple times;\r\n  // it will override any phrases with the same key, but leave existing phrases\r\n  // untouched.\r\n  //\r\n  // It is also possible to pass nested phrase objects, which get flattened\r\n  // into an object with the nested keys concatenated using dot notation.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"nav\": {\r\n  //         \"hello\": \"Hello\",\r\n  //         \"hello_name\": \"Hello, %{name}\",\r\n  //         \"sidebar\": {\r\n  //           \"welcome\": \"Welcome\"\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //\r\n  //     console.log(polyglot.phrases);\r\n  //     // {\r\n  //     //   'nav.hello': 'Hello',\r\n  //     //   'nav.hello_name': 'Hello, %{name}',\r\n  //     //   'nav.sidebar.welcome': 'Welcome'\r\n  //     // }\r\n  //\r\n  // `extend` accepts an optional second argument, `prefix`, which can be used\r\n  // to prefix every key in the phrases object with some string, using dot\r\n  // notation.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     }, \"nav\");\r\n  //\r\n  //     console.log(polyglot.phrases);\r\n  //     // {\r\n  //     //   'nav.hello': 'Hello',\r\n  //     //   'nav.hello_name': 'Hello, %{name}'\r\n  //     // }\r\n  //\r\n  // This feature is used internally to support nested phrase objects.\r\n  Polyglot.prototype.extend = function(morePhrases, prefix) {\r\n    var phrase;\r\n\r\n    for (var key in morePhrases) {\r\n      if (morePhrases.hasOwnProperty(key)) {\r\n        phrase = morePhrases[key];\r\n        if (prefix) key = prefix + '.' + key;\r\n        if (typeof phrase === 'object') {\r\n          this.extend(phrase, key);\r\n        } else {\r\n          this.phrases[key] = phrase;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // ### polyglot.unset(phrases)\r\n  // Use `unset` to selectively remove keys from a polyglot instance.\r\n  //\r\n  //     polyglot.unset(\"some_key\");\r\n  //     polyglot.unset({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     });\r\n  //\r\n  // The unset method can take either a string (for the key), or an object hash with\r\n  // the keys that you would like to unset.\r\n  Polyglot.prototype.unset = function(morePhrases, prefix) {\r\n    var phrase;\r\n\r\n    if (typeof morePhrases === 'string') {\r\n      delete this.phrases[morePhrases];\r\n    } else {\r\n      for (var key in morePhrases) {\r\n        if (morePhrases.hasOwnProperty(key)) {\r\n          phrase = morePhrases[key];\r\n          if (prefix) key = prefix + '.' + key;\r\n          if (typeof phrase === 'object') {\r\n            this.unset(phrase, key);\r\n          } else {\r\n            delete this.phrases[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // ### polyglot.clear()\r\n  //\r\n  // Clears all phrases. Useful for special cases, such as freeing\r\n  // up memory if you have lots of phrases but no longer need to\r\n  // perform any translation. Also used internally by `replace`.\r\n  Polyglot.prototype.clear = function() {\r\n    this.phrases = {};\r\n  };\r\n\r\n  // ### polyglot.replace(phrases)\r\n  //\r\n  // Completely replace the existing phrases with a new set of phrases.\r\n  // Normally, just use `extend` to add more phrases, but under certain\r\n  // circumstances, you may want to make sure no old phrases are lying around.\r\n  Polyglot.prototype.replace = function(newPhrases) {\r\n    this.clear();\r\n    this.extend(newPhrases);\r\n  };\r\n\r\n\r\n  // ### polyglot.t(key, options)\r\n  //\r\n  // The most-used method. Provide a key, and `t` will return the\r\n  // phrase.\r\n  //\r\n  //     polyglot.t(\"hello\");\r\n  //     => \"Hello\"\r\n  //\r\n  // The phrase value is provided first by a call to `polyglot.extend()` or\r\n  // `polyglot.replace()`.\r\n  //\r\n  // Pass in an object as the second argument to perform interpolation.\r\n  //\r\n  //     polyglot.t(\"hello_name\", {name: \"Spike\"});\r\n  //     => \"Hello, Spike\"\r\n  //\r\n  // If you like, you can provide a default value in case the phrase is missing.\r\n  // Use the special option key \"_\" to specify a default.\r\n  //\r\n  //     polyglot.t(\"i_like_to_write_in_language\", {\r\n  //       _: \"I like to write in %{language}.\",\r\n  //       language: \"JavaScript\"\r\n  //     });\r\n  //     => \"I like to write in JavaScript.\"\r\n  //\r\n  Polyglot.prototype.t = function(key, options) {\r\n    var phrase, result;\r\n    options = options == null ? {} : options;\r\n    // allow number as a pluralization shortcut\r\n    if (typeof options === 'number') {\r\n      options = {smart_count: options};\r\n    }\r\n    if (typeof this.phrases[key] === 'string') {\r\n      phrase = this.phrases[key];\r\n    } else if (typeof options._ === 'string') {\r\n      phrase = options._;\r\n    } else if (this.allowMissing) {\r\n      phrase = key;\r\n    } else {\r\n      this.warn('Missing translation for key: \"'+key+'\"');\r\n      result = key;\r\n    }\r\n    if (typeof phrase === 'string') {\r\n      options = clone(options);\r\n      result = choosePluralForm(phrase, this.currentLocale, options.smart_count);\r\n      result = interpolate(result, options);\r\n    }\r\n    return result;\r\n  };\r\n\r\n\r\n  // ### polyglot.has(key)\r\n  //\r\n  // Check if polyglot has a translation for given key\r\n  Polyglot.prototype.has = function(key) {\r\n    return key in this.phrases;\r\n  };\r\n\r\n\r\n  // #### Pluralization methods\r\n  // The string that separates the different phrase possibilities.\r\n  var delimeter = '||||';\r\n\r\n  // Mapping from pluralization group plural logic.\r\n  var pluralTypes = {\r\n    chinese:   function(n) { return 0; },\r\n    german:    function(n) { return n !== 1 ? 1 : 0; },\r\n    french:    function(n) { return n > 1 ? 1 : 0; },\r\n    russian:   function(n) { return n % 10 === 1 && n % 100 !== 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2; },\r\n    czech:     function(n) { return (n === 1) ? 0 : (n >= 2 && n <= 4) ? 1 : 2; },\r\n    polish:    function(n) { return (n === 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2); },\r\n    icelandic: function(n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; }\r\n  };\r\n\r\n  // Mapping from pluralization group to individual locales.\r\n  var pluralTypeToLanguages = {\r\n    chinese:   ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],\r\n    german:    ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],\r\n    french:    ['fr', 'tl', 'pt-br'],\r\n    russian:   ['hr', 'ru'],\r\n    czech:     ['cs', 'sk'],\r\n    polish:    ['pl'],\r\n    icelandic: ['is']\r\n  };\r\n\r\n  function langToTypeMap(mapping) {\r\n    var type, langs, l, ret = {};\r\n    for (type in mapping) {\r\n      if (mapping.hasOwnProperty(type)) {\r\n        langs = mapping[type];\r\n        for (l in langs) {\r\n          ret[langs[l]] = type;\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  // Trim a string.\r\n  var trimRe = /^\\s+|\\s+$/g;\r\n  function trim(str){\r\n    return replace.call(str, trimRe, '');\r\n  }\r\n\r\n  // Based on a phrase text that contains `n` plural forms separated\r\n  // by `delimeter`, a `locale`, and a `count`, choose the correct\r\n  // plural form, or none if `count` is `null`.\r\n  function choosePluralForm(text, locale, count){\r\n    var ret, texts, chosenText;\r\n    if (count != null && text) {\r\n      texts = text.split(delimeter);\r\n      chosenText = texts[pluralTypeIndex(locale, count)] || texts[0];\r\n      ret = trim(chosenText);\r\n    } else {\r\n      ret = text;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  function pluralTypeName(locale) {\r\n    var langToPluralType = langToTypeMap(pluralTypeToLanguages);\r\n    return langToPluralType[locale] || langToPluralType.en;\r\n  }\r\n\r\n  function pluralTypeIndex(locale, count) {\r\n    return pluralTypes[pluralTypeName(locale)](count);\r\n  }\r\n\r\n  // ### interpolate\r\n  //\r\n  // Does the dirty work. Creates a `RegExp` object for each\r\n  // interpolation placeholder.\r\n  var dollarRegex = /\\$/g;\r\n  var dollarBillsYall = '$$$$';\r\n  function interpolate(phrase, options) {\r\n    for (var arg in options) {\r\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\r\n        // Ensure replacement value is escaped to prevent special $-prefixed\r\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\r\n        // be escaped with \"$\" itself, and we need two in the resulting output.\r\n        var replacement = options[arg];\r\n        if (typeof replacement === 'string') {\r\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);\r\n        }\r\n        // We create a new `RegExp` each time instead of using a more-efficient\r\n        // string replace so that the same argument can be replaced multiple times\r\n        // in the same phrase.\r\n        phrase = replace.call(phrase, new RegExp('%\\\\{'+arg+'\\\\}', 'g'), replacement);\r\n      }\r\n    }\r\n    return phrase;\r\n  }\r\n\r\n  // ### warn\r\n  //\r\n  // Provides a warning in the console if a phrase key is missing.\r\n  function warn(message) {\r\n    root.console && root.console.warn && root.console.warn('WARNING: ' + message);\r\n  }\r\n\r\n  // ### clone\r\n  //\r\n  // Clone an object.\r\n  function clone(source) {\r\n    var ret = {};\r\n    for (var prop in source) {\r\n      ret[prop] = source[prop];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  return Polyglot;\r\n}));\r\n","\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Popup extends cc.Component {\r\n\r\n    private static _instance: Popup = null;\r\n    public static get instance(): Popup {\r\n        if (this._instance) return this._instance;\r\n        cc.error(\"Popup does not init yet, this need to be init in loader\");\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Prefab)\r\n    dialogPopup: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    waitingPopup: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    notifyPopup: cc.Prefab = null;\r\n\r\n    onLoad() {\r\n        Popup._instance = this;\r\n        cc.game.addPersistRootNode(this.node);\r\n        this.node.zIndex = 1000;\r\n    }\r\n\r\n    showInfoPopup(content: string, closeCallback?: Function) {\r\n        let canvas = cc.find(\"Canvas\");\r\n        let node = cc.instantiate(this.dialogPopup);\r\n        let blockInput = node.getChildByName('blockinput').getComponent(cc.Widget);\r\n        blockInput.target = canvas; blockInput.left = 0; blockInput.right = 0;\r\n        let contentNode = node.getChildByName(\"content\");\r\n        contentNode.getChildByName('content-text').getComponent(cc.Label).string = content;\r\n        contentNode.getChildByName(\"positivebutton\").active = false;\r\n        contentNode.getChildByName(\"negativebutton\").active = false;\r\n        let button: cc.Button = contentNode.getChildByName(\"okbutton\").getComponent(cc.Button);\r\n        button.node.on('click', () => {\r\n            node.removeFromParent();\r\n            if (closeCallback) closeCallback();\r\n        });\r\n        canvas.addChild(node);\r\n        this.playAppearAnim(contentNode, canvas);\r\n    }\r\n\r\n    showConfirmPopup(content: string, positiveButLabel: string, negativeButLabel: string, positiveCallback?: Function, negativeCallback?: Function) {\r\n        let canvas = cc.find(\"Canvas\");\r\n        let node = cc.instantiate(this.dialogPopup);\r\n        let blockInput = node.getChildByName('blockinput').getComponent(cc.Widget);\r\n        blockInput.target = canvas; blockInput.left = 0; blockInput.right = 0;\r\n        let contentNode = node.getChildByName(\"content\");\r\n        contentNode.getChildByName('content-text').getComponent(cc.Label).string = content;\r\n        contentNode.getChildByName(\"okbutton\").active = false;\r\n        contentNode.getChildByName(\"positivebutton\").getComponentInChildren(cc.Label).string = positiveButLabel;\r\n        contentNode.getChildByName(\"negativebutton\").getComponentInChildren(cc.Label).string = negativeButLabel;\r\n        let button1: cc.Button = contentNode.getChildByName(\"positivebutton\").getComponent(cc.Button);\r\n        button1.node.on('click', () => {\r\n            node.removeFromParent();\r\n            if (positiveCallback) positiveCallback();\r\n        });\r\n        let button2: cc.Button = contentNode.getChildByName(\"negativebutton\").getComponent(cc.Button);\r\n        button2.node.on('click', () => {\r\n            node.removeFromParent();\r\n            if (negativeCallback) negativeCallback();\r\n        });\r\n        canvas.addChild(node);\r\n        this.playAppearAnim(contentNode, canvas);\r\n    }\r\n\r\n    private waitingPopupNode: cc.Node = null;\r\n    showWaitingPopup(content: string, cacelable: boolean = false, closeCallback?: Function) {\r\n        this.hideWaitingPopup();\r\n        let canvas = cc.find(\"Canvas\");\r\n        let node = cc.instantiate(this.waitingPopup);\r\n        let blockInput = node.getChildByName('blockinput').getComponent(cc.Widget);\r\n        blockInput.target = canvas; blockInput.left = 0; blockInput.right = 0;\r\n        let contentNode = node.getChildByName(\"content\");\r\n        contentNode.getChildByName('content-text').getComponentInChildren(cc.Label).string = content;\r\n        let closeButton = contentNode.getComponentInChildren(cc.Button).node;\r\n        closeButton.active = cacelable;\r\n        if(cacelable) {\r\n            closeButton.on('click', () => {\r\n                this.hideWaitingPopup();\r\n                if(closeCallback) closeCallback();\r\n            })\r\n        }\r\n        this.waitingPopupNode = node;\r\n        canvas.addChild(node);\r\n        this.playAppearAnim(contentNode, canvas);\r\n    }\r\n\r\n    hideWaitingPopup() {\r\n        if (this.waitingPopupNode)\r\n            this.waitingPopupNode.removeFromParent();\r\n    }\r\n\r\n    showNotify(content: string, duration: number = 3) {\r\n        let node = cc.instantiate(this.notifyPopup);        \r\n        node.getChildByName(\"content\").getChildByName('content-text').getComponentInChildren(cc.Label).string = content;\r\n        cc.find('Canvas').addChild(node);\r\n        this.scheduleOnce(() => {\r\n            node.removeFromParent();\r\n        }, duration);\r\n    }\r\n\r\n    private playAppearAnim(node: cc.Node, container: cc.Node) {\r\n        let h = node.height;\r\n        let ch = container.height;\r\n        node.setPosition(node.x, h + ch / 2);\r\n        node.runAction(cc.moveBy(0.3, 0, - (h + ch / 2)).easing(cc.easeSineOut()));\r\n    }\r\n}","export function prettyByte(byte: number): string {\r\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte)\r\n    .toString(16)\r\n    .padStart(2, \"0\")}`;\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\nimport EventManager from './event-manager'\r\nimport { RandomUnique } from '../utils';\r\n\r\n@ccclass\r\nexport default class SoundManager {\r\n\r\n    private sounds: { [key: string]: cc.AudioClip } = {};\r\n    private playingSounds: { [key: string]: number } = {}\r\n\r\n    private static _instance: SoundManager = null;\r\n\r\n    private initialized: boolean = false;\r\n    private enable: boolean = true;\r\n    private effectEnable: boolean = true;\r\n    private musicEnable: boolean = true;\r\n    private DEBUG_LOG = false;\r\n\r\n    static get instance() {\r\n        if (SoundManager._instance == null) {\r\n            SoundManager._instance = new SoundManager();\r\n        }\r\n        return SoundManager._instance;\r\n    }\r\n\r\n    public get soundEnable() { return this.enable; }\r\n    setEnable(enable: boolean) {\r\n        this.enable = enable;\r\n        cc.sys.localStorage.setItem(\"Sound_enable\", enable ? 1 : 0);\r\n        this.setEffectEnable(enable);\r\n        this.setMusicEnable(enable);\r\n    }\r\n\r\n    public get soundEffectEnable() { return this.effectEnable; }\r\n    setEffectEnable(enable: boolean) {\r\n        this.effectEnable = enable;\r\n        cc.sys.localStorage.setItem(\"Sound_effect_enable\", enable ? 1 : 0);\r\n    }\r\n\r\n    public get soundMusicEnable() { return this.musicEnable; }\r\n    setMusicEnable(enable: boolean) {\r\n        this.musicEnable = enable;\r\n        cc.sys.localStorage.setItem(\"Sound_music_enable\", enable ? 1 : 0);\r\n    }\r\n\r\n    log(message) {\r\n        if (this.DEBUG_LOG) {\r\n            cc.log(message);\r\n        }\r\n    }\r\n\r\n    error(message) {\r\n        if (this.DEBUG_LOG) {\r\n            cc.error(message);\r\n        }\r\n    }\r\n\r\n    init() {\r\n        // load from resource\r\n        cc.loader.loadResDir('sounds', cc.AudioClip, (error, assets: cc.AudioClip[], urls: string[]) => {\r\n            if(urls.length > 0) {\r\n                assets.forEach((sound, index) => {\r\n                    this.sounds[sound.name] = sound;\r\n                });\r\n            }\r\n            this.initialized = true;\r\n            this.enable = cc.sys.localStorage.getItem(\"Sound_enable\") ? parseInt(cc.sys.localStorage.getItem(\"Sound_enable\")) == 1 : true;\r\n            this.effectEnable = cc.sys.localStorage.getItem(\"Sound_effect_enable\") ? parseInt(cc.sys.localStorage.getItem(\"Sound_effect_enable\")) == 1 : true;\r\n            this.musicEnable = cc.sys.localStorage.getItem(\"Sound_music_enable\") ? parseInt(cc.sys.localStorage.getItem(\"Sound_music_enable\")) == 1 : true;\r\n            cc.log(\"sound init\");\r\n            EventManager.instance.dispatch(\"Sound_initialized\");\r\n        });\r\n\r\n    }\r\n\r\n    playMusic(clipName: string, loop: boolean = true) {\r\n        if (!this.musicEnable || !this.initialized) return null;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.sounds[clipName]) {\r\n            this.log('play music: ' + clipName);\r\n            let id = cc.audioEngine.playMusic(this.sounds[clipName], loop);\r\n            this.playingSounds[clipName] = id;\r\n            return id;\r\n        }\r\n        else {\r\n            this.error(\"playMusic - clipName: \" + clipName + \" not found\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    playEffect(clipName: string, loop: boolean = false) {\r\n        if (!this.enable || !this.initialized) return null;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.sounds[clipName]) {\r\n            this.log('play effect: ' + clipName);\r\n            let id = cc.audioEngine.playEffect(this.sounds[clipName], loop);\r\n            this.playingSounds[clipName] = id;\r\n            return id;\r\n        }\r\n        else {\r\n            this.error(\"playEffect - clipName: \" + clipName + \" not found\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    playRandom(clipsName: string[], loop: boolean = false, effect: boolean = true) {\r\n        if (!this.enable || !this.initialized) return null;\r\n\r\n        let idx = Math.floor(Math.random() * clipsName.length);\r\n        let clipName = clipsName[idx].toLowerCase();\r\n        if (this.sounds[clipName]) {\r\n            this.log('play random: ' + clipName);\r\n            let id = null;\r\n            if (effect) {\r\n                id = this.playEffect(clipName, loop);\r\n            } else {\r\n                id = this.playMusic(clipName, loop);\r\n            }\r\n            this.playingSounds[clipName] = id;\r\n            return id;\r\n        }\r\n        else {\r\n            this.error(\"playRandom - clipName: \" + clipsName[idx] + \" not found\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    pause(clipName: string) {\r\n        if (!this.enable) return;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined && cc.audioEngine.getState(this.playingSounds[clipName]) === cc.audioEngine.AudioState.PLAYING) {\r\n            cc.audioEngine.pause(this.playingSounds[clipName]);\r\n        } else {\r\n            this.error(\"Pause sound: \" + clipName + \" is not in playing list\");\r\n            delete this.playingSounds[clipName];\r\n        }\r\n    }\r\n\r\n    resume(clipName: string) {\r\n        if (!this.enable) return;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined && cc.audioEngine.getState(this.playingSounds[clipName]) === cc.audioEngine.AudioState.PAUSED) {\r\n            cc.audioEngine.resume(this.playingSounds[clipName]);\r\n        } else {\r\n            this.error(\"Resume sound: \" + clipName + \" is not in pause list\");\r\n            delete this.playingSounds[clipName];\r\n        }\r\n    }\r\n\r\n    stop(clipName: string) {\r\n        if (!this.enable) return;\r\n\r\n        this.log(\"stop sound: \" + clipName);\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined) {\r\n            cc.audioEngine.stop(this.playingSounds[clipName]);\r\n            delete this.playingSounds[clipName];\r\n        } else {\r\n            this.error(\"Stop sound: \" + clipName + \" is not in playing list\");\r\n        }\r\n    }\r\n\r\n    isPlaying(clipName: string): boolean {\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined) {\r\n            let state = cc.audioEngine.getState(this.playingSounds[clipName]);\r\n            return state == cc.audioEngine.AudioState.PLAYING;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    pauseAll() {\r\n        cc.audioEngine.pauseAll();\r\n    }\r\n\r\n    resumeAll() {\r\n        if (!this.enable) return;\r\n\r\n        cc.audioEngine.resumeAll();\r\n    }\r\n\r\n    stopAll() {\r\n        if (!this.enable) return;\r\n\r\n        cc.audioEngine.stopAll();\r\n    }\r\n\r\n    /**\r\n     * set backgound music volume\r\n     * @param volume from 0 - 1.0\r\n     */\r\n    setMusicVolume(volume: number) {\r\n        if (!this.musicEnable) return;\r\n\r\n        cc.audioEngine.setMusicVolume(volume);\r\n    }\r\n\r\n    /**\r\n     * set effect sound volume\r\n     * @param volume from 0 - 1.0\r\n     */\r\n    setEffectVolume(volume: number) {\r\n        if (!this.effectEnable) return;\r\n\r\n        cc.audioEngine.setEffectsVolume(volume);\r\n    }\r\n\r\n    /**\r\n     * get the id of sound, to use with internal engin cc.audioEngine\r\n     * @param clipName \r\n     */\r\n    getSoundId(clipName: string): number {\r\n        clipName = clipName.toLowerCase();\r\n        return this.playingSounds[clipName];\r\n    }\r\n}\r\n","// utility for whatwg streams\r\n\r\n// The living standard of whatwg streams says\r\n// ReadableStream is also AsyncIterable, but\r\n// as of June 2019, no browser implements it.\r\n// See https://streams.spec.whatwg.org/ for details\r\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\r\n\r\nexport function isAsyncIterable<T>(object: object): object is AsyncIterable<T> {\r\n  return (object as any)[Symbol.asyncIterator] != null;\r\n}\r\n\r\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\r\n  const reader = stream.getReader();\r\n\r\n  try {\r\n    while (true) {\r\n      const { done, value } = await reader.read();\r\n      if (done) {\r\n        return;\r\n      }\r\n      yield value;\r\n    }\r\n  } finally {\r\n    reader.releaseLock();\r\n  }\r\n}\r\n\r\nexport function ensureAsyncIterabe<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\r\n  if (isAsyncIterable(streamLike)) {\r\n    return streamLike;\r\n  } else {\r\n    return asyncIterableFromStream(streamLike);\r\n  }\r\n}\r\n","import Input from \"./input/input\";\r\nimport Player from \"./player\";\r\nimport { NetManager } from \"../libs/multiplayer/components/NetManager\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class StrengthControl extends cc.Component {\r\n    \r\n\r\n    private strengthProgress: cc.ProgressBar;\r\n    private localPlayer: Player;\r\n    private color = cc.color(57, 164, 136);\r\n\r\n    start() {\r\n        this.strengthProgress = this.getComponent(cc.ProgressBar);\r\n        this.strengthProgress.progress = 1;\r\n        this.node.opacity = 150;\r\n\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n    }\r\n\r\n    onTouchStart() {\r\n        this.node.opacity = 255;\r\n        Input.instance.setFastSpeedMode(true);\r\n    }\r\n\r\n    onTouchEnd() {\r\n        this.node.opacity = 150;\r\n        Input.instance.setFastSpeedMode(false);\r\n    }\r\n\r\n    update(dt) {\r\n        if(!this.localPlayer && NetManager.instance.getLocalPlayer()) {\r\n            this.localPlayer = NetManager.instance.getLocalPlayer().getComponent(Player);\r\n        }\r\n\r\n        if(this.localPlayer) {\r\n            // update progress by player strength\r\n            let p = this.localPlayer.strength / 100;\r\n            this.strengthProgress.progress = p;\r\n            // update corlor\r\n            this.strengthProgress.barSprite.node.color = cc.Color.RED.lerp(this.color, p); //this.color.lerp(cc.Color.RED, p);\r\n        }\r\n    }\r\n}","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\r\nimport { getInt64, setInt64 } from \"./utils/int\";\r\n\r\nexport const EXT_TIMESTAMP = -1;\r\n\r\nexport type TimeSpec = {\r\n  sec: number;\r\n  nsec: number;\r\n};\r\n\r\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\r\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\r\n\r\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\r\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\r\n    // Here sec >= 0 && nsec >= 0\r\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\r\n      // timestamp 32 = { sec32 (unsigned) }\r\n      const rv = new Uint8Array(4);\r\n      const view = new DataView(rv.buffer);\r\n      view.setUint32(0, sec);\r\n      return rv;\r\n    } else {\r\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\r\n      const secHigh = sec / 0x100000000;\r\n      const secLow = sec & 0xffffffff;\r\n      const rv = new Uint8Array(8);\r\n      const view = new DataView(rv.buffer);\r\n      // nsec30 | secHigh2\r\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\r\n      // secLow32\r\n      view.setUint32(4, secLow);\r\n      return rv;\r\n    }\r\n  } else {\r\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n    const rv = new Uint8Array(12);\r\n    const view = new DataView(rv.buffer);\r\n    view.setUint32(0, nsec);\r\n    setInt64(view, 4, sec);\r\n    return rv;\r\n  }\r\n}\r\n\r\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\r\n  const msec = date.getTime();\r\n  const sec = Math.floor(msec / 1e3);\r\n  const nsec = (msec - sec * 1e3) * 1e6;\r\n\r\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\r\n  const nsecInSec = Math.floor(nsec / 1e9);\r\n  return {\r\n    sec: sec + nsecInSec,\r\n    nsec: nsec - nsecInSec * 1e9,\r\n  };\r\n}\r\n\r\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\r\n  if (object instanceof Date) {\r\n    const timeSpec = encodeDateToTimeSpec(object);\r\n    return encodeTimeSpecToTimestamp(timeSpec);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\r\n  // data may be 32, 64, or 96 bits\r\n  switch (data.byteLength) {\r\n    case 4: {\r\n      // timestamp 32 = { sec32 }\r\n      const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n      const sec = view.getUint32(0);\r\n      const nsec = 0;\r\n      return { sec, nsec };\r\n    }\r\n    case 8: {\r\n      // timestamp 64 = { nsec30, sec34 }\r\n      const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n      const nsec30AndSecHigh2 = view.getUint32(0);\r\n      const secLow32 = view.getUint32(4);\r\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\r\n      const nsec = nsec30AndSecHigh2 >>> 2;\r\n      return { sec, nsec };\r\n    }\r\n    case 12: {\r\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n      const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n      const sec = getInt64(view, 4);\r\n      const nsec = view.getUint32(0);\r\n      return { sec, nsec };\r\n    }\r\n    default:\r\n      throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\r\n  }\r\n}\r\n\r\nexport function decodeTimestampExtension(data: Uint8Array): Date {\r\n  const timeSpec = decodeTimestampToTimeSpec(data);\r\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\r\n}\r\n\r\nexport const timestampExtension = {\r\n  type: EXT_TIMESTAMP,\r\n  encode: encodeTimestampExtension,\r\n  decode: decodeTimestampExtension,\r\n};\r\n","export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView) {\r\n  if (buffer instanceof Uint8Array) {\r\n    return buffer;\r\n  } else if (ArrayBuffer.isView(buffer)) {\r\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n  } else {\r\n    // ArrayLike<number>\r\n    return Uint8Array.from(buffer);\r\n  }\r\n}\r\n\r\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\r\n  if (buffer instanceof ArrayBuffer) {\r\n    return new DataView(buffer);\r\n  }\r\n\r\n  const bufferView = ensureUint8Array(buffer);\r\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\r\n}\r\n","export function utf8Count(str: string): number {\r\n  const strLength = str.length;\r\n\r\n  let byteLength = 0;\r\n  let pos = 0;\r\n  while (pos < strLength) {\r\n    let value = str.charCodeAt(pos++);\r\n\r\n    if ((value & 0xffffff80) === 0) {\r\n      // 1-byte\r\n      byteLength++;\r\n      continue;\r\n    } else if ((value & 0xfffff800) === 0) {\r\n      // 2-bytes\r\n      byteLength += 2;\r\n    } else {\r\n      // handle surrogate pair\r\n      if (value >= 0xd800 && value <= 0xdbff) {\r\n        // high surrogate\r\n        if (pos < strLength) {\r\n          const extra = str.charCodeAt(pos);\r\n          if ((extra & 0xfc00) === 0xdc00) {\r\n            ++pos;\r\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n          }\r\n        }\r\n      }\r\n\r\n      if ((value & 0xffff0000) === 0) {\r\n        // 3-byte\r\n        byteLength += 3;\r\n      } else {\r\n        // 4-byte\r\n        byteLength += 4;\r\n      }\r\n    }\r\n  }\r\n  return byteLength;\r\n}\r\n\r\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\r\n  const strLength = str.length;\r\n  let offset = outputOffset;\r\n  let pos = 0;\r\n  while (pos < strLength) {\r\n    let value = str.charCodeAt(pos++);\r\n\r\n    if ((value & 0xffffff80) === 0) {\r\n      // 1-byte\r\n      output[offset++] = value;\r\n      continue;\r\n    } else if ((value & 0xfffff800) === 0) {\r\n      // 2-bytes\r\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\r\n    } else {\r\n      // handle surrogate pair\r\n      if (value >= 0xd800 && value <= 0xdbff) {\r\n        // high surrogate\r\n        if (pos < strLength) {\r\n          const extra = str.charCodeAt(pos);\r\n          if ((extra & 0xfc00) === 0xdc00) {\r\n            ++pos;\r\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n          }\r\n        }\r\n      }\r\n\r\n      if ((value & 0xffff0000) === 0) {\r\n        // 3-byte\r\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\r\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\r\n      } else {\r\n        // 4-byte\r\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\r\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\r\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\r\n      }\r\n    }\r\n\r\n    output[offset++] = (value & 0x3f) | 0x80;\r\n  }\r\n}\r\n\r\nconst CHUNK_SIZE = 0x10_000;\r\n\r\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\r\n  let offset = inputOffset;\r\n  const end = offset + byteLength;\r\n\r\n  const units: Array<number> = [];\r\n  let result = \"\";\r\n  while (offset < end) {\r\n    const byte1 = bytes[offset++];\r\n    if ((byte1 & 0x80) === 0) {\r\n      // 1 byte\r\n      units.push(byte1);\r\n    } else if ((byte1 & 0xe0) === 0xc0) {\r\n      // 2 bytes\r\n      const byte2 = bytes[offset++] & 0x3f;\r\n      units.push(((byte1 & 0x1f) << 6) | byte2);\r\n    } else if ((byte1 & 0xf0) === 0xe0) {\r\n      // 3 bytes\r\n      const byte2 = bytes[offset++] & 0x3f;\r\n      const byte3 = bytes[offset++] & 0x3f;\r\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\r\n    } else if ((byte1 & 0xf8) === 0xf0) {\r\n      // 4 bytes\r\n      const byte2 = bytes[offset++] & 0x3f;\r\n      const byte3 = bytes[offset++] & 0x3f;\r\n      const byte4 = bytes[offset++] & 0x3f;\r\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\r\n      if (unit > 0xffff) {\r\n        unit -= 0x10000;\r\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\r\n        unit = 0xdc00 | (unit & 0x3ff);\r\n      }\r\n      units.push(unit);\r\n    } else {\r\n      units.push(byte1);\r\n    }\r\n\r\n    if (units.length - 4 >= CHUNK_SIZE) {\r\n      result += String.fromCharCode(...units);\r\n      units.length = 0;\r\n    }\r\n  }\r\n\r\n  if (units.length > 0) {\r\n    result += String.fromCharCode(...units);\r\n  }\r\n\r\n  return result;\r\n}\r\n","\r\n// random unique\r\nexport class RandomUnique {\r\n\r\n    private unique: number[] = [];\r\n    private initLength = -1;\r\n    private recycle: boolean = false;\r\n\r\n    constructor(length: number, recycle: boolean = false) {\r\n        this.initLength = length;\r\n        this.recycle = recycle;\r\n        for(let i = 0; i < length; i++) {\r\n            this.unique[i] = i;\r\n        }\r\n    }\r\n\r\n    random(): number {\r\n        if(this.unique.length == 0) {\r\n            if(this.recycle && this.initLength != -1) {\r\n                for(let i = 0; i < this.initLength; i++) {\r\n                    this.unique[i] = i;\r\n                }\r\n            } else {\r\n                return -1;\r\n            }            \r\n        } \r\n        let idx = Math.floor(Math.random() * (this.unique.length - 1));\r\n        let ret = this.unique[idx];\r\n        this.unique.splice(idx, 1);\r\n        return ret;\r\n    }\r\n}\r\n\r\nexport class Constant {\r\n    static MAX_SAFE_INTEGER = 9007199254740991;\r\n    static MIN_SAFE_INTEGER = -9007199254740991;\r\n}\r\n\r\nexport class Utils{\r\n    public static getCurrentSceneName(): string {\r\n        let scene: string = \"\";\r\n        (cc.game as any)._sceneInfos.forEach(element => {\r\n            if(element.uuid == (cc.director as any)._scene._id) {\r\n                scene = element.url;\r\n                scene = scene.substring(scene.lastIndexOf('/')+1).match(/[^\\.]+/)[0]\r\n            }\r\n        });\r\n    \r\n        return scene;\r\n    }\r\n\r\n    // lerp from 'from' to 'to' number with ratio\r\n    public static lerp(from: number, to: number, ratio: number) {\r\n        ratio = ratio < 0 ? 0 : ratio;\r\n        ratio = ratio > 1 ? 1 : ratio;\r\n        return from + (to - from) * ratio;\r\n    }\r\n\r\n    public static genUId(): string {\r\n        return (Date.now().toString(36) + Math.random().toString(36).substr(2, 5));\r\n    }\r\n\r\n    public static extend(obj, src) {\r\n        if(src == null) return obj;\r\n        if(obj == null) obj = {};\r\n        Object.keys(src).forEach(function(key) { obj[key] = src[key]; });\r\n        return obj;\r\n    }\r\n\r\n    public static randomRange(min: number, max: number) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n\r\n    public static zeropad(n: number, d: number): string {\r\n\t\tvar s = (n < 0 ? \"-\" : \"\");\r\n\t\tif (n < 0) n = -n;\r\n\t\tvar zeroes = d - n.toString().length;\r\n\t\tfor (var i = 0; i < zeroes; i++)\r\n\t\t\ts += \"0\";\r\n        return (s + n.toString());\r\n    }\r\n\r\n    // convert time (in seconds) to string display mm:ss\r\n    public static time2String(time: number): string {\r\n        time = Math.floor(time);\r\n        let min = Math.floor(time / 60);\r\n        let sec = time % 60;\r\n        \r\n        return this.zeropad(min, 2) + ':' + this.zeropad(sec, 2);\r\n    }\r\n}"],"sourceRoot":"/source/","file":"project.dev.js"}